
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model Ability
 * 
 */
export type Ability = $Result.DefaultSelection<Prisma.$AbilityPayload>
/**
 * Model Preference
 * 
 */
export type Preference = $Result.DefaultSelection<Prisma.$PreferencePayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model Leave
 * 
 */
export type Leave = $Result.DefaultSelection<Prisma.$LeavePayload>
/**
 * Model EmployeeNote
 * 
 */
export type EmployeeNote = $Result.DefaultSelection<Prisma.$EmployeeNotePayload>
/**
 * Model EmployeeChemistry
 * 
 */
export type EmployeeChemistry = $Result.DefaultSelection<Prisma.$EmployeeChemistryPayload>
/**
 * Model Notice
 * 
 */
export type Notice = $Result.DefaultSelection<Prisma.$NoticePayload>
/**
 * Model NoticeRead
 * 
 */
export type NoticeRead = $Result.DefaultSelection<Prisma.$NoticeReadPayload>
/**
 * Model ShiftPattern
 * 
 */
export type ShiftPattern = $Result.DefaultSelection<Prisma.$ShiftPatternPayload>
/**
 * Model ScheduleTemplate
 * 
 */
export type ScheduleTemplate = $Result.DefaultSelection<Prisma.$ScheduleTemplatePayload>
/**
 * Model EmployeeConstraints
 * 
 */
export type EmployeeConstraints = $Result.DefaultSelection<Prisma.$EmployeeConstraintsPayload>
/**
 * Model GenerationLog
 * 
 */
export type GenerationLog = $Result.DefaultSelection<Prisma.$GenerationLogPayload>
/**
 * Model EmployeeCertification
 * 
 */
export type EmployeeCertification = $Result.DefaultSelection<Prisma.$EmployeeCertificationPayload>
/**
 * Model OperatingHoursTemplate
 * 
 */
export type OperatingHoursTemplate = $Result.DefaultSelection<Prisma.$OperatingHoursTemplatePayload>
/**
 * Model DailyOperatingHours
 * 
 */
export type DailyOperatingHours = $Result.DefaultSelection<Prisma.$DailyOperatingHoursPayload>
/**
 * Model HourlyStaffingRule
 * 
 */
export type HourlyStaffingRule = $Result.DefaultSelection<Prisma.$HourlyStaffingRulePayload>
/**
 * Model StaffingRule
 * 
 */
export type StaffingRule = $Result.DefaultSelection<Prisma.$StaffingRulePayload>
/**
 * Model ScheduleOverride
 * 
 */
export type ScheduleOverride = $Result.DefaultSelection<Prisma.$ScheduleOverridePayload>
/**
 * Model StaffingAnalytics
 * 
 */
export type StaffingAnalytics = $Result.DefaultSelection<Prisma.$StaffingAnalyticsPayload>
/**
 * Model ScheduleDraft
 * 
 */
export type ScheduleDraft = $Result.DefaultSelection<Prisma.$ScheduleDraftPayload>
/**
 * Model ScheduleDraftItem
 * 
 */
export type ScheduleDraftItem = $Result.DefaultSelection<Prisma.$ScheduleDraftItemPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs>;

  /**
   * `prisma.ability`: Exposes CRUD operations for the **Ability** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Abilities
    * const abilities = await prisma.ability.findMany()
    * ```
    */
  get ability(): Prisma.AbilityDelegate<ExtArgs>;

  /**
   * `prisma.preference`: Exposes CRUD operations for the **Preference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Preferences
    * const preferences = await prisma.preference.findMany()
    * ```
    */
  get preference(): Prisma.PreferenceDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs>;

  /**
   * `prisma.leave`: Exposes CRUD operations for the **Leave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leaves
    * const leaves = await prisma.leave.findMany()
    * ```
    */
  get leave(): Prisma.LeaveDelegate<ExtArgs>;

  /**
   * `prisma.employeeNote`: Exposes CRUD operations for the **EmployeeNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeNotes
    * const employeeNotes = await prisma.employeeNote.findMany()
    * ```
    */
  get employeeNote(): Prisma.EmployeeNoteDelegate<ExtArgs>;

  /**
   * `prisma.employeeChemistry`: Exposes CRUD operations for the **EmployeeChemistry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeChemistries
    * const employeeChemistries = await prisma.employeeChemistry.findMany()
    * ```
    */
  get employeeChemistry(): Prisma.EmployeeChemistryDelegate<ExtArgs>;

  /**
   * `prisma.notice`: Exposes CRUD operations for the **Notice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notices
    * const notices = await prisma.notice.findMany()
    * ```
    */
  get notice(): Prisma.NoticeDelegate<ExtArgs>;

  /**
   * `prisma.noticeRead`: Exposes CRUD operations for the **NoticeRead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NoticeReads
    * const noticeReads = await prisma.noticeRead.findMany()
    * ```
    */
  get noticeRead(): Prisma.NoticeReadDelegate<ExtArgs>;

  /**
   * `prisma.shiftPattern`: Exposes CRUD operations for the **ShiftPattern** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShiftPatterns
    * const shiftPatterns = await prisma.shiftPattern.findMany()
    * ```
    */
  get shiftPattern(): Prisma.ShiftPatternDelegate<ExtArgs>;

  /**
   * `prisma.scheduleTemplate`: Exposes CRUD operations for the **ScheduleTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduleTemplates
    * const scheduleTemplates = await prisma.scheduleTemplate.findMany()
    * ```
    */
  get scheduleTemplate(): Prisma.ScheduleTemplateDelegate<ExtArgs>;

  /**
   * `prisma.employeeConstraints`: Exposes CRUD operations for the **EmployeeConstraints** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeConstraints
    * const employeeConstraints = await prisma.employeeConstraints.findMany()
    * ```
    */
  get employeeConstraints(): Prisma.EmployeeConstraintsDelegate<ExtArgs>;

  /**
   * `prisma.generationLog`: Exposes CRUD operations for the **GenerationLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GenerationLogs
    * const generationLogs = await prisma.generationLog.findMany()
    * ```
    */
  get generationLog(): Prisma.GenerationLogDelegate<ExtArgs>;

  /**
   * `prisma.employeeCertification`: Exposes CRUD operations for the **EmployeeCertification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeCertifications
    * const employeeCertifications = await prisma.employeeCertification.findMany()
    * ```
    */
  get employeeCertification(): Prisma.EmployeeCertificationDelegate<ExtArgs>;

  /**
   * `prisma.operatingHoursTemplate`: Exposes CRUD operations for the **OperatingHoursTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OperatingHoursTemplates
    * const operatingHoursTemplates = await prisma.operatingHoursTemplate.findMany()
    * ```
    */
  get operatingHoursTemplate(): Prisma.OperatingHoursTemplateDelegate<ExtArgs>;

  /**
   * `prisma.dailyOperatingHours`: Exposes CRUD operations for the **DailyOperatingHours** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DailyOperatingHours
    * const dailyOperatingHours = await prisma.dailyOperatingHours.findMany()
    * ```
    */
  get dailyOperatingHours(): Prisma.DailyOperatingHoursDelegate<ExtArgs>;

  /**
   * `prisma.hourlyStaffingRule`: Exposes CRUD operations for the **HourlyStaffingRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HourlyStaffingRules
    * const hourlyStaffingRules = await prisma.hourlyStaffingRule.findMany()
    * ```
    */
  get hourlyStaffingRule(): Prisma.HourlyStaffingRuleDelegate<ExtArgs>;

  /**
   * `prisma.staffingRule`: Exposes CRUD operations for the **StaffingRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffingRules
    * const staffingRules = await prisma.staffingRule.findMany()
    * ```
    */
  get staffingRule(): Prisma.StaffingRuleDelegate<ExtArgs>;

  /**
   * `prisma.scheduleOverride`: Exposes CRUD operations for the **ScheduleOverride** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduleOverrides
    * const scheduleOverrides = await prisma.scheduleOverride.findMany()
    * ```
    */
  get scheduleOverride(): Prisma.ScheduleOverrideDelegate<ExtArgs>;

  /**
   * `prisma.staffingAnalytics`: Exposes CRUD operations for the **StaffingAnalytics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffingAnalytics
    * const staffingAnalytics = await prisma.staffingAnalytics.findMany()
    * ```
    */
  get staffingAnalytics(): Prisma.StaffingAnalyticsDelegate<ExtArgs>;

  /**
   * `prisma.scheduleDraft`: Exposes CRUD operations for the **ScheduleDraft** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduleDrafts
    * const scheduleDrafts = await prisma.scheduleDraft.findMany()
    * ```
    */
  get scheduleDraft(): Prisma.ScheduleDraftDelegate<ExtArgs>;

  /**
   * `prisma.scheduleDraftItem`: Exposes CRUD operations for the **ScheduleDraftItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScheduleDraftItems
    * const scheduleDraftItems = await prisma.scheduleDraftItem.findMany()
    * ```
    */
  get scheduleDraftItem(): Prisma.ScheduleDraftItemDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Company: 'Company',
    Employee: 'Employee',
    Ability: 'Ability',
    Preference: 'Preference',
    Schedule: 'Schedule',
    Leave: 'Leave',
    EmployeeNote: 'EmployeeNote',
    EmployeeChemistry: 'EmployeeChemistry',
    Notice: 'Notice',
    NoticeRead: 'NoticeRead',
    ShiftPattern: 'ShiftPattern',
    ScheduleTemplate: 'ScheduleTemplate',
    EmployeeConstraints: 'EmployeeConstraints',
    GenerationLog: 'GenerationLog',
    EmployeeCertification: 'EmployeeCertification',
    OperatingHoursTemplate: 'OperatingHoursTemplate',
    DailyOperatingHours: 'DailyOperatingHours',
    HourlyStaffingRule: 'HourlyStaffingRule',
    StaffingRule: 'StaffingRule',
    ScheduleOverride: 'ScheduleOverride',
    StaffingAnalytics: 'StaffingAnalytics',
    ScheduleDraft: 'ScheduleDraft',
    ScheduleDraftItem: 'ScheduleDraftItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "company" | "employee" | "ability" | "preference" | "schedule" | "leave" | "employeeNote" | "employeeChemistry" | "notice" | "noticeRead" | "shiftPattern" | "scheduleTemplate" | "employeeConstraints" | "generationLog" | "employeeCertification" | "operatingHoursTemplate" | "dailyOperatingHours" | "hourlyStaffingRule" | "staffingRule" | "scheduleOverride" | "staffingAnalytics" | "scheduleDraft" | "scheduleDraftItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      Ability: {
        payload: Prisma.$AbilityPayload<ExtArgs>
        fields: Prisma.AbilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AbilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AbilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilityPayload>
          }
          findFirst: {
            args: Prisma.AbilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AbilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilityPayload>
          }
          findMany: {
            args: Prisma.AbilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilityPayload>[]
          }
          create: {
            args: Prisma.AbilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilityPayload>
          }
          createMany: {
            args: Prisma.AbilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AbilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilityPayload>
          }
          update: {
            args: Prisma.AbilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilityPayload>
          }
          deleteMany: {
            args: Prisma.AbilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AbilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AbilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AbilityPayload>
          }
          aggregate: {
            args: Prisma.AbilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAbility>
          }
          groupBy: {
            args: Prisma.AbilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<AbilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.AbilityCountArgs<ExtArgs>
            result: $Utils.Optional<AbilityCountAggregateOutputType> | number
          }
        }
      }
      Preference: {
        payload: Prisma.$PreferencePayload<ExtArgs>
        fields: Prisma.PreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          findFirst: {
            args: Prisma.PreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          findMany: {
            args: Prisma.PreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>[]
          }
          create: {
            args: Prisma.PreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          createMany: {
            args: Prisma.PreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          update: {
            args: Prisma.PreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          deleteMany: {
            args: Prisma.PreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencePayload>
          }
          aggregate: {
            args: Prisma.PreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreference>
          }
          groupBy: {
            args: Prisma.PreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<PreferenceCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      Leave: {
        payload: Prisma.$LeavePayload<ExtArgs>
        fields: Prisma.LeaveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          findFirst: {
            args: Prisma.LeaveFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          findMany: {
            args: Prisma.LeaveFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>[]
          }
          create: {
            args: Prisma.LeaveCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          createMany: {
            args: Prisma.LeaveCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LeaveDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          update: {
            args: Prisma.LeaveUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          deleteMany: {
            args: Prisma.LeaveDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeaveUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          aggregate: {
            args: Prisma.LeaveAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeave>
          }
          groupBy: {
            args: Prisma.LeaveGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveCountAggregateOutputType> | number
          }
        }
      }
      EmployeeNote: {
        payload: Prisma.$EmployeeNotePayload<ExtArgs>
        fields: Prisma.EmployeeNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeNotePayload>
          }
          findFirst: {
            args: Prisma.EmployeeNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeNotePayload>
          }
          findMany: {
            args: Prisma.EmployeeNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeNotePayload>[]
          }
          create: {
            args: Prisma.EmployeeNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeNotePayload>
          }
          createMany: {
            args: Prisma.EmployeeNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeeNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeNotePayload>
          }
          update: {
            args: Prisma.EmployeeNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeNotePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeNotePayload>
          }
          aggregate: {
            args: Prisma.EmployeeNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeNote>
          }
          groupBy: {
            args: Prisma.EmployeeNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeNoteCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeNoteCountAggregateOutputType> | number
          }
        }
      }
      EmployeeChemistry: {
        payload: Prisma.$EmployeeChemistryPayload<ExtArgs>
        fields: Prisma.EmployeeChemistryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeChemistryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeChemistryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeChemistryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeChemistryPayload>
          }
          findFirst: {
            args: Prisma.EmployeeChemistryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeChemistryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeChemistryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeChemistryPayload>
          }
          findMany: {
            args: Prisma.EmployeeChemistryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeChemistryPayload>[]
          }
          create: {
            args: Prisma.EmployeeChemistryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeChemistryPayload>
          }
          createMany: {
            args: Prisma.EmployeeChemistryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeeChemistryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeChemistryPayload>
          }
          update: {
            args: Prisma.EmployeeChemistryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeChemistryPayload>
          }
          deleteMany: {
            args: Prisma.EmployeeChemistryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeChemistryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeChemistryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeChemistryPayload>
          }
          aggregate: {
            args: Prisma.EmployeeChemistryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeChemistry>
          }
          groupBy: {
            args: Prisma.EmployeeChemistryGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeChemistryGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeChemistryCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeChemistryCountAggregateOutputType> | number
          }
        }
      }
      Notice: {
        payload: Prisma.$NoticePayload<ExtArgs>
        fields: Prisma.NoticeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoticeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoticeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          findFirst: {
            args: Prisma.NoticeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoticeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          findMany: {
            args: Prisma.NoticeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>[]
          }
          create: {
            args: Prisma.NoticeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          createMany: {
            args: Prisma.NoticeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NoticeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          update: {
            args: Prisma.NoticeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          deleteMany: {
            args: Prisma.NoticeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoticeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NoticeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticePayload>
          }
          aggregate: {
            args: Prisma.NoticeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotice>
          }
          groupBy: {
            args: Prisma.NoticeGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoticeGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoticeCountArgs<ExtArgs>
            result: $Utils.Optional<NoticeCountAggregateOutputType> | number
          }
        }
      }
      NoticeRead: {
        payload: Prisma.$NoticeReadPayload<ExtArgs>
        fields: Prisma.NoticeReadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoticeReadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeReadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoticeReadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeReadPayload>
          }
          findFirst: {
            args: Prisma.NoticeReadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeReadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoticeReadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeReadPayload>
          }
          findMany: {
            args: Prisma.NoticeReadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeReadPayload>[]
          }
          create: {
            args: Prisma.NoticeReadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeReadPayload>
          }
          createMany: {
            args: Prisma.NoticeReadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NoticeReadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeReadPayload>
          }
          update: {
            args: Prisma.NoticeReadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeReadPayload>
          }
          deleteMany: {
            args: Prisma.NoticeReadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoticeReadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NoticeReadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeReadPayload>
          }
          aggregate: {
            args: Prisma.NoticeReadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNoticeRead>
          }
          groupBy: {
            args: Prisma.NoticeReadGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoticeReadGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoticeReadCountArgs<ExtArgs>
            result: $Utils.Optional<NoticeReadCountAggregateOutputType> | number
          }
        }
      }
      ShiftPattern: {
        payload: Prisma.$ShiftPatternPayload<ExtArgs>
        fields: Prisma.ShiftPatternFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShiftPatternFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPatternPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShiftPatternFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPatternPayload>
          }
          findFirst: {
            args: Prisma.ShiftPatternFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPatternPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShiftPatternFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPatternPayload>
          }
          findMany: {
            args: Prisma.ShiftPatternFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPatternPayload>[]
          }
          create: {
            args: Prisma.ShiftPatternCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPatternPayload>
          }
          createMany: {
            args: Prisma.ShiftPatternCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ShiftPatternDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPatternPayload>
          }
          update: {
            args: Prisma.ShiftPatternUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPatternPayload>
          }
          deleteMany: {
            args: Prisma.ShiftPatternDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShiftPatternUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShiftPatternUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShiftPatternPayload>
          }
          aggregate: {
            args: Prisma.ShiftPatternAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShiftPattern>
          }
          groupBy: {
            args: Prisma.ShiftPatternGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShiftPatternGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShiftPatternCountArgs<ExtArgs>
            result: $Utils.Optional<ShiftPatternCountAggregateOutputType> | number
          }
        }
      }
      ScheduleTemplate: {
        payload: Prisma.$ScheduleTemplatePayload<ExtArgs>
        fields: Prisma.ScheduleTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleTemplatePayload>
          }
          findFirst: {
            args: Prisma.ScheduleTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleTemplatePayload>
          }
          findMany: {
            args: Prisma.ScheduleTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleTemplatePayload>[]
          }
          create: {
            args: Prisma.ScheduleTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleTemplatePayload>
          }
          createMany: {
            args: Prisma.ScheduleTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ScheduleTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleTemplatePayload>
          }
          update: {
            args: Prisma.ScheduleTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleTemplatePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleTemplatePayload>
          }
          aggregate: {
            args: Prisma.ScheduleTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduleTemplate>
          }
          groupBy: {
            args: Prisma.ScheduleTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleTemplateCountAggregateOutputType> | number
          }
        }
      }
      EmployeeConstraints: {
        payload: Prisma.$EmployeeConstraintsPayload<ExtArgs>
        fields: Prisma.EmployeeConstraintsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeConstraintsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeConstraintsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeConstraintsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeConstraintsPayload>
          }
          findFirst: {
            args: Prisma.EmployeeConstraintsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeConstraintsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeConstraintsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeConstraintsPayload>
          }
          findMany: {
            args: Prisma.EmployeeConstraintsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeConstraintsPayload>[]
          }
          create: {
            args: Prisma.EmployeeConstraintsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeConstraintsPayload>
          }
          createMany: {
            args: Prisma.EmployeeConstraintsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeeConstraintsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeConstraintsPayload>
          }
          update: {
            args: Prisma.EmployeeConstraintsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeConstraintsPayload>
          }
          deleteMany: {
            args: Prisma.EmployeeConstraintsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeConstraintsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeConstraintsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeConstraintsPayload>
          }
          aggregate: {
            args: Prisma.EmployeeConstraintsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeConstraints>
          }
          groupBy: {
            args: Prisma.EmployeeConstraintsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeConstraintsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeConstraintsCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeConstraintsCountAggregateOutputType> | number
          }
        }
      }
      GenerationLog: {
        payload: Prisma.$GenerationLogPayload<ExtArgs>
        fields: Prisma.GenerationLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GenerationLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GenerationLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationLogPayload>
          }
          findFirst: {
            args: Prisma.GenerationLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GenerationLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationLogPayload>
          }
          findMany: {
            args: Prisma.GenerationLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationLogPayload>[]
          }
          create: {
            args: Prisma.GenerationLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationLogPayload>
          }
          createMany: {
            args: Prisma.GenerationLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GenerationLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationLogPayload>
          }
          update: {
            args: Prisma.GenerationLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationLogPayload>
          }
          deleteMany: {
            args: Prisma.GenerationLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GenerationLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GenerationLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenerationLogPayload>
          }
          aggregate: {
            args: Prisma.GenerationLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGenerationLog>
          }
          groupBy: {
            args: Prisma.GenerationLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<GenerationLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.GenerationLogCountArgs<ExtArgs>
            result: $Utils.Optional<GenerationLogCountAggregateOutputType> | number
          }
        }
      }
      EmployeeCertification: {
        payload: Prisma.$EmployeeCertificationPayload<ExtArgs>
        fields: Prisma.EmployeeCertificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeCertificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeCertificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeCertificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeCertificationPayload>
          }
          findFirst: {
            args: Prisma.EmployeeCertificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeCertificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeCertificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeCertificationPayload>
          }
          findMany: {
            args: Prisma.EmployeeCertificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeCertificationPayload>[]
          }
          create: {
            args: Prisma.EmployeeCertificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeCertificationPayload>
          }
          createMany: {
            args: Prisma.EmployeeCertificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployeeCertificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeCertificationPayload>
          }
          update: {
            args: Prisma.EmployeeCertificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeCertificationPayload>
          }
          deleteMany: {
            args: Prisma.EmployeeCertificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeCertificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeCertificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeCertificationPayload>
          }
          aggregate: {
            args: Prisma.EmployeeCertificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeCertification>
          }
          groupBy: {
            args: Prisma.EmployeeCertificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCertificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCertificationCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCertificationCountAggregateOutputType> | number
          }
        }
      }
      OperatingHoursTemplate: {
        payload: Prisma.$OperatingHoursTemplatePayload<ExtArgs>
        fields: Prisma.OperatingHoursTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OperatingHoursTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatingHoursTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OperatingHoursTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatingHoursTemplatePayload>
          }
          findFirst: {
            args: Prisma.OperatingHoursTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatingHoursTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OperatingHoursTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatingHoursTemplatePayload>
          }
          findMany: {
            args: Prisma.OperatingHoursTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatingHoursTemplatePayload>[]
          }
          create: {
            args: Prisma.OperatingHoursTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatingHoursTemplatePayload>
          }
          createMany: {
            args: Prisma.OperatingHoursTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OperatingHoursTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatingHoursTemplatePayload>
          }
          update: {
            args: Prisma.OperatingHoursTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatingHoursTemplatePayload>
          }
          deleteMany: {
            args: Prisma.OperatingHoursTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OperatingHoursTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OperatingHoursTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OperatingHoursTemplatePayload>
          }
          aggregate: {
            args: Prisma.OperatingHoursTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOperatingHoursTemplate>
          }
          groupBy: {
            args: Prisma.OperatingHoursTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<OperatingHoursTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.OperatingHoursTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<OperatingHoursTemplateCountAggregateOutputType> | number
          }
        }
      }
      DailyOperatingHours: {
        payload: Prisma.$DailyOperatingHoursPayload<ExtArgs>
        fields: Prisma.DailyOperatingHoursFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DailyOperatingHoursFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyOperatingHoursPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DailyOperatingHoursFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyOperatingHoursPayload>
          }
          findFirst: {
            args: Prisma.DailyOperatingHoursFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyOperatingHoursPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DailyOperatingHoursFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyOperatingHoursPayload>
          }
          findMany: {
            args: Prisma.DailyOperatingHoursFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyOperatingHoursPayload>[]
          }
          create: {
            args: Prisma.DailyOperatingHoursCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyOperatingHoursPayload>
          }
          createMany: {
            args: Prisma.DailyOperatingHoursCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DailyOperatingHoursDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyOperatingHoursPayload>
          }
          update: {
            args: Prisma.DailyOperatingHoursUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyOperatingHoursPayload>
          }
          deleteMany: {
            args: Prisma.DailyOperatingHoursDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DailyOperatingHoursUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DailyOperatingHoursUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DailyOperatingHoursPayload>
          }
          aggregate: {
            args: Prisma.DailyOperatingHoursAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDailyOperatingHours>
          }
          groupBy: {
            args: Prisma.DailyOperatingHoursGroupByArgs<ExtArgs>
            result: $Utils.Optional<DailyOperatingHoursGroupByOutputType>[]
          }
          count: {
            args: Prisma.DailyOperatingHoursCountArgs<ExtArgs>
            result: $Utils.Optional<DailyOperatingHoursCountAggregateOutputType> | number
          }
        }
      }
      HourlyStaffingRule: {
        payload: Prisma.$HourlyStaffingRulePayload<ExtArgs>
        fields: Prisma.HourlyStaffingRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HourlyStaffingRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HourlyStaffingRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HourlyStaffingRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HourlyStaffingRulePayload>
          }
          findFirst: {
            args: Prisma.HourlyStaffingRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HourlyStaffingRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HourlyStaffingRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HourlyStaffingRulePayload>
          }
          findMany: {
            args: Prisma.HourlyStaffingRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HourlyStaffingRulePayload>[]
          }
          create: {
            args: Prisma.HourlyStaffingRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HourlyStaffingRulePayload>
          }
          createMany: {
            args: Prisma.HourlyStaffingRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HourlyStaffingRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HourlyStaffingRulePayload>
          }
          update: {
            args: Prisma.HourlyStaffingRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HourlyStaffingRulePayload>
          }
          deleteMany: {
            args: Prisma.HourlyStaffingRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HourlyStaffingRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HourlyStaffingRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HourlyStaffingRulePayload>
          }
          aggregate: {
            args: Prisma.HourlyStaffingRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHourlyStaffingRule>
          }
          groupBy: {
            args: Prisma.HourlyStaffingRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<HourlyStaffingRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.HourlyStaffingRuleCountArgs<ExtArgs>
            result: $Utils.Optional<HourlyStaffingRuleCountAggregateOutputType> | number
          }
        }
      }
      StaffingRule: {
        payload: Prisma.$StaffingRulePayload<ExtArgs>
        fields: Prisma.StaffingRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffingRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffingRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingRulePayload>
          }
          findFirst: {
            args: Prisma.StaffingRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffingRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingRulePayload>
          }
          findMany: {
            args: Prisma.StaffingRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingRulePayload>[]
          }
          create: {
            args: Prisma.StaffingRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingRulePayload>
          }
          createMany: {
            args: Prisma.StaffingRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StaffingRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingRulePayload>
          }
          update: {
            args: Prisma.StaffingRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingRulePayload>
          }
          deleteMany: {
            args: Prisma.StaffingRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffingRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffingRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingRulePayload>
          }
          aggregate: {
            args: Prisma.StaffingRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffingRule>
          }
          groupBy: {
            args: Prisma.StaffingRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffingRuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffingRuleCountArgs<ExtArgs>
            result: $Utils.Optional<StaffingRuleCountAggregateOutputType> | number
          }
        }
      }
      ScheduleOverride: {
        payload: Prisma.$ScheduleOverridePayload<ExtArgs>
        fields: Prisma.ScheduleOverrideFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleOverrideFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleOverridePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleOverrideFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleOverridePayload>
          }
          findFirst: {
            args: Prisma.ScheduleOverrideFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleOverridePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleOverrideFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleOverridePayload>
          }
          findMany: {
            args: Prisma.ScheduleOverrideFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleOverridePayload>[]
          }
          create: {
            args: Prisma.ScheduleOverrideCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleOverridePayload>
          }
          createMany: {
            args: Prisma.ScheduleOverrideCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ScheduleOverrideDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleOverridePayload>
          }
          update: {
            args: Prisma.ScheduleOverrideUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleOverridePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleOverrideDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleOverrideUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleOverrideUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleOverridePayload>
          }
          aggregate: {
            args: Prisma.ScheduleOverrideAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduleOverride>
          }
          groupBy: {
            args: Prisma.ScheduleOverrideGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleOverrideGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleOverrideCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleOverrideCountAggregateOutputType> | number
          }
        }
      }
      StaffingAnalytics: {
        payload: Prisma.$StaffingAnalyticsPayload<ExtArgs>
        fields: Prisma.StaffingAnalyticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffingAnalyticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingAnalyticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffingAnalyticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingAnalyticsPayload>
          }
          findFirst: {
            args: Prisma.StaffingAnalyticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingAnalyticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffingAnalyticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingAnalyticsPayload>
          }
          findMany: {
            args: Prisma.StaffingAnalyticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingAnalyticsPayload>[]
          }
          create: {
            args: Prisma.StaffingAnalyticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingAnalyticsPayload>
          }
          createMany: {
            args: Prisma.StaffingAnalyticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StaffingAnalyticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingAnalyticsPayload>
          }
          update: {
            args: Prisma.StaffingAnalyticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingAnalyticsPayload>
          }
          deleteMany: {
            args: Prisma.StaffingAnalyticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffingAnalyticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffingAnalyticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffingAnalyticsPayload>
          }
          aggregate: {
            args: Prisma.StaffingAnalyticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffingAnalytics>
          }
          groupBy: {
            args: Prisma.StaffingAnalyticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffingAnalyticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffingAnalyticsCountArgs<ExtArgs>
            result: $Utils.Optional<StaffingAnalyticsCountAggregateOutputType> | number
          }
        }
      }
      ScheduleDraft: {
        payload: Prisma.$ScheduleDraftPayload<ExtArgs>
        fields: Prisma.ScheduleDraftFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleDraftFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleDraftFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftPayload>
          }
          findFirst: {
            args: Prisma.ScheduleDraftFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleDraftFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftPayload>
          }
          findMany: {
            args: Prisma.ScheduleDraftFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftPayload>[]
          }
          create: {
            args: Prisma.ScheduleDraftCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftPayload>
          }
          createMany: {
            args: Prisma.ScheduleDraftCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ScheduleDraftDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftPayload>
          }
          update: {
            args: Prisma.ScheduleDraftUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftPayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDraftDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleDraftUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleDraftUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftPayload>
          }
          aggregate: {
            args: Prisma.ScheduleDraftAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduleDraft>
          }
          groupBy: {
            args: Prisma.ScheduleDraftGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleDraftGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleDraftCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleDraftCountAggregateOutputType> | number
          }
        }
      }
      ScheduleDraftItem: {
        payload: Prisma.$ScheduleDraftItemPayload<ExtArgs>
        fields: Prisma.ScheduleDraftItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleDraftItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleDraftItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftItemPayload>
          }
          findFirst: {
            args: Prisma.ScheduleDraftItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleDraftItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftItemPayload>
          }
          findMany: {
            args: Prisma.ScheduleDraftItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftItemPayload>[]
          }
          create: {
            args: Prisma.ScheduleDraftItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftItemPayload>
          }
          createMany: {
            args: Prisma.ScheduleDraftItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ScheduleDraftItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftItemPayload>
          }
          update: {
            args: Prisma.ScheduleDraftItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftItemPayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDraftItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleDraftItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleDraftItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScheduleDraftItemPayload>
          }
          aggregate: {
            args: Prisma.ScheduleDraftItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduleDraftItem>
          }
          groupBy: {
            args: Prisma.ScheduleDraftItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleDraftItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleDraftItemCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleDraftItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    reviewedLeaves: number
    readNotices: number
    createdNotices: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviewedLeaves?: boolean | UserCountOutputTypeCountReviewedLeavesArgs
    readNotices?: boolean | UserCountOutputTypeCountReadNoticesArgs
    createdNotices?: boolean | UserCountOutputTypeCountCreatedNoticesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewedLeavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReadNoticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticeReadWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedNoticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticeWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    shiftPatterns: number
    operatingHoursTemplates: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shiftPatterns?: boolean | CompanyCountOutputTypeCountShiftPatternsArgs
    operatingHoursTemplates?: boolean | CompanyCountOutputTypeCountOperatingHoursTemplatesArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountShiftPatternsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftPatternWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountOperatingHoursTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatingHoursTemplateWhereInput
  }


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    certifications: number
    chemistry1: number
    chemistry2: number
    notes: number
    leaves: number
    schedules: number
    draftSchedules: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    certifications?: boolean | EmployeeCountOutputTypeCountCertificationsArgs
    chemistry1?: boolean | EmployeeCountOutputTypeCountChemistry1Args
    chemistry2?: boolean | EmployeeCountOutputTypeCountChemistry2Args
    notes?: boolean | EmployeeCountOutputTypeCountNotesArgs
    leaves?: boolean | EmployeeCountOutputTypeCountLeavesArgs
    schedules?: boolean | EmployeeCountOutputTypeCountSchedulesArgs
    draftSchedules?: boolean | EmployeeCountOutputTypeCountDraftSchedulesArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCertificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeCertificationWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountChemistry1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeChemistryWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountChemistry2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeChemistryWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeNoteWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountLeavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDraftSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleDraftItemWhereInput
  }


  /**
   * Count Type NoticeCountOutputType
   */

  export type NoticeCountOutputType = {
    readByUsers: number
  }

  export type NoticeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    readByUsers?: boolean | NoticeCountOutputTypeCountReadByUsersArgs
  }

  // Custom InputTypes
  /**
   * NoticeCountOutputType without action
   */
  export type NoticeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeCountOutputType
     */
    select?: NoticeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NoticeCountOutputType without action
   */
  export type NoticeCountOutputTypeCountReadByUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticeReadWhereInput
  }


  /**
   * Count Type ShiftPatternCountOutputType
   */

  export type ShiftPatternCountOutputType = {
    schedules: number
    schedule_templates: number
    draftItems: number
  }

  export type ShiftPatternCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | ShiftPatternCountOutputTypeCountSchedulesArgs
    schedule_templates?: boolean | ShiftPatternCountOutputTypeCountSchedule_templatesArgs
    draftItems?: boolean | ShiftPatternCountOutputTypeCountDraftItemsArgs
  }

  // Custom InputTypes
  /**
   * ShiftPatternCountOutputType without action
   */
  export type ShiftPatternCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPatternCountOutputType
     */
    select?: ShiftPatternCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShiftPatternCountOutputType without action
   */
  export type ShiftPatternCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * ShiftPatternCountOutputType without action
   */
  export type ShiftPatternCountOutputTypeCountSchedule_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleTemplateWhereInput
  }

  /**
   * ShiftPatternCountOutputType without action
   */
  export type ShiftPatternCountOutputTypeCountDraftItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleDraftItemWhereInput
  }


  /**
   * Count Type ScheduleTemplateCountOutputType
   */

  export type ScheduleTemplateCountOutputType = {
    generationLogs: number
    shift_patterns: number
    drafts: number
  }

  export type ScheduleTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    generationLogs?: boolean | ScheduleTemplateCountOutputTypeCountGenerationLogsArgs
    shift_patterns?: boolean | ScheduleTemplateCountOutputTypeCountShift_patternsArgs
    drafts?: boolean | ScheduleTemplateCountOutputTypeCountDraftsArgs
  }

  // Custom InputTypes
  /**
   * ScheduleTemplateCountOutputType without action
   */
  export type ScheduleTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplateCountOutputType
     */
    select?: ScheduleTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScheduleTemplateCountOutputType without action
   */
  export type ScheduleTemplateCountOutputTypeCountGenerationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenerationLogWhereInput
  }

  /**
   * ScheduleTemplateCountOutputType without action
   */
  export type ScheduleTemplateCountOutputTypeCountShift_patternsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftPatternWhereInput
  }

  /**
   * ScheduleTemplateCountOutputType without action
   */
  export type ScheduleTemplateCountOutputTypeCountDraftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleDraftWhereInput
  }


  /**
   * Count Type GenerationLogCountOutputType
   */

  export type GenerationLogCountOutputType = {
    schedules: number
  }

  export type GenerationLogCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | GenerationLogCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * GenerationLogCountOutputType without action
   */
  export type GenerationLogCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLogCountOutputType
     */
    select?: GenerationLogCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GenerationLogCountOutputType without action
   */
  export type GenerationLogCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }


  /**
   * Count Type OperatingHoursTemplateCountOutputType
   */

  export type OperatingHoursTemplateCountOutputType = {
    dailyHours: number
    staffingRules: number
    scheduleOverrides: number
  }

  export type OperatingHoursTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dailyHours?: boolean | OperatingHoursTemplateCountOutputTypeCountDailyHoursArgs
    staffingRules?: boolean | OperatingHoursTemplateCountOutputTypeCountStaffingRulesArgs
    scheduleOverrides?: boolean | OperatingHoursTemplateCountOutputTypeCountScheduleOverridesArgs
  }

  // Custom InputTypes
  /**
   * OperatingHoursTemplateCountOutputType without action
   */
  export type OperatingHoursTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplateCountOutputType
     */
    select?: OperatingHoursTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OperatingHoursTemplateCountOutputType without action
   */
  export type OperatingHoursTemplateCountOutputTypeCountDailyHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyOperatingHoursWhereInput
  }

  /**
   * OperatingHoursTemplateCountOutputType without action
   */
  export type OperatingHoursTemplateCountOutputTypeCountStaffingRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffingRuleWhereInput
  }

  /**
   * OperatingHoursTemplateCountOutputType without action
   */
  export type OperatingHoursTemplateCountOutputTypeCountScheduleOverridesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleOverrideWhereInput
  }


  /**
   * Count Type DailyOperatingHoursCountOutputType
   */

  export type DailyOperatingHoursCountOutputType = {
    timeSlots: number
  }

  export type DailyOperatingHoursCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    timeSlots?: boolean | DailyOperatingHoursCountOutputTypeCountTimeSlotsArgs
  }

  // Custom InputTypes
  /**
   * DailyOperatingHoursCountOutputType without action
   */
  export type DailyOperatingHoursCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHoursCountOutputType
     */
    select?: DailyOperatingHoursCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DailyOperatingHoursCountOutputType without action
   */
  export type DailyOperatingHoursCountOutputTypeCountTimeSlotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HourlyStaffingRuleWhereInput
  }


  /**
   * Count Type ScheduleDraftCountOutputType
   */

  export type ScheduleDraftCountOutputType = {
    items: number
    versionDrafts: number
  }

  export type ScheduleDraftCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ScheduleDraftCountOutputTypeCountItemsArgs
    versionDrafts?: boolean | ScheduleDraftCountOutputTypeCountVersionDraftsArgs
  }

  // Custom InputTypes
  /**
   * ScheduleDraftCountOutputType without action
   */
  export type ScheduleDraftCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftCountOutputType
     */
    select?: ScheduleDraftCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScheduleDraftCountOutputType without action
   */
  export type ScheduleDraftCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleDraftItemWhereInput
  }

  /**
   * ScheduleDraftCountOutputType without action
   */
  export type ScheduleDraftCountOutputTypeCountVersionDraftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleDraftWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    password: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | User$companyArgs<ExtArgs>
    employee?: boolean | User$employeeArgs<ExtArgs>
    reviewedLeaves?: boolean | User$reviewedLeavesArgs<ExtArgs>
    readNotices?: boolean | User$readNoticesArgs<ExtArgs>
    createdNotices?: boolean | User$createdNoticesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | User$companyArgs<ExtArgs>
    employee?: boolean | User$employeeArgs<ExtArgs>
    reviewedLeaves?: boolean | User$reviewedLeavesArgs<ExtArgs>
    readNotices?: boolean | User$readNoticesArgs<ExtArgs>
    createdNotices?: boolean | User$createdNoticesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs> | null
      employee: Prisma.$EmployeePayload<ExtArgs> | null
      reviewedLeaves: Prisma.$LeavePayload<ExtArgs>[]
      readNotices: Prisma.$NoticeReadPayload<ExtArgs>[]
      createdNotices: Prisma.$NoticePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string
      password: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends User$companyArgs<ExtArgs> = {}>(args?: Subset<T, User$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    employee<T extends User$employeeArgs<ExtArgs> = {}>(args?: Subset<T, User$employeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    reviewedLeaves<T extends User$reviewedLeavesArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewedLeavesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findMany"> | Null>
    readNotices<T extends User$readNoticesArgs<ExtArgs> = {}>(args?: Subset<T, User$readNoticesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "findMany"> | Null>
    createdNotices<T extends User$createdNoticesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdNoticesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.company
   */
  export type User$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * User.employee
   */
  export type User$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * User.reviewedLeaves
   */
  export type User$reviewedLeavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    where?: LeaveWhereInput
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    cursor?: LeaveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }

  /**
   * User.readNotices
   */
  export type User$readNoticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    where?: NoticeReadWhereInput
    orderBy?: NoticeReadOrderByWithRelationInput | NoticeReadOrderByWithRelationInput[]
    cursor?: NoticeReadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoticeReadScalarFieldEnum | NoticeReadScalarFieldEnum[]
  }

  /**
   * User.createdNotices
   */
  export type User$createdNoticesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    where?: NoticeWhereInput
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    cursor?: NoticeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoticeScalarFieldEnum | NoticeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    minStaffRequired: number | null
    maxAdvanceScheduleDays: number | null
    minimumStaffCoverage: number | null
    scheduleNotificationDays: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
    userId: number | null
    minStaffRequired: number | null
    maxAdvanceScheduleDays: number | null
    minimumStaffCoverage: number | null
    scheduleNotificationDays: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    userId: number | null
    companyName: string | null
    industry: string | null
    companySize: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    defaultEndTime: string | null
    defaultStartTime: string | null
    minStaffRequired: number | null
    showLeaveInSchedule: boolean | null
    updatedAt: Date | null
    workType: string | null
    allowEmployeeSelfScheduling: boolean | null
    autoSchedulingEnabled: boolean | null
    maxAdvanceScheduleDays: number | null
    minimumStaffCoverage: number | null
    scheduleNotificationDays: number | null
    timezone: string | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    companyName: string | null
    industry: string | null
    companySize: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    defaultEndTime: string | null
    defaultStartTime: string | null
    minStaffRequired: number | null
    showLeaveInSchedule: boolean | null
    updatedAt: Date | null
    workType: string | null
    allowEmployeeSelfScheduling: boolean | null
    autoSchedulingEnabled: boolean | null
    maxAdvanceScheduleDays: number | null
    minimumStaffCoverage: number | null
    scheduleNotificationDays: number | null
    timezone: string | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    userId: number
    companyName: number
    industry: number
    companySize: number
    address: number
    phone: number
    createdAt: number
    defaultEndTime: number
    defaultStartTime: number
    minStaffRequired: number
    showLeaveInSchedule: number
    updatedAt: number
    workDays: number
    workType: number
    allowEmployeeSelfScheduling: number
    autoSchedulingEnabled: number
    complianceRequirements: number
    holidaySchedule: number
    maxAdvanceScheduleDays: number
    minimumStaffCoverage: number
    operatingHours: number
    overtimePolicy: number
    peakHours: number
    scheduleNotificationDays: number
    timezone: number
    unionRules: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
    userId?: true
    minStaffRequired?: true
    maxAdvanceScheduleDays?: true
    minimumStaffCoverage?: true
    scheduleNotificationDays?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
    userId?: true
    minStaffRequired?: true
    maxAdvanceScheduleDays?: true
    minimumStaffCoverage?: true
    scheduleNotificationDays?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    industry?: true
    companySize?: true
    address?: true
    phone?: true
    createdAt?: true
    defaultEndTime?: true
    defaultStartTime?: true
    minStaffRequired?: true
    showLeaveInSchedule?: true
    updatedAt?: true
    workType?: true
    allowEmployeeSelfScheduling?: true
    autoSchedulingEnabled?: true
    maxAdvanceScheduleDays?: true
    minimumStaffCoverage?: true
    scheduleNotificationDays?: true
    timezone?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    industry?: true
    companySize?: true
    address?: true
    phone?: true
    createdAt?: true
    defaultEndTime?: true
    defaultStartTime?: true
    minStaffRequired?: true
    showLeaveInSchedule?: true
    updatedAt?: true
    workType?: true
    allowEmployeeSelfScheduling?: true
    autoSchedulingEnabled?: true
    maxAdvanceScheduleDays?: true
    minimumStaffCoverage?: true
    scheduleNotificationDays?: true
    timezone?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    userId?: true
    companyName?: true
    industry?: true
    companySize?: true
    address?: true
    phone?: true
    createdAt?: true
    defaultEndTime?: true
    defaultStartTime?: true
    minStaffRequired?: true
    showLeaveInSchedule?: true
    updatedAt?: true
    workDays?: true
    workType?: true
    allowEmployeeSelfScheduling?: true
    autoSchedulingEnabled?: true
    complianceRequirements?: true
    holidaySchedule?: true
    maxAdvanceScheduleDays?: true
    minimumStaffCoverage?: true
    operatingHours?: true
    overtimePolicy?: true
    peakHours?: true
    scheduleNotificationDays?: true
    timezone?: true
    unionRules?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: number
    userId: number
    companyName: string
    industry: string
    companySize: string
    address: string | null
    phone: string | null
    createdAt: Date
    defaultEndTime: string | null
    defaultStartTime: string | null
    minStaffRequired: number | null
    showLeaveInSchedule: boolean
    updatedAt: Date
    workDays: JsonValue | null
    workType: string
    allowEmployeeSelfScheduling: boolean
    autoSchedulingEnabled: boolean
    complianceRequirements: JsonValue | null
    holidaySchedule: JsonValue | null
    maxAdvanceScheduleDays: number
    minimumStaffCoverage: number
    operatingHours: JsonValue | null
    overtimePolicy: JsonValue | null
    peakHours: JsonValue | null
    scheduleNotificationDays: number
    timezone: string
    unionRules: JsonValue | null
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    companyName?: boolean
    industry?: boolean
    companySize?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    defaultEndTime?: boolean
    defaultStartTime?: boolean
    minStaffRequired?: boolean
    showLeaveInSchedule?: boolean
    updatedAt?: boolean
    workDays?: boolean
    workType?: boolean
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: boolean
    holidaySchedule?: boolean
    maxAdvanceScheduleDays?: boolean
    minimumStaffCoverage?: boolean
    operatingHours?: boolean
    overtimePolicy?: boolean
    peakHours?: boolean
    scheduleNotificationDays?: boolean
    timezone?: boolean
    unionRules?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    shiftPatterns?: boolean | Company$shiftPatternsArgs<ExtArgs>
    operatingHoursTemplates?: boolean | Company$operatingHoursTemplatesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>


  export type CompanySelectScalar = {
    id?: boolean
    userId?: boolean
    companyName?: boolean
    industry?: boolean
    companySize?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    defaultEndTime?: boolean
    defaultStartTime?: boolean
    minStaffRequired?: boolean
    showLeaveInSchedule?: boolean
    updatedAt?: boolean
    workDays?: boolean
    workType?: boolean
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: boolean
    holidaySchedule?: boolean
    maxAdvanceScheduleDays?: boolean
    minimumStaffCoverage?: boolean
    operatingHours?: boolean
    overtimePolicy?: boolean
    peakHours?: boolean
    scheduleNotificationDays?: boolean
    timezone?: boolean
    unionRules?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    shiftPatterns?: boolean | Company$shiftPatternsArgs<ExtArgs>
    operatingHoursTemplates?: boolean | Company$operatingHoursTemplatesArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      shiftPatterns: Prisma.$ShiftPatternPayload<ExtArgs>[]
      operatingHoursTemplates: Prisma.$OperatingHoursTemplatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      companyName: string
      industry: string
      companySize: string
      address: string | null
      phone: string | null
      createdAt: Date
      defaultEndTime: string | null
      defaultStartTime: string | null
      minStaffRequired: number | null
      showLeaveInSchedule: boolean
      updatedAt: Date
      workDays: Prisma.JsonValue | null
      workType: string
      allowEmployeeSelfScheduling: boolean
      autoSchedulingEnabled: boolean
      complianceRequirements: Prisma.JsonValue | null
      holidaySchedule: Prisma.JsonValue | null
      maxAdvanceScheduleDays: number
      minimumStaffCoverage: number
      operatingHours: Prisma.JsonValue | null
      overtimePolicy: Prisma.JsonValue | null
      peakHours: Prisma.JsonValue | null
      scheduleNotificationDays: number
      timezone: string
      unionRules: Prisma.JsonValue | null
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    shiftPatterns<T extends Company$shiftPatternsArgs<ExtArgs> = {}>(args?: Subset<T, Company$shiftPatternsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "findMany"> | Null>
    operatingHoursTemplates<T extends Company$operatingHoursTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Company$operatingHoursTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'Int'>
    readonly userId: FieldRef<"Company", 'Int'>
    readonly companyName: FieldRef<"Company", 'String'>
    readonly industry: FieldRef<"Company", 'String'>
    readonly companySize: FieldRef<"Company", 'String'>
    readonly address: FieldRef<"Company", 'String'>
    readonly phone: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly defaultEndTime: FieldRef<"Company", 'String'>
    readonly defaultStartTime: FieldRef<"Company", 'String'>
    readonly minStaffRequired: FieldRef<"Company", 'Int'>
    readonly showLeaveInSchedule: FieldRef<"Company", 'Boolean'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
    readonly workDays: FieldRef<"Company", 'Json'>
    readonly workType: FieldRef<"Company", 'String'>
    readonly allowEmployeeSelfScheduling: FieldRef<"Company", 'Boolean'>
    readonly autoSchedulingEnabled: FieldRef<"Company", 'Boolean'>
    readonly complianceRequirements: FieldRef<"Company", 'Json'>
    readonly holidaySchedule: FieldRef<"Company", 'Json'>
    readonly maxAdvanceScheduleDays: FieldRef<"Company", 'Int'>
    readonly minimumStaffCoverage: FieldRef<"Company", 'Float'>
    readonly operatingHours: FieldRef<"Company", 'Json'>
    readonly overtimePolicy: FieldRef<"Company", 'Json'>
    readonly peakHours: FieldRef<"Company", 'Json'>
    readonly scheduleNotificationDays: FieldRef<"Company", 'Int'>
    readonly timezone: FieldRef<"Company", 'String'>
    readonly unionRules: FieldRef<"Company", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }

  /**
   * Company.shiftPatterns
   */
  export type Company$shiftPatternsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    where?: ShiftPatternWhereInput
    orderBy?: ShiftPatternOrderByWithRelationInput | ShiftPatternOrderByWithRelationInput[]
    cursor?: ShiftPatternWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftPatternScalarFieldEnum | ShiftPatternScalarFieldEnum[]
  }

  /**
   * Company.operatingHoursTemplates
   */
  export type Company$operatingHoursTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    where?: OperatingHoursTemplateWhereInput
    orderBy?: OperatingHoursTemplateOrderByWithRelationInput | OperatingHoursTemplateOrderByWithRelationInput[]
    cursor?: OperatingHoursTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OperatingHoursTemplateScalarFieldEnum | OperatingHoursTemplateScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    yearsOfExperience: number | null
    maxConsecutiveDays: number | null
    maxDailyHours: number | null
    minDailyHours: number | null
    minRestHours: number | null
    weeklyHoursTarget: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    yearsOfExperience: number | null
    maxConsecutiveDays: number | null
    maxDailyHours: number | null
    minDailyHours: number | null
    minRestHours: number | null
    weeklyHoursTarget: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    email: string | null
    department: string | null
    position: string | null
    phone: string | null
    address: string | null
    hireDate: Date | null
    yearsOfExperience: number | null
    createdAt: Date | null
    updatedAt: Date | null
    employeeType: string | null
    isActive: boolean | null
    maxConsecutiveDays: number | null
    maxDailyHours: number | null
    minDailyHours: number | null
    minRestHours: number | null
    seniorityLevel: string | null
    weeklyHoursTarget: number | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    email: string | null
    department: string | null
    position: string | null
    phone: string | null
    address: string | null
    hireDate: Date | null
    yearsOfExperience: number | null
    createdAt: Date | null
    updatedAt: Date | null
    employeeType: string | null
    isActive: boolean | null
    maxConsecutiveDays: number | null
    maxDailyHours: number | null
    minDailyHours: number | null
    minRestHours: number | null
    seniorityLevel: string | null
    weeklyHoursTarget: number | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    email: number
    department: number
    position: number
    phone: number
    address: number
    hireDate: number
    yearsOfExperience: number
    createdAt: number
    updatedAt: number
    employeeType: number
    isActive: number
    maxConsecutiveDays: number
    maxDailyHours: number
    minDailyHours: number
    minRestHours: number
    seniorityLevel: number
    weeklyHoursTarget: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    userId?: true
    yearsOfExperience?: true
    maxConsecutiveDays?: true
    maxDailyHours?: true
    minDailyHours?: true
    minRestHours?: true
    weeklyHoursTarget?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    userId?: true
    yearsOfExperience?: true
    maxConsecutiveDays?: true
    maxDailyHours?: true
    minDailyHours?: true
    minRestHours?: true
    weeklyHoursTarget?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    email?: true
    department?: true
    position?: true
    phone?: true
    address?: true
    hireDate?: true
    yearsOfExperience?: true
    createdAt?: true
    updatedAt?: true
    employeeType?: true
    isActive?: true
    maxConsecutiveDays?: true
    maxDailyHours?: true
    minDailyHours?: true
    minRestHours?: true
    seniorityLevel?: true
    weeklyHoursTarget?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    email?: true
    department?: true
    position?: true
    phone?: true
    address?: true
    hireDate?: true
    yearsOfExperience?: true
    createdAt?: true
    updatedAt?: true
    employeeType?: true
    isActive?: true
    maxConsecutiveDays?: true
    maxDailyHours?: true
    minDailyHours?: true
    minRestHours?: true
    seniorityLevel?: true
    weeklyHoursTarget?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    email?: true
    department?: true
    position?: true
    phone?: true
    address?: true
    hireDate?: true
    yearsOfExperience?: true
    createdAt?: true
    updatedAt?: true
    employeeType?: true
    isActive?: true
    maxConsecutiveDays?: true
    maxDailyHours?: true
    minDailyHours?: true
    minRestHours?: true
    seniorityLevel?: true
    weeklyHoursTarget?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone: string | null
    address: string | null
    hireDate: Date
    yearsOfExperience: number
    createdAt: Date
    updatedAt: Date
    employeeType: string
    isActive: boolean
    maxConsecutiveDays: number
    maxDailyHours: number
    minDailyHours: number
    minRestHours: number
    seniorityLevel: string
    weeklyHoursTarget: number
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    email?: boolean
    department?: boolean
    position?: boolean
    phone?: boolean
    address?: boolean
    hireDate?: boolean
    yearsOfExperience?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employeeType?: boolean
    isActive?: boolean
    maxConsecutiveDays?: boolean
    maxDailyHours?: boolean
    minDailyHours?: boolean
    minRestHours?: boolean
    seniorityLevel?: boolean
    weeklyHoursTarget?: boolean
    abilities?: boolean | Employee$abilitiesArgs<ExtArgs>
    certifications?: boolean | Employee$certificationsArgs<ExtArgs>
    chemistry1?: boolean | Employee$chemistry1Args<ExtArgs>
    chemistry2?: boolean | Employee$chemistry2Args<ExtArgs>
    constraints?: boolean | Employee$constraintsArgs<ExtArgs>
    notes?: boolean | Employee$notesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    leaves?: boolean | Employee$leavesArgs<ExtArgs>
    preferences?: boolean | Employee$preferencesArgs<ExtArgs>
    schedules?: boolean | Employee$schedulesArgs<ExtArgs>
    draftSchedules?: boolean | Employee$draftSchedulesArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>


  export type EmployeeSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    email?: boolean
    department?: boolean
    position?: boolean
    phone?: boolean
    address?: boolean
    hireDate?: boolean
    yearsOfExperience?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employeeType?: boolean
    isActive?: boolean
    maxConsecutiveDays?: boolean
    maxDailyHours?: boolean
    minDailyHours?: boolean
    minRestHours?: boolean
    seniorityLevel?: boolean
    weeklyHoursTarget?: boolean
  }

  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    abilities?: boolean | Employee$abilitiesArgs<ExtArgs>
    certifications?: boolean | Employee$certificationsArgs<ExtArgs>
    chemistry1?: boolean | Employee$chemistry1Args<ExtArgs>
    chemistry2?: boolean | Employee$chemistry2Args<ExtArgs>
    constraints?: boolean | Employee$constraintsArgs<ExtArgs>
    notes?: boolean | Employee$notesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    leaves?: boolean | Employee$leavesArgs<ExtArgs>
    preferences?: boolean | Employee$preferencesArgs<ExtArgs>
    schedules?: boolean | Employee$schedulesArgs<ExtArgs>
    draftSchedules?: boolean | Employee$draftSchedulesArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      abilities: Prisma.$AbilityPayload<ExtArgs> | null
      certifications: Prisma.$EmployeeCertificationPayload<ExtArgs>[]
      chemistry1: Prisma.$EmployeeChemistryPayload<ExtArgs>[]
      chemistry2: Prisma.$EmployeeChemistryPayload<ExtArgs>[]
      constraints: Prisma.$EmployeeConstraintsPayload<ExtArgs> | null
      notes: Prisma.$EmployeeNotePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      leaves: Prisma.$LeavePayload<ExtArgs>[]
      preferences: Prisma.$PreferencePayload<ExtArgs> | null
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
      draftSchedules: Prisma.$ScheduleDraftItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      name: string
      email: string
      department: string
      position: string
      phone: string | null
      address: string | null
      hireDate: Date
      yearsOfExperience: number
      createdAt: Date
      updatedAt: Date
      employeeType: string
      isActive: boolean
      maxConsecutiveDays: number
      maxDailyHours: number
      minDailyHours: number
      minRestHours: number
      seniorityLevel: string
      weeklyHoursTarget: number
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    abilities<T extends Employee$abilitiesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$abilitiesArgs<ExtArgs>>): Prisma__AbilityClient<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    certifications<T extends Employee$certificationsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$certificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "findMany"> | Null>
    chemistry1<T extends Employee$chemistry1Args<ExtArgs> = {}>(args?: Subset<T, Employee$chemistry1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "findMany"> | Null>
    chemistry2<T extends Employee$chemistry2Args<ExtArgs> = {}>(args?: Subset<T, Employee$chemistry2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "findMany"> | Null>
    constraints<T extends Employee$constraintsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$constraintsArgs<ExtArgs>>): Prisma__EmployeeConstraintsClient<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    notes<T extends Employee$notesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    leaves<T extends Employee$leavesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$leavesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findMany"> | Null>
    preferences<T extends Employee$preferencesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$preferencesArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    schedules<T extends Employee$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    draftSchedules<T extends Employee$draftSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$draftSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */ 
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'Int'>
    readonly userId: FieldRef<"Employee", 'Int'>
    readonly name: FieldRef<"Employee", 'String'>
    readonly email: FieldRef<"Employee", 'String'>
    readonly department: FieldRef<"Employee", 'String'>
    readonly position: FieldRef<"Employee", 'String'>
    readonly phone: FieldRef<"Employee", 'String'>
    readonly address: FieldRef<"Employee", 'String'>
    readonly hireDate: FieldRef<"Employee", 'DateTime'>
    readonly yearsOfExperience: FieldRef<"Employee", 'Int'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
    readonly employeeType: FieldRef<"Employee", 'String'>
    readonly isActive: FieldRef<"Employee", 'Boolean'>
    readonly maxConsecutiveDays: FieldRef<"Employee", 'Int'>
    readonly maxDailyHours: FieldRef<"Employee", 'Int'>
    readonly minDailyHours: FieldRef<"Employee", 'Int'>
    readonly minRestHours: FieldRef<"Employee", 'Int'>
    readonly seniorityLevel: FieldRef<"Employee", 'String'>
    readonly weeklyHoursTarget: FieldRef<"Employee", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee.abilities
   */
  export type Employee$abilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    where?: AbilityWhereInput
  }

  /**
   * Employee.certifications
   */
  export type Employee$certificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    where?: EmployeeCertificationWhereInput
    orderBy?: EmployeeCertificationOrderByWithRelationInput | EmployeeCertificationOrderByWithRelationInput[]
    cursor?: EmployeeCertificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeCertificationScalarFieldEnum | EmployeeCertificationScalarFieldEnum[]
  }

  /**
   * Employee.chemistry1
   */
  export type Employee$chemistry1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    where?: EmployeeChemistryWhereInput
    orderBy?: EmployeeChemistryOrderByWithRelationInput | EmployeeChemistryOrderByWithRelationInput[]
    cursor?: EmployeeChemistryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeChemistryScalarFieldEnum | EmployeeChemistryScalarFieldEnum[]
  }

  /**
   * Employee.chemistry2
   */
  export type Employee$chemistry2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    where?: EmployeeChemistryWhereInput
    orderBy?: EmployeeChemistryOrderByWithRelationInput | EmployeeChemistryOrderByWithRelationInput[]
    cursor?: EmployeeChemistryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeChemistryScalarFieldEnum | EmployeeChemistryScalarFieldEnum[]
  }

  /**
   * Employee.constraints
   */
  export type Employee$constraintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    where?: EmployeeConstraintsWhereInput
  }

  /**
   * Employee.notes
   */
  export type Employee$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    where?: EmployeeNoteWhereInput
    orderBy?: EmployeeNoteOrderByWithRelationInput | EmployeeNoteOrderByWithRelationInput[]
    cursor?: EmployeeNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeNoteScalarFieldEnum | EmployeeNoteScalarFieldEnum[]
  }

  /**
   * Employee.leaves
   */
  export type Employee$leavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    where?: LeaveWhereInput
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    cursor?: LeaveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }

  /**
   * Employee.preferences
   */
  export type Employee$preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    where?: PreferenceWhereInput
  }

  /**
   * Employee.schedules
   */
  export type Employee$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Employee.draftSchedules
   */
  export type Employee$draftSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    where?: ScheduleDraftItemWhereInput
    orderBy?: ScheduleDraftItemOrderByWithRelationInput | ScheduleDraftItemOrderByWithRelationInput[]
    cursor?: ScheduleDraftItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleDraftItemScalarFieldEnum | ScheduleDraftItemScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model Ability
   */

  export type AggregateAbility = {
    _count: AbilityCountAggregateOutputType | null
    _avg: AbilityAvgAggregateOutputType | null
    _sum: AbilitySumAggregateOutputType | null
    _min: AbilityMinAggregateOutputType | null
    _max: AbilityMaxAggregateOutputType | null
  }

  export type AbilityAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    customerService: number | null
    experience: number | null
    flexibility: number | null
    teamChemistry: number | null
    totalScore: number | null
    workSkill: number | null
  }

  export type AbilitySumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    customerService: number | null
    experience: number | null
    flexibility: number | null
    teamChemistry: number | null
    totalScore: number | null
    workSkill: number | null
  }

  export type AbilityMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    customerService: number | null
    experience: number | null
    flexibility: number | null
    rank: string | null
    teamChemistry: number | null
    totalScore: number | null
    workSkill: number | null
  }

  export type AbilityMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    customerService: number | null
    experience: number | null
    flexibility: number | null
    rank: string | null
    teamChemistry: number | null
    totalScore: number | null
    workSkill: number | null
  }

  export type AbilityCountAggregateOutputType = {
    id: number
    employeeId: number
    customerService: number
    experience: number
    flexibility: number
    rank: number
    teamChemistry: number
    totalScore: number
    workSkill: number
    _all: number
  }


  export type AbilityAvgAggregateInputType = {
    id?: true
    employeeId?: true
    customerService?: true
    experience?: true
    flexibility?: true
    teamChemistry?: true
    totalScore?: true
    workSkill?: true
  }

  export type AbilitySumAggregateInputType = {
    id?: true
    employeeId?: true
    customerService?: true
    experience?: true
    flexibility?: true
    teamChemistry?: true
    totalScore?: true
    workSkill?: true
  }

  export type AbilityMinAggregateInputType = {
    id?: true
    employeeId?: true
    customerService?: true
    experience?: true
    flexibility?: true
    rank?: true
    teamChemistry?: true
    totalScore?: true
    workSkill?: true
  }

  export type AbilityMaxAggregateInputType = {
    id?: true
    employeeId?: true
    customerService?: true
    experience?: true
    flexibility?: true
    rank?: true
    teamChemistry?: true
    totalScore?: true
    workSkill?: true
  }

  export type AbilityCountAggregateInputType = {
    id?: true
    employeeId?: true
    customerService?: true
    experience?: true
    flexibility?: true
    rank?: true
    teamChemistry?: true
    totalScore?: true
    workSkill?: true
    _all?: true
  }

  export type AbilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ability to aggregate.
     */
    where?: AbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: AbilityOrderByWithRelationInput | AbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Abilities
    **/
    _count?: true | AbilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AbilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AbilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AbilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AbilityMaxAggregateInputType
  }

  export type GetAbilityAggregateType<T extends AbilityAggregateArgs> = {
        [P in keyof T & keyof AggregateAbility]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAbility[P]>
      : GetScalarType<T[P], AggregateAbility[P]>
  }




  export type AbilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AbilityWhereInput
    orderBy?: AbilityOrderByWithAggregationInput | AbilityOrderByWithAggregationInput[]
    by: AbilityScalarFieldEnum[] | AbilityScalarFieldEnum
    having?: AbilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AbilityCountAggregateInputType | true
    _avg?: AbilityAvgAggregateInputType
    _sum?: AbilitySumAggregateInputType
    _min?: AbilityMinAggregateInputType
    _max?: AbilityMaxAggregateInputType
  }

  export type AbilityGroupByOutputType = {
    id: number
    employeeId: number
    customerService: number
    experience: number
    flexibility: number
    rank: string | null
    teamChemistry: number
    totalScore: number | null
    workSkill: number
    _count: AbilityCountAggregateOutputType | null
    _avg: AbilityAvgAggregateOutputType | null
    _sum: AbilitySumAggregateOutputType | null
    _min: AbilityMinAggregateOutputType | null
    _max: AbilityMaxAggregateOutputType | null
  }

  type GetAbilityGroupByPayload<T extends AbilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AbilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AbilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AbilityGroupByOutputType[P]>
            : GetScalarType<T[P], AbilityGroupByOutputType[P]>
        }
      >
    >


  export type AbilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    customerService?: boolean
    experience?: boolean
    flexibility?: boolean
    rank?: boolean
    teamChemistry?: boolean
    totalScore?: boolean
    workSkill?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ability"]>


  export type AbilitySelectScalar = {
    id?: boolean
    employeeId?: boolean
    customerService?: boolean
    experience?: boolean
    flexibility?: boolean
    rank?: boolean
    teamChemistry?: boolean
    totalScore?: boolean
    workSkill?: boolean
  }

  export type AbilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $AbilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ability"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      customerService: number
      experience: number
      flexibility: number
      rank: string | null
      teamChemistry: number
      totalScore: number | null
      workSkill: number
    }, ExtArgs["result"]["ability"]>
    composites: {}
  }

  type AbilityGetPayload<S extends boolean | null | undefined | AbilityDefaultArgs> = $Result.GetResult<Prisma.$AbilityPayload, S>

  type AbilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AbilityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AbilityCountAggregateInputType | true
    }

  export interface AbilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ability'], meta: { name: 'Ability' } }
    /**
     * Find zero or one Ability that matches the filter.
     * @param {AbilityFindUniqueArgs} args - Arguments to find a Ability
     * @example
     * // Get one Ability
     * const ability = await prisma.ability.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AbilityFindUniqueArgs>(args: SelectSubset<T, AbilityFindUniqueArgs<ExtArgs>>): Prisma__AbilityClient<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ability that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AbilityFindUniqueOrThrowArgs} args - Arguments to find a Ability
     * @example
     * // Get one Ability
     * const ability = await prisma.ability.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AbilityFindUniqueOrThrowArgs>(args: SelectSubset<T, AbilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AbilityClient<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ability that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityFindFirstArgs} args - Arguments to find a Ability
     * @example
     * // Get one Ability
     * const ability = await prisma.ability.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AbilityFindFirstArgs>(args?: SelectSubset<T, AbilityFindFirstArgs<ExtArgs>>): Prisma__AbilityClient<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ability that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityFindFirstOrThrowArgs} args - Arguments to find a Ability
     * @example
     * // Get one Ability
     * const ability = await prisma.ability.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AbilityFindFirstOrThrowArgs>(args?: SelectSubset<T, AbilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__AbilityClient<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Abilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Abilities
     * const abilities = await prisma.ability.findMany()
     * 
     * // Get first 10 Abilities
     * const abilities = await prisma.ability.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const abilityWithIdOnly = await prisma.ability.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AbilityFindManyArgs>(args?: SelectSubset<T, AbilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ability.
     * @param {AbilityCreateArgs} args - Arguments to create a Ability.
     * @example
     * // Create one Ability
     * const Ability = await prisma.ability.create({
     *   data: {
     *     // ... data to create a Ability
     *   }
     * })
     * 
     */
    create<T extends AbilityCreateArgs>(args: SelectSubset<T, AbilityCreateArgs<ExtArgs>>): Prisma__AbilityClient<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Abilities.
     * @param {AbilityCreateManyArgs} args - Arguments to create many Abilities.
     * @example
     * // Create many Abilities
     * const ability = await prisma.ability.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AbilityCreateManyArgs>(args?: SelectSubset<T, AbilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ability.
     * @param {AbilityDeleteArgs} args - Arguments to delete one Ability.
     * @example
     * // Delete one Ability
     * const Ability = await prisma.ability.delete({
     *   where: {
     *     // ... filter to delete one Ability
     *   }
     * })
     * 
     */
    delete<T extends AbilityDeleteArgs>(args: SelectSubset<T, AbilityDeleteArgs<ExtArgs>>): Prisma__AbilityClient<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ability.
     * @param {AbilityUpdateArgs} args - Arguments to update one Ability.
     * @example
     * // Update one Ability
     * const ability = await prisma.ability.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AbilityUpdateArgs>(args: SelectSubset<T, AbilityUpdateArgs<ExtArgs>>): Prisma__AbilityClient<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Abilities.
     * @param {AbilityDeleteManyArgs} args - Arguments to filter Abilities to delete.
     * @example
     * // Delete a few Abilities
     * const { count } = await prisma.ability.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AbilityDeleteManyArgs>(args?: SelectSubset<T, AbilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Abilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Abilities
     * const ability = await prisma.ability.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AbilityUpdateManyArgs>(args: SelectSubset<T, AbilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ability.
     * @param {AbilityUpsertArgs} args - Arguments to update or create a Ability.
     * @example
     * // Update or create a Ability
     * const ability = await prisma.ability.upsert({
     *   create: {
     *     // ... data to create a Ability
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ability we want to update
     *   }
     * })
     */
    upsert<T extends AbilityUpsertArgs>(args: SelectSubset<T, AbilityUpsertArgs<ExtArgs>>): Prisma__AbilityClient<$Result.GetResult<Prisma.$AbilityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Abilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityCountArgs} args - Arguments to filter Abilities to count.
     * @example
     * // Count the number of Abilities
     * const count = await prisma.ability.count({
     *   where: {
     *     // ... the filter for the Abilities we want to count
     *   }
     * })
    **/
    count<T extends AbilityCountArgs>(
      args?: Subset<T, AbilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AbilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AbilityAggregateArgs>(args: Subset<T, AbilityAggregateArgs>): Prisma.PrismaPromise<GetAbilityAggregateType<T>>

    /**
     * Group by Ability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AbilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AbilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AbilityGroupByArgs['orderBy'] }
        : { orderBy?: AbilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AbilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAbilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ability model
   */
  readonly fields: AbilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ability.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AbilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ability model
   */ 
  interface AbilityFieldRefs {
    readonly id: FieldRef<"Ability", 'Int'>
    readonly employeeId: FieldRef<"Ability", 'Int'>
    readonly customerService: FieldRef<"Ability", 'Int'>
    readonly experience: FieldRef<"Ability", 'Int'>
    readonly flexibility: FieldRef<"Ability", 'Int'>
    readonly rank: FieldRef<"Ability", 'String'>
    readonly teamChemistry: FieldRef<"Ability", 'Int'>
    readonly totalScore: FieldRef<"Ability", 'Int'>
    readonly workSkill: FieldRef<"Ability", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ability findUnique
   */
  export type AbilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    /**
     * Filter, which Ability to fetch.
     */
    where: AbilityWhereUniqueInput
  }

  /**
   * Ability findUniqueOrThrow
   */
  export type AbilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    /**
     * Filter, which Ability to fetch.
     */
    where: AbilityWhereUniqueInput
  }

  /**
   * Ability findFirst
   */
  export type AbilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    /**
     * Filter, which Ability to fetch.
     */
    where?: AbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: AbilityOrderByWithRelationInput | AbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abilities.
     */
    cursor?: AbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abilities.
     */
    distinct?: AbilityScalarFieldEnum | AbilityScalarFieldEnum[]
  }

  /**
   * Ability findFirstOrThrow
   */
  export type AbilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    /**
     * Filter, which Ability to fetch.
     */
    where?: AbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: AbilityOrderByWithRelationInput | AbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Abilities.
     */
    cursor?: AbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Abilities.
     */
    distinct?: AbilityScalarFieldEnum | AbilityScalarFieldEnum[]
  }

  /**
   * Ability findMany
   */
  export type AbilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    /**
     * Filter, which Abilities to fetch.
     */
    where?: AbilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Abilities to fetch.
     */
    orderBy?: AbilityOrderByWithRelationInput | AbilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Abilities.
     */
    cursor?: AbilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Abilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Abilities.
     */
    skip?: number
    distinct?: AbilityScalarFieldEnum | AbilityScalarFieldEnum[]
  }

  /**
   * Ability create
   */
  export type AbilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    /**
     * The data needed to create a Ability.
     */
    data: XOR<AbilityCreateInput, AbilityUncheckedCreateInput>
  }

  /**
   * Ability createMany
   */
  export type AbilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Abilities.
     */
    data: AbilityCreateManyInput | AbilityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ability update
   */
  export type AbilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    /**
     * The data needed to update a Ability.
     */
    data: XOR<AbilityUpdateInput, AbilityUncheckedUpdateInput>
    /**
     * Choose, which Ability to update.
     */
    where: AbilityWhereUniqueInput
  }

  /**
   * Ability updateMany
   */
  export type AbilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Abilities.
     */
    data: XOR<AbilityUpdateManyMutationInput, AbilityUncheckedUpdateManyInput>
    /**
     * Filter which Abilities to update
     */
    where?: AbilityWhereInput
  }

  /**
   * Ability upsert
   */
  export type AbilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    /**
     * The filter to search for the Ability to update in case it exists.
     */
    where: AbilityWhereUniqueInput
    /**
     * In case the Ability found by the `where` argument doesn't exist, create a new Ability with this data.
     */
    create: XOR<AbilityCreateInput, AbilityUncheckedCreateInput>
    /**
     * In case the Ability was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AbilityUpdateInput, AbilityUncheckedUpdateInput>
  }

  /**
   * Ability delete
   */
  export type AbilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
    /**
     * Filter which Ability to delete.
     */
    where: AbilityWhereUniqueInput
  }

  /**
   * Ability deleteMany
   */
  export type AbilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Abilities to delete
     */
    where?: AbilityWhereInput
  }

  /**
   * Ability without action
   */
  export type AbilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ability
     */
    select?: AbilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AbilityInclude<ExtArgs> | null
  }


  /**
   * Model Preference
   */

  export type AggregatePreference = {
    _count: PreferenceCountAggregateOutputType | null
    _avg: PreferenceAvgAggregateOutputType | null
    _sum: PreferenceSumAggregateOutputType | null
    _min: PreferenceMinAggregateOutputType | null
    _max: PreferenceMaxAggregateOutputType | null
  }

  export type PreferenceAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type PreferenceSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type PreferenceMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type PreferenceMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type PreferenceCountAggregateOutputType = {
    id: number
    employeeId: number
    preferDays: number
    avoidDays: number
    fixedOffDays: number
    _all: number
  }


  export type PreferenceAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type PreferenceSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type PreferenceMinAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type PreferenceMaxAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type PreferenceCountAggregateInputType = {
    id?: true
    employeeId?: true
    preferDays?: true
    avoidDays?: true
    fixedOffDays?: true
    _all?: true
  }

  export type PreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preference to aggregate.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Preferences
    **/
    _count?: true | PreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreferenceMaxAggregateInputType
  }

  export type GetPreferenceAggregateType<T extends PreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregatePreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreference[P]>
      : GetScalarType<T[P], AggregatePreference[P]>
  }




  export type PreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferenceWhereInput
    orderBy?: PreferenceOrderByWithAggregationInput | PreferenceOrderByWithAggregationInput[]
    by: PreferenceScalarFieldEnum[] | PreferenceScalarFieldEnum
    having?: PreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreferenceCountAggregateInputType | true
    _avg?: PreferenceAvgAggregateInputType
    _sum?: PreferenceSumAggregateInputType
    _min?: PreferenceMinAggregateInputType
    _max?: PreferenceMaxAggregateInputType
  }

  export type PreferenceGroupByOutputType = {
    id: number
    employeeId: number
    preferDays: JsonValue
    avoidDays: JsonValue
    fixedOffDays: JsonValue
    _count: PreferenceCountAggregateOutputType | null
    _avg: PreferenceAvgAggregateOutputType | null
    _sum: PreferenceSumAggregateOutputType | null
    _min: PreferenceMinAggregateOutputType | null
    _max: PreferenceMaxAggregateOutputType | null
  }

  type GetPreferenceGroupByPayload<T extends PreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], PreferenceGroupByOutputType[P]>
        }
      >
    >


  export type PreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    preferDays?: boolean
    avoidDays?: boolean
    fixedOffDays?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preference"]>


  export type PreferenceSelectScalar = {
    id?: boolean
    employeeId?: boolean
    preferDays?: boolean
    avoidDays?: boolean
    fixedOffDays?: boolean
  }

  export type PreferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Preference"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      preferDays: Prisma.JsonValue
      avoidDays: Prisma.JsonValue
      fixedOffDays: Prisma.JsonValue
    }, ExtArgs["result"]["preference"]>
    composites: {}
  }

  type PreferenceGetPayload<S extends boolean | null | undefined | PreferenceDefaultArgs> = $Result.GetResult<Prisma.$PreferencePayload, S>

  type PreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PreferenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PreferenceCountAggregateInputType | true
    }

  export interface PreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Preference'], meta: { name: 'Preference' } }
    /**
     * Find zero or one Preference that matches the filter.
     * @param {PreferenceFindUniqueArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreferenceFindUniqueArgs>(args: SelectSubset<T, PreferenceFindUniqueArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Preference that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PreferenceFindUniqueOrThrowArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, PreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Preference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceFindFirstArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreferenceFindFirstArgs>(args?: SelectSubset<T, PreferenceFindFirstArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Preference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceFindFirstOrThrowArgs} args - Arguments to find a Preference
     * @example
     * // Get one Preference
     * const preference = await prisma.preference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, PreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Preferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Preferences
     * const preferences = await prisma.preference.findMany()
     * 
     * // Get first 10 Preferences
     * const preferences = await prisma.preference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preferenceWithIdOnly = await prisma.preference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreferenceFindManyArgs>(args?: SelectSubset<T, PreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Preference.
     * @param {PreferenceCreateArgs} args - Arguments to create a Preference.
     * @example
     * // Create one Preference
     * const Preference = await prisma.preference.create({
     *   data: {
     *     // ... data to create a Preference
     *   }
     * })
     * 
     */
    create<T extends PreferenceCreateArgs>(args: SelectSubset<T, PreferenceCreateArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Preferences.
     * @param {PreferenceCreateManyArgs} args - Arguments to create many Preferences.
     * @example
     * // Create many Preferences
     * const preference = await prisma.preference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreferenceCreateManyArgs>(args?: SelectSubset<T, PreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Preference.
     * @param {PreferenceDeleteArgs} args - Arguments to delete one Preference.
     * @example
     * // Delete one Preference
     * const Preference = await prisma.preference.delete({
     *   where: {
     *     // ... filter to delete one Preference
     *   }
     * })
     * 
     */
    delete<T extends PreferenceDeleteArgs>(args: SelectSubset<T, PreferenceDeleteArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Preference.
     * @param {PreferenceUpdateArgs} args - Arguments to update one Preference.
     * @example
     * // Update one Preference
     * const preference = await prisma.preference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreferenceUpdateArgs>(args: SelectSubset<T, PreferenceUpdateArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Preferences.
     * @param {PreferenceDeleteManyArgs} args - Arguments to filter Preferences to delete.
     * @example
     * // Delete a few Preferences
     * const { count } = await prisma.preference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreferenceDeleteManyArgs>(args?: SelectSubset<T, PreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Preferences
     * const preference = await prisma.preference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreferenceUpdateManyArgs>(args: SelectSubset<T, PreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Preference.
     * @param {PreferenceUpsertArgs} args - Arguments to update or create a Preference.
     * @example
     * // Update or create a Preference
     * const preference = await prisma.preference.upsert({
     *   create: {
     *     // ... data to create a Preference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Preference we want to update
     *   }
     * })
     */
    upsert<T extends PreferenceUpsertArgs>(args: SelectSubset<T, PreferenceUpsertArgs<ExtArgs>>): Prisma__PreferenceClient<$Result.GetResult<Prisma.$PreferencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceCountArgs} args - Arguments to filter Preferences to count.
     * @example
     * // Count the number of Preferences
     * const count = await prisma.preference.count({
     *   where: {
     *     // ... the filter for the Preferences we want to count
     *   }
     * })
    **/
    count<T extends PreferenceCountArgs>(
      args?: Subset<T, PreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Preference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreferenceAggregateArgs>(args: Subset<T, PreferenceAggregateArgs>): Prisma.PrismaPromise<GetPreferenceAggregateType<T>>

    /**
     * Group by Preference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreferenceGroupByArgs['orderBy'] }
        : { orderBy?: PreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Preference model
   */
  readonly fields: PreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Preference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Preference model
   */ 
  interface PreferenceFieldRefs {
    readonly id: FieldRef<"Preference", 'Int'>
    readonly employeeId: FieldRef<"Preference", 'Int'>
    readonly preferDays: FieldRef<"Preference", 'Json'>
    readonly avoidDays: FieldRef<"Preference", 'Json'>
    readonly fixedOffDays: FieldRef<"Preference", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Preference findUnique
   */
  export type PreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference findUniqueOrThrow
   */
  export type PreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference findFirst
   */
  export type PreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preferences.
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preferences.
     */
    distinct?: PreferenceScalarFieldEnum | PreferenceScalarFieldEnum[]
  }

  /**
   * Preference findFirstOrThrow
   */
  export type PreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preference to fetch.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preferences.
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preferences.
     */
    distinct?: PreferenceScalarFieldEnum | PreferenceScalarFieldEnum[]
  }

  /**
   * Preference findMany
   */
  export type PreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter, which Preferences to fetch.
     */
    where?: PreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferenceOrderByWithRelationInput | PreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Preferences.
     */
    cursor?: PreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    distinct?: PreferenceScalarFieldEnum | PreferenceScalarFieldEnum[]
  }

  /**
   * Preference create
   */
  export type PreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Preference.
     */
    data: XOR<PreferenceCreateInput, PreferenceUncheckedCreateInput>
  }

  /**
   * Preference createMany
   */
  export type PreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Preferences.
     */
    data: PreferenceCreateManyInput | PreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Preference update
   */
  export type PreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Preference.
     */
    data: XOR<PreferenceUpdateInput, PreferenceUncheckedUpdateInput>
    /**
     * Choose, which Preference to update.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference updateMany
   */
  export type PreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Preferences.
     */
    data: XOR<PreferenceUpdateManyMutationInput, PreferenceUncheckedUpdateManyInput>
    /**
     * Filter which Preferences to update
     */
    where?: PreferenceWhereInput
  }

  /**
   * Preference upsert
   */
  export type PreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Preference to update in case it exists.
     */
    where: PreferenceWhereUniqueInput
    /**
     * In case the Preference found by the `where` argument doesn't exist, create a new Preference with this data.
     */
    create: XOR<PreferenceCreateInput, PreferenceUncheckedCreateInput>
    /**
     * In case the Preference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreferenceUpdateInput, PreferenceUncheckedUpdateInput>
  }

  /**
   * Preference delete
   */
  export type PreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
    /**
     * Filter which Preference to delete.
     */
    where: PreferenceWhereUniqueInput
  }

  /**
   * Preference deleteMany
   */
  export type PreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preferences to delete
     */
    where?: PreferenceWhereInput
  }

  /**
   * Preference without action
   */
  export type PreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preference
     */
    select?: PreferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferenceInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    createdBy: number | null
    updatedBy: number | null
    generationLogId: number | null
    shiftPatternId: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    createdBy: number | null
    updatedBy: number | null
    generationLogId: number | null
    shiftPatternId: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    shiftType: string | null
    notes: string | null
    status: string | null
    createdBy: number | null
    updatedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    breakTime: string | null
    estimatedWorkload: string | null
    generationLogId: number | null
    isAutoGenerated: boolean | null
    overtimeApproved: boolean | null
    priority: string | null
    shiftPatternId: number | null
    swapRequested: boolean | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    shiftType: string | null
    notes: string | null
    status: string | null
    createdBy: number | null
    updatedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    breakTime: string | null
    estimatedWorkload: string | null
    generationLogId: number | null
    isAutoGenerated: boolean | null
    overtimeApproved: boolean | null
    priority: string | null
    shiftPatternId: number | null
    swapRequested: boolean | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    employeeId: number
    date: number
    startTime: number
    endTime: number
    shiftType: number
    notes: number
    status: number
    createdBy: number
    updatedBy: number
    createdAt: number
    updatedAt: number
    breakTime: number
    estimatedWorkload: number
    generationLogId: number
    isAutoGenerated: number
    overtimeApproved: number
    priority: number
    shiftPatternId: number
    swapRequested: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    id?: true
    employeeId?: true
    createdBy?: true
    updatedBy?: true
    generationLogId?: true
    shiftPatternId?: true
  }

  export type ScheduleSumAggregateInputType = {
    id?: true
    employeeId?: true
    createdBy?: true
    updatedBy?: true
    generationLogId?: true
    shiftPatternId?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    employeeId?: true
    date?: true
    startTime?: true
    endTime?: true
    shiftType?: true
    notes?: true
    status?: true
    createdBy?: true
    updatedBy?: true
    createdAt?: true
    updatedAt?: true
    breakTime?: true
    estimatedWorkload?: true
    generationLogId?: true
    isAutoGenerated?: true
    overtimeApproved?: true
    priority?: true
    shiftPatternId?: true
    swapRequested?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    employeeId?: true
    date?: true
    startTime?: true
    endTime?: true
    shiftType?: true
    notes?: true
    status?: true
    createdBy?: true
    updatedBy?: true
    createdAt?: true
    updatedAt?: true
    breakTime?: true
    estimatedWorkload?: true
    generationLogId?: true
    isAutoGenerated?: true
    overtimeApproved?: true
    priority?: true
    shiftPatternId?: true
    swapRequested?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    employeeId?: true
    date?: true
    startTime?: true
    endTime?: true
    shiftType?: true
    notes?: true
    status?: true
    createdBy?: true
    updatedBy?: true
    createdAt?: true
    updatedAt?: true
    breakTime?: true
    estimatedWorkload?: true
    generationLogId?: true
    isAutoGenerated?: true
    overtimeApproved?: true
    priority?: true
    shiftPatternId?: true
    swapRequested?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: number
    employeeId: number
    date: Date
    startTime: string
    endTime: string
    shiftType: string
    notes: string | null
    status: string
    createdBy: number | null
    updatedBy: number | null
    createdAt: Date
    updatedAt: Date
    breakTime: string | null
    estimatedWorkload: string | null
    generationLogId: number | null
    isAutoGenerated: boolean
    overtimeApproved: boolean
    priority: string
    shiftPatternId: number | null
    swapRequested: boolean
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    shiftType?: boolean
    notes?: boolean
    status?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    breakTime?: boolean
    estimatedWorkload?: boolean
    generationLogId?: boolean
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: boolean
    shiftPatternId?: boolean
    swapRequested?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    generationLog?: boolean | Schedule$generationLogArgs<ExtArgs>
    shiftPattern?: boolean | Schedule$shiftPatternArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>


  export type ScheduleSelectScalar = {
    id?: boolean
    employeeId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    shiftType?: boolean
    notes?: boolean
    status?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    breakTime?: boolean
    estimatedWorkload?: boolean
    generationLogId?: boolean
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: boolean
    shiftPatternId?: boolean
    swapRequested?: boolean
  }

  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    generationLog?: boolean | Schedule$generationLogArgs<ExtArgs>
    shiftPattern?: boolean | Schedule$shiftPatternArgs<ExtArgs>
  }

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      generationLog: Prisma.$GenerationLogPayload<ExtArgs> | null
      shiftPattern: Prisma.$ShiftPatternPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      date: Date
      startTime: string
      endTime: string
      shiftType: string
      notes: string | null
      status: string
      createdBy: number | null
      updatedBy: number | null
      createdAt: Date
      updatedAt: Date
      breakTime: string | null
      estimatedWorkload: string | null
      generationLogId: number | null
      isAutoGenerated: boolean
      overtimeApproved: boolean
      priority: string
      shiftPatternId: number | null
      swapRequested: boolean
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    generationLog<T extends Schedule$generationLogArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$generationLogArgs<ExtArgs>>): Prisma__GenerationLogClient<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    shiftPattern<T extends Schedule$shiftPatternArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$shiftPatternArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */ 
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'Int'>
    readonly employeeId: FieldRef<"Schedule", 'Int'>
    readonly date: FieldRef<"Schedule", 'DateTime'>
    readonly startTime: FieldRef<"Schedule", 'String'>
    readonly endTime: FieldRef<"Schedule", 'String'>
    readonly shiftType: FieldRef<"Schedule", 'String'>
    readonly notes: FieldRef<"Schedule", 'String'>
    readonly status: FieldRef<"Schedule", 'String'>
    readonly createdBy: FieldRef<"Schedule", 'Int'>
    readonly updatedBy: FieldRef<"Schedule", 'Int'>
    readonly createdAt: FieldRef<"Schedule", 'DateTime'>
    readonly updatedAt: FieldRef<"Schedule", 'DateTime'>
    readonly breakTime: FieldRef<"Schedule", 'String'>
    readonly estimatedWorkload: FieldRef<"Schedule", 'String'>
    readonly generationLogId: FieldRef<"Schedule", 'Int'>
    readonly isAutoGenerated: FieldRef<"Schedule", 'Boolean'>
    readonly overtimeApproved: FieldRef<"Schedule", 'Boolean'>
    readonly priority: FieldRef<"Schedule", 'String'>
    readonly shiftPatternId: FieldRef<"Schedule", 'Int'>
    readonly swapRequested: FieldRef<"Schedule", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule.generationLog
   */
  export type Schedule$generationLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    where?: GenerationLogWhereInput
  }

  /**
   * Schedule.shiftPattern
   */
  export type Schedule$shiftPatternArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    where?: ShiftPatternWhereInput
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model Leave
   */

  export type AggregateLeave = {
    _count: LeaveCountAggregateOutputType | null
    _avg: LeaveAvgAggregateOutputType | null
    _sum: LeaveSumAggregateOutputType | null
    _min: LeaveMinAggregateOutputType | null
    _max: LeaveMaxAggregateOutputType | null
  }

  export type LeaveAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    reviewedBy: number | null
  }

  export type LeaveSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    reviewedBy: number | null
  }

  export type LeaveMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    startDate: Date | null
    endDate: Date | null
    type: string | null
    reason: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    adminComment: string | null
    reviewedAt: Date | null
    reviewedBy: number | null
  }

  export type LeaveMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    startDate: Date | null
    endDate: Date | null
    type: string | null
    reason: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    adminComment: string | null
    reviewedAt: Date | null
    reviewedBy: number | null
  }

  export type LeaveCountAggregateOutputType = {
    id: number
    employeeId: number
    startDate: number
    endDate: number
    type: number
    reason: number
    status: number
    createdAt: number
    updatedAt: number
    adminComment: number
    reviewedAt: number
    reviewedBy: number
    _all: number
  }


  export type LeaveAvgAggregateInputType = {
    id?: true
    employeeId?: true
    reviewedBy?: true
  }

  export type LeaveSumAggregateInputType = {
    id?: true
    employeeId?: true
    reviewedBy?: true
  }

  export type LeaveMinAggregateInputType = {
    id?: true
    employeeId?: true
    startDate?: true
    endDate?: true
    type?: true
    reason?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    adminComment?: true
    reviewedAt?: true
    reviewedBy?: true
  }

  export type LeaveMaxAggregateInputType = {
    id?: true
    employeeId?: true
    startDate?: true
    endDate?: true
    type?: true
    reason?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    adminComment?: true
    reviewedAt?: true
    reviewedBy?: true
  }

  export type LeaveCountAggregateInputType = {
    id?: true
    employeeId?: true
    startDate?: true
    endDate?: true
    type?: true
    reason?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    adminComment?: true
    reviewedAt?: true
    reviewedBy?: true
    _all?: true
  }

  export type LeaveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leave to aggregate.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leaves
    **/
    _count?: true | LeaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveMaxAggregateInputType
  }

  export type GetLeaveAggregateType<T extends LeaveAggregateArgs> = {
        [P in keyof T & keyof AggregateLeave]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeave[P]>
      : GetScalarType<T[P], AggregateLeave[P]>
  }




  export type LeaveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveWhereInput
    orderBy?: LeaveOrderByWithAggregationInput | LeaveOrderByWithAggregationInput[]
    by: LeaveScalarFieldEnum[] | LeaveScalarFieldEnum
    having?: LeaveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveCountAggregateInputType | true
    _avg?: LeaveAvgAggregateInputType
    _sum?: LeaveSumAggregateInputType
    _min?: LeaveMinAggregateInputType
    _max?: LeaveMaxAggregateInputType
  }

  export type LeaveGroupByOutputType = {
    id: number
    employeeId: number
    startDate: Date
    endDate: Date
    type: string
    reason: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    adminComment: string | null
    reviewedAt: Date | null
    reviewedBy: number | null
    _count: LeaveCountAggregateOutputType | null
    _avg: LeaveAvgAggregateOutputType | null
    _sum: LeaveSumAggregateOutputType | null
    _min: LeaveMinAggregateOutputType | null
    _max: LeaveMaxAggregateOutputType | null
  }

  type GetLeaveGroupByPayload<T extends LeaveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveGroupByOutputType[P]>
        }
      >
    >


  export type LeaveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    startDate?: boolean
    endDate?: boolean
    type?: boolean
    reason?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminComment?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewer?: boolean | Leave$reviewerArgs<ExtArgs>
  }, ExtArgs["result"]["leave"]>


  export type LeaveSelectScalar = {
    id?: boolean
    employeeId?: boolean
    startDate?: boolean
    endDate?: boolean
    type?: boolean
    reason?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminComment?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
  }

  export type LeaveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    reviewer?: boolean | Leave$reviewerArgs<ExtArgs>
  }

  export type $LeavePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Leave"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      reviewer: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      startDate: Date
      endDate: Date
      type: string
      reason: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      adminComment: string | null
      reviewedAt: Date | null
      reviewedBy: number | null
    }, ExtArgs["result"]["leave"]>
    composites: {}
  }

  type LeaveGetPayload<S extends boolean | null | undefined | LeaveDefaultArgs> = $Result.GetResult<Prisma.$LeavePayload, S>

  type LeaveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeaveFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeaveCountAggregateInputType | true
    }

  export interface LeaveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Leave'], meta: { name: 'Leave' } }
    /**
     * Find zero or one Leave that matches the filter.
     * @param {LeaveFindUniqueArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveFindUniqueArgs>(args: SelectSubset<T, LeaveFindUniqueArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Leave that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeaveFindUniqueOrThrowArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Leave that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveFindFirstArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveFindFirstArgs>(args?: SelectSubset<T, LeaveFindFirstArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Leave that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveFindFirstOrThrowArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Leaves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leaves
     * const leaves = await prisma.leave.findMany()
     * 
     * // Get first 10 Leaves
     * const leaves = await prisma.leave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveWithIdOnly = await prisma.leave.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveFindManyArgs>(args?: SelectSubset<T, LeaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Leave.
     * @param {LeaveCreateArgs} args - Arguments to create a Leave.
     * @example
     * // Create one Leave
     * const Leave = await prisma.leave.create({
     *   data: {
     *     // ... data to create a Leave
     *   }
     * })
     * 
     */
    create<T extends LeaveCreateArgs>(args: SelectSubset<T, LeaveCreateArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Leaves.
     * @param {LeaveCreateManyArgs} args - Arguments to create many Leaves.
     * @example
     * // Create many Leaves
     * const leave = await prisma.leave.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveCreateManyArgs>(args?: SelectSubset<T, LeaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Leave.
     * @param {LeaveDeleteArgs} args - Arguments to delete one Leave.
     * @example
     * // Delete one Leave
     * const Leave = await prisma.leave.delete({
     *   where: {
     *     // ... filter to delete one Leave
     *   }
     * })
     * 
     */
    delete<T extends LeaveDeleteArgs>(args: SelectSubset<T, LeaveDeleteArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Leave.
     * @param {LeaveUpdateArgs} args - Arguments to update one Leave.
     * @example
     * // Update one Leave
     * const leave = await prisma.leave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveUpdateArgs>(args: SelectSubset<T, LeaveUpdateArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Leaves.
     * @param {LeaveDeleteManyArgs} args - Arguments to filter Leaves to delete.
     * @example
     * // Delete a few Leaves
     * const { count } = await prisma.leave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveDeleteManyArgs>(args?: SelectSubset<T, LeaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leaves
     * const leave = await prisma.leave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveUpdateManyArgs>(args: SelectSubset<T, LeaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Leave.
     * @param {LeaveUpsertArgs} args - Arguments to update or create a Leave.
     * @example
     * // Update or create a Leave
     * const leave = await prisma.leave.upsert({
     *   create: {
     *     // ... data to create a Leave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leave we want to update
     *   }
     * })
     */
    upsert<T extends LeaveUpsertArgs>(args: SelectSubset<T, LeaveUpsertArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Leaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveCountArgs} args - Arguments to filter Leaves to count.
     * @example
     * // Count the number of Leaves
     * const count = await prisma.leave.count({
     *   where: {
     *     // ... the filter for the Leaves we want to count
     *   }
     * })
    **/
    count<T extends LeaveCountArgs>(
      args?: Subset<T, LeaveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveAggregateArgs>(args: Subset<T, LeaveAggregateArgs>): Prisma.PrismaPromise<GetLeaveAggregateType<T>>

    /**
     * Group by Leave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveGroupByArgs['orderBy'] }
        : { orderBy?: LeaveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Leave model
   */
  readonly fields: LeaveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Leave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reviewer<T extends Leave$reviewerArgs<ExtArgs> = {}>(args?: Subset<T, Leave$reviewerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Leave model
   */ 
  interface LeaveFieldRefs {
    readonly id: FieldRef<"Leave", 'Int'>
    readonly employeeId: FieldRef<"Leave", 'Int'>
    readonly startDate: FieldRef<"Leave", 'DateTime'>
    readonly endDate: FieldRef<"Leave", 'DateTime'>
    readonly type: FieldRef<"Leave", 'String'>
    readonly reason: FieldRef<"Leave", 'String'>
    readonly status: FieldRef<"Leave", 'String'>
    readonly createdAt: FieldRef<"Leave", 'DateTime'>
    readonly updatedAt: FieldRef<"Leave", 'DateTime'>
    readonly adminComment: FieldRef<"Leave", 'String'>
    readonly reviewedAt: FieldRef<"Leave", 'DateTime'>
    readonly reviewedBy: FieldRef<"Leave", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Leave findUnique
   */
  export type LeaveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where: LeaveWhereUniqueInput
  }

  /**
   * Leave findUniqueOrThrow
   */
  export type LeaveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where: LeaveWhereUniqueInput
  }

  /**
   * Leave findFirst
   */
  export type LeaveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leaves.
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leaves.
     */
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }

  /**
   * Leave findFirstOrThrow
   */
  export type LeaveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leaves.
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leaves.
     */
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }

  /**
   * Leave findMany
   */
  export type LeaveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leaves to fetch.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leaves.
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }

  /**
   * Leave create
   */
  export type LeaveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * The data needed to create a Leave.
     */
    data: XOR<LeaveCreateInput, LeaveUncheckedCreateInput>
  }

  /**
   * Leave createMany
   */
  export type LeaveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leaves.
     */
    data: LeaveCreateManyInput | LeaveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Leave update
   */
  export type LeaveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * The data needed to update a Leave.
     */
    data: XOR<LeaveUpdateInput, LeaveUncheckedUpdateInput>
    /**
     * Choose, which Leave to update.
     */
    where: LeaveWhereUniqueInput
  }

  /**
   * Leave updateMany
   */
  export type LeaveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leaves.
     */
    data: XOR<LeaveUpdateManyMutationInput, LeaveUncheckedUpdateManyInput>
    /**
     * Filter which Leaves to update
     */
    where?: LeaveWhereInput
  }

  /**
   * Leave upsert
   */
  export type LeaveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * The filter to search for the Leave to update in case it exists.
     */
    where: LeaveWhereUniqueInput
    /**
     * In case the Leave found by the `where` argument doesn't exist, create a new Leave with this data.
     */
    create: XOR<LeaveCreateInput, LeaveUncheckedCreateInput>
    /**
     * In case the Leave was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveUpdateInput, LeaveUncheckedUpdateInput>
  }

  /**
   * Leave delete
   */
  export type LeaveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter which Leave to delete.
     */
    where: LeaveWhereUniqueInput
  }

  /**
   * Leave deleteMany
   */
  export type LeaveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leaves to delete
     */
    where?: LeaveWhereInput
  }

  /**
   * Leave.reviewer
   */
  export type Leave$reviewerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Leave without action
   */
  export type LeaveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
  }


  /**
   * Model EmployeeNote
   */

  export type AggregateEmployeeNote = {
    _count: EmployeeNoteCountAggregateOutputType | null
    _avg: EmployeeNoteAvgAggregateOutputType | null
    _sum: EmployeeNoteSumAggregateOutputType | null
    _min: EmployeeNoteMinAggregateOutputType | null
    _max: EmployeeNoteMaxAggregateOutputType | null
  }

  export type EmployeeNoteAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    createdBy: number | null
  }

  export type EmployeeNoteSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    createdBy: number | null
  }

  export type EmployeeNoteMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    type: string | null
    content: string | null
    priority: string | null
    createdBy: number | null
    createdAt: Date | null
  }

  export type EmployeeNoteMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    type: string | null
    content: string | null
    priority: string | null
    createdBy: number | null
    createdAt: Date | null
  }

  export type EmployeeNoteCountAggregateOutputType = {
    id: number
    employeeId: number
    type: number
    content: number
    priority: number
    createdBy: number
    createdAt: number
    _all: number
  }


  export type EmployeeNoteAvgAggregateInputType = {
    id?: true
    employeeId?: true
    createdBy?: true
  }

  export type EmployeeNoteSumAggregateInputType = {
    id?: true
    employeeId?: true
    createdBy?: true
  }

  export type EmployeeNoteMinAggregateInputType = {
    id?: true
    employeeId?: true
    type?: true
    content?: true
    priority?: true
    createdBy?: true
    createdAt?: true
  }

  export type EmployeeNoteMaxAggregateInputType = {
    id?: true
    employeeId?: true
    type?: true
    content?: true
    priority?: true
    createdBy?: true
    createdAt?: true
  }

  export type EmployeeNoteCountAggregateInputType = {
    id?: true
    employeeId?: true
    type?: true
    content?: true
    priority?: true
    createdBy?: true
    createdAt?: true
    _all?: true
  }

  export type EmployeeNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeNote to aggregate.
     */
    where?: EmployeeNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeNotes to fetch.
     */
    orderBy?: EmployeeNoteOrderByWithRelationInput | EmployeeNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeNotes
    **/
    _count?: true | EmployeeNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeNoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeNoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeNoteMaxAggregateInputType
  }

  export type GetEmployeeNoteAggregateType<T extends EmployeeNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeNote[P]>
      : GetScalarType<T[P], AggregateEmployeeNote[P]>
  }




  export type EmployeeNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeNoteWhereInput
    orderBy?: EmployeeNoteOrderByWithAggregationInput | EmployeeNoteOrderByWithAggregationInput[]
    by: EmployeeNoteScalarFieldEnum[] | EmployeeNoteScalarFieldEnum
    having?: EmployeeNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeNoteCountAggregateInputType | true
    _avg?: EmployeeNoteAvgAggregateInputType
    _sum?: EmployeeNoteSumAggregateInputType
    _min?: EmployeeNoteMinAggregateInputType
    _max?: EmployeeNoteMaxAggregateInputType
  }

  export type EmployeeNoteGroupByOutputType = {
    id: number
    employeeId: number
    type: string
    content: string
    priority: string
    createdBy: number
    createdAt: Date
    _count: EmployeeNoteCountAggregateOutputType | null
    _avg: EmployeeNoteAvgAggregateOutputType | null
    _sum: EmployeeNoteSumAggregateOutputType | null
    _min: EmployeeNoteMinAggregateOutputType | null
    _max: EmployeeNoteMaxAggregateOutputType | null
  }

  type GetEmployeeNoteGroupByPayload<T extends EmployeeNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeNoteGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeNoteGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    type?: boolean
    content?: boolean
    priority?: boolean
    createdBy?: boolean
    createdAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeNote"]>


  export type EmployeeNoteSelectScalar = {
    id?: boolean
    employeeId?: boolean
    type?: boolean
    content?: boolean
    priority?: boolean
    createdBy?: boolean
    createdAt?: boolean
  }

  export type EmployeeNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $EmployeeNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeNote"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      type: string
      content: string
      priority: string
      createdBy: number
      createdAt: Date
    }, ExtArgs["result"]["employeeNote"]>
    composites: {}
  }

  type EmployeeNoteGetPayload<S extends boolean | null | undefined | EmployeeNoteDefaultArgs> = $Result.GetResult<Prisma.$EmployeeNotePayload, S>

  type EmployeeNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeNoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeNoteCountAggregateInputType | true
    }

  export interface EmployeeNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeNote'], meta: { name: 'EmployeeNote' } }
    /**
     * Find zero or one EmployeeNote that matches the filter.
     * @param {EmployeeNoteFindUniqueArgs} args - Arguments to find a EmployeeNote
     * @example
     * // Get one EmployeeNote
     * const employeeNote = await prisma.employeeNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeNoteFindUniqueArgs>(args: SelectSubset<T, EmployeeNoteFindUniqueArgs<ExtArgs>>): Prisma__EmployeeNoteClient<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmployeeNote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeNoteFindUniqueOrThrowArgs} args - Arguments to find a EmployeeNote
     * @example
     * // Get one EmployeeNote
     * const employeeNote = await prisma.employeeNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeNoteClient<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmployeeNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeNoteFindFirstArgs} args - Arguments to find a EmployeeNote
     * @example
     * // Get one EmployeeNote
     * const employeeNote = await prisma.employeeNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeNoteFindFirstArgs>(args?: SelectSubset<T, EmployeeNoteFindFirstArgs<ExtArgs>>): Prisma__EmployeeNoteClient<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmployeeNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeNoteFindFirstOrThrowArgs} args - Arguments to find a EmployeeNote
     * @example
     * // Get one EmployeeNote
     * const employeeNote = await prisma.employeeNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeNoteClient<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmployeeNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeNotes
     * const employeeNotes = await prisma.employeeNote.findMany()
     * 
     * // Get first 10 EmployeeNotes
     * const employeeNotes = await prisma.employeeNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeNoteWithIdOnly = await prisma.employeeNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeNoteFindManyArgs>(args?: SelectSubset<T, EmployeeNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmployeeNote.
     * @param {EmployeeNoteCreateArgs} args - Arguments to create a EmployeeNote.
     * @example
     * // Create one EmployeeNote
     * const EmployeeNote = await prisma.employeeNote.create({
     *   data: {
     *     // ... data to create a EmployeeNote
     *   }
     * })
     * 
     */
    create<T extends EmployeeNoteCreateArgs>(args: SelectSubset<T, EmployeeNoteCreateArgs<ExtArgs>>): Prisma__EmployeeNoteClient<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmployeeNotes.
     * @param {EmployeeNoteCreateManyArgs} args - Arguments to create many EmployeeNotes.
     * @example
     * // Create many EmployeeNotes
     * const employeeNote = await prisma.employeeNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeNoteCreateManyArgs>(args?: SelectSubset<T, EmployeeNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmployeeNote.
     * @param {EmployeeNoteDeleteArgs} args - Arguments to delete one EmployeeNote.
     * @example
     * // Delete one EmployeeNote
     * const EmployeeNote = await prisma.employeeNote.delete({
     *   where: {
     *     // ... filter to delete one EmployeeNote
     *   }
     * })
     * 
     */
    delete<T extends EmployeeNoteDeleteArgs>(args: SelectSubset<T, EmployeeNoteDeleteArgs<ExtArgs>>): Prisma__EmployeeNoteClient<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmployeeNote.
     * @param {EmployeeNoteUpdateArgs} args - Arguments to update one EmployeeNote.
     * @example
     * // Update one EmployeeNote
     * const employeeNote = await prisma.employeeNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeNoteUpdateArgs>(args: SelectSubset<T, EmployeeNoteUpdateArgs<ExtArgs>>): Prisma__EmployeeNoteClient<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmployeeNotes.
     * @param {EmployeeNoteDeleteManyArgs} args - Arguments to filter EmployeeNotes to delete.
     * @example
     * // Delete a few EmployeeNotes
     * const { count } = await prisma.employeeNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeNoteDeleteManyArgs>(args?: SelectSubset<T, EmployeeNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeNotes
     * const employeeNote = await prisma.employeeNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeNoteUpdateManyArgs>(args: SelectSubset<T, EmployeeNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployeeNote.
     * @param {EmployeeNoteUpsertArgs} args - Arguments to update or create a EmployeeNote.
     * @example
     * // Update or create a EmployeeNote
     * const employeeNote = await prisma.employeeNote.upsert({
     *   create: {
     *     // ... data to create a EmployeeNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeNote we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeNoteUpsertArgs>(args: SelectSubset<T, EmployeeNoteUpsertArgs<ExtArgs>>): Prisma__EmployeeNoteClient<$Result.GetResult<Prisma.$EmployeeNotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmployeeNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeNoteCountArgs} args - Arguments to filter EmployeeNotes to count.
     * @example
     * // Count the number of EmployeeNotes
     * const count = await prisma.employeeNote.count({
     *   where: {
     *     // ... the filter for the EmployeeNotes we want to count
     *   }
     * })
    **/
    count<T extends EmployeeNoteCountArgs>(
      args?: Subset<T, EmployeeNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeNoteAggregateArgs>(args: Subset<T, EmployeeNoteAggregateArgs>): Prisma.PrismaPromise<GetEmployeeNoteAggregateType<T>>

    /**
     * Group by EmployeeNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeNoteGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeNote model
   */
  readonly fields: EmployeeNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeNote model
   */ 
  interface EmployeeNoteFieldRefs {
    readonly id: FieldRef<"EmployeeNote", 'Int'>
    readonly employeeId: FieldRef<"EmployeeNote", 'Int'>
    readonly type: FieldRef<"EmployeeNote", 'String'>
    readonly content: FieldRef<"EmployeeNote", 'String'>
    readonly priority: FieldRef<"EmployeeNote", 'String'>
    readonly createdBy: FieldRef<"EmployeeNote", 'Int'>
    readonly createdAt: FieldRef<"EmployeeNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeNote findUnique
   */
  export type EmployeeNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeNote to fetch.
     */
    where: EmployeeNoteWhereUniqueInput
  }

  /**
   * EmployeeNote findUniqueOrThrow
   */
  export type EmployeeNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeNote to fetch.
     */
    where: EmployeeNoteWhereUniqueInput
  }

  /**
   * EmployeeNote findFirst
   */
  export type EmployeeNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeNote to fetch.
     */
    where?: EmployeeNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeNotes to fetch.
     */
    orderBy?: EmployeeNoteOrderByWithRelationInput | EmployeeNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeNotes.
     */
    cursor?: EmployeeNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeNotes.
     */
    distinct?: EmployeeNoteScalarFieldEnum | EmployeeNoteScalarFieldEnum[]
  }

  /**
   * EmployeeNote findFirstOrThrow
   */
  export type EmployeeNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeNote to fetch.
     */
    where?: EmployeeNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeNotes to fetch.
     */
    orderBy?: EmployeeNoteOrderByWithRelationInput | EmployeeNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeNotes.
     */
    cursor?: EmployeeNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeNotes.
     */
    distinct?: EmployeeNoteScalarFieldEnum | EmployeeNoteScalarFieldEnum[]
  }

  /**
   * EmployeeNote findMany
   */
  export type EmployeeNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeNotes to fetch.
     */
    where?: EmployeeNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeNotes to fetch.
     */
    orderBy?: EmployeeNoteOrderByWithRelationInput | EmployeeNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeNotes.
     */
    cursor?: EmployeeNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeNotes.
     */
    skip?: number
    distinct?: EmployeeNoteScalarFieldEnum | EmployeeNoteScalarFieldEnum[]
  }

  /**
   * EmployeeNote create
   */
  export type EmployeeNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployeeNote.
     */
    data: XOR<EmployeeNoteCreateInput, EmployeeNoteUncheckedCreateInput>
  }

  /**
   * EmployeeNote createMany
   */
  export type EmployeeNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeNotes.
     */
    data: EmployeeNoteCreateManyInput | EmployeeNoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployeeNote update
   */
  export type EmployeeNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployeeNote.
     */
    data: XOR<EmployeeNoteUpdateInput, EmployeeNoteUncheckedUpdateInput>
    /**
     * Choose, which EmployeeNote to update.
     */
    where: EmployeeNoteWhereUniqueInput
  }

  /**
   * EmployeeNote updateMany
   */
  export type EmployeeNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeNotes.
     */
    data: XOR<EmployeeNoteUpdateManyMutationInput, EmployeeNoteUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeNotes to update
     */
    where?: EmployeeNoteWhereInput
  }

  /**
   * EmployeeNote upsert
   */
  export type EmployeeNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployeeNote to update in case it exists.
     */
    where: EmployeeNoteWhereUniqueInput
    /**
     * In case the EmployeeNote found by the `where` argument doesn't exist, create a new EmployeeNote with this data.
     */
    create: XOR<EmployeeNoteCreateInput, EmployeeNoteUncheckedCreateInput>
    /**
     * In case the EmployeeNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeNoteUpdateInput, EmployeeNoteUncheckedUpdateInput>
  }

  /**
   * EmployeeNote delete
   */
  export type EmployeeNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
    /**
     * Filter which EmployeeNote to delete.
     */
    where: EmployeeNoteWhereUniqueInput
  }

  /**
   * EmployeeNote deleteMany
   */
  export type EmployeeNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeNotes to delete
     */
    where?: EmployeeNoteWhereInput
  }

  /**
   * EmployeeNote without action
   */
  export type EmployeeNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeNote
     */
    select?: EmployeeNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeNoteInclude<ExtArgs> | null
  }


  /**
   * Model EmployeeChemistry
   */

  export type AggregateEmployeeChemistry = {
    _count: EmployeeChemistryCountAggregateOutputType | null
    _avg: EmployeeChemistryAvgAggregateOutputType | null
    _sum: EmployeeChemistrySumAggregateOutputType | null
    _min: EmployeeChemistryMinAggregateOutputType | null
    _max: EmployeeChemistryMaxAggregateOutputType | null
  }

  export type EmployeeChemistryAvgAggregateOutputType = {
    id: number | null
    employee1Id: number | null
    employee2Id: number | null
    score: number | null
  }

  export type EmployeeChemistrySumAggregateOutputType = {
    id: number | null
    employee1Id: number | null
    employee2Id: number | null
    score: number | null
  }

  export type EmployeeChemistryMinAggregateOutputType = {
    id: number | null
    employee1Id: number | null
    employee2Id: number | null
    score: number | null
  }

  export type EmployeeChemistryMaxAggregateOutputType = {
    id: number | null
    employee1Id: number | null
    employee2Id: number | null
    score: number | null
  }

  export type EmployeeChemistryCountAggregateOutputType = {
    id: number
    employee1Id: number
    employee2Id: number
    score: number
    _all: number
  }


  export type EmployeeChemistryAvgAggregateInputType = {
    id?: true
    employee1Id?: true
    employee2Id?: true
    score?: true
  }

  export type EmployeeChemistrySumAggregateInputType = {
    id?: true
    employee1Id?: true
    employee2Id?: true
    score?: true
  }

  export type EmployeeChemistryMinAggregateInputType = {
    id?: true
    employee1Id?: true
    employee2Id?: true
    score?: true
  }

  export type EmployeeChemistryMaxAggregateInputType = {
    id?: true
    employee1Id?: true
    employee2Id?: true
    score?: true
  }

  export type EmployeeChemistryCountAggregateInputType = {
    id?: true
    employee1Id?: true
    employee2Id?: true
    score?: true
    _all?: true
  }

  export type EmployeeChemistryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeChemistry to aggregate.
     */
    where?: EmployeeChemistryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeChemistries to fetch.
     */
    orderBy?: EmployeeChemistryOrderByWithRelationInput | EmployeeChemistryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeChemistryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeChemistries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeChemistries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeChemistries
    **/
    _count?: true | EmployeeChemistryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeChemistryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeChemistrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeChemistryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeChemistryMaxAggregateInputType
  }

  export type GetEmployeeChemistryAggregateType<T extends EmployeeChemistryAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeChemistry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeChemistry[P]>
      : GetScalarType<T[P], AggregateEmployeeChemistry[P]>
  }




  export type EmployeeChemistryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeChemistryWhereInput
    orderBy?: EmployeeChemistryOrderByWithAggregationInput | EmployeeChemistryOrderByWithAggregationInput[]
    by: EmployeeChemistryScalarFieldEnum[] | EmployeeChemistryScalarFieldEnum
    having?: EmployeeChemistryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeChemistryCountAggregateInputType | true
    _avg?: EmployeeChemistryAvgAggregateInputType
    _sum?: EmployeeChemistrySumAggregateInputType
    _min?: EmployeeChemistryMinAggregateInputType
    _max?: EmployeeChemistryMaxAggregateInputType
  }

  export type EmployeeChemistryGroupByOutputType = {
    id: number
    employee1Id: number
    employee2Id: number
    score: number
    _count: EmployeeChemistryCountAggregateOutputType | null
    _avg: EmployeeChemistryAvgAggregateOutputType | null
    _sum: EmployeeChemistrySumAggregateOutputType | null
    _min: EmployeeChemistryMinAggregateOutputType | null
    _max: EmployeeChemistryMaxAggregateOutputType | null
  }

  type GetEmployeeChemistryGroupByPayload<T extends EmployeeChemistryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeChemistryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeChemistryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeChemistryGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeChemistryGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeChemistrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employee1Id?: boolean
    employee2Id?: boolean
    score?: boolean
    employee1?: boolean | EmployeeDefaultArgs<ExtArgs>
    employee2?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeChemistry"]>


  export type EmployeeChemistrySelectScalar = {
    id?: boolean
    employee1Id?: boolean
    employee2Id?: boolean
    score?: boolean
  }

  export type EmployeeChemistryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee1?: boolean | EmployeeDefaultArgs<ExtArgs>
    employee2?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $EmployeeChemistryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeChemistry"
    objects: {
      employee1: Prisma.$EmployeePayload<ExtArgs>
      employee2: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employee1Id: number
      employee2Id: number
      score: number
    }, ExtArgs["result"]["employeeChemistry"]>
    composites: {}
  }

  type EmployeeChemistryGetPayload<S extends boolean | null | undefined | EmployeeChemistryDefaultArgs> = $Result.GetResult<Prisma.$EmployeeChemistryPayload, S>

  type EmployeeChemistryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeChemistryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeChemistryCountAggregateInputType | true
    }

  export interface EmployeeChemistryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeChemistry'], meta: { name: 'EmployeeChemistry' } }
    /**
     * Find zero or one EmployeeChemistry that matches the filter.
     * @param {EmployeeChemistryFindUniqueArgs} args - Arguments to find a EmployeeChemistry
     * @example
     * // Get one EmployeeChemistry
     * const employeeChemistry = await prisma.employeeChemistry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeChemistryFindUniqueArgs>(args: SelectSubset<T, EmployeeChemistryFindUniqueArgs<ExtArgs>>): Prisma__EmployeeChemistryClient<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmployeeChemistry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeChemistryFindUniqueOrThrowArgs} args - Arguments to find a EmployeeChemistry
     * @example
     * // Get one EmployeeChemistry
     * const employeeChemistry = await prisma.employeeChemistry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeChemistryFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeChemistryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeChemistryClient<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmployeeChemistry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeChemistryFindFirstArgs} args - Arguments to find a EmployeeChemistry
     * @example
     * // Get one EmployeeChemistry
     * const employeeChemistry = await prisma.employeeChemistry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeChemistryFindFirstArgs>(args?: SelectSubset<T, EmployeeChemistryFindFirstArgs<ExtArgs>>): Prisma__EmployeeChemistryClient<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmployeeChemistry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeChemistryFindFirstOrThrowArgs} args - Arguments to find a EmployeeChemistry
     * @example
     * // Get one EmployeeChemistry
     * const employeeChemistry = await prisma.employeeChemistry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeChemistryFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeChemistryFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeChemistryClient<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmployeeChemistries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeChemistryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeChemistries
     * const employeeChemistries = await prisma.employeeChemistry.findMany()
     * 
     * // Get first 10 EmployeeChemistries
     * const employeeChemistries = await prisma.employeeChemistry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeChemistryWithIdOnly = await prisma.employeeChemistry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeChemistryFindManyArgs>(args?: SelectSubset<T, EmployeeChemistryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmployeeChemistry.
     * @param {EmployeeChemistryCreateArgs} args - Arguments to create a EmployeeChemistry.
     * @example
     * // Create one EmployeeChemistry
     * const EmployeeChemistry = await prisma.employeeChemistry.create({
     *   data: {
     *     // ... data to create a EmployeeChemistry
     *   }
     * })
     * 
     */
    create<T extends EmployeeChemistryCreateArgs>(args: SelectSubset<T, EmployeeChemistryCreateArgs<ExtArgs>>): Prisma__EmployeeChemistryClient<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmployeeChemistries.
     * @param {EmployeeChemistryCreateManyArgs} args - Arguments to create many EmployeeChemistries.
     * @example
     * // Create many EmployeeChemistries
     * const employeeChemistry = await prisma.employeeChemistry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeChemistryCreateManyArgs>(args?: SelectSubset<T, EmployeeChemistryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmployeeChemistry.
     * @param {EmployeeChemistryDeleteArgs} args - Arguments to delete one EmployeeChemistry.
     * @example
     * // Delete one EmployeeChemistry
     * const EmployeeChemistry = await prisma.employeeChemistry.delete({
     *   where: {
     *     // ... filter to delete one EmployeeChemistry
     *   }
     * })
     * 
     */
    delete<T extends EmployeeChemistryDeleteArgs>(args: SelectSubset<T, EmployeeChemistryDeleteArgs<ExtArgs>>): Prisma__EmployeeChemistryClient<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmployeeChemistry.
     * @param {EmployeeChemistryUpdateArgs} args - Arguments to update one EmployeeChemistry.
     * @example
     * // Update one EmployeeChemistry
     * const employeeChemistry = await prisma.employeeChemistry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeChemistryUpdateArgs>(args: SelectSubset<T, EmployeeChemistryUpdateArgs<ExtArgs>>): Prisma__EmployeeChemistryClient<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmployeeChemistries.
     * @param {EmployeeChemistryDeleteManyArgs} args - Arguments to filter EmployeeChemistries to delete.
     * @example
     * // Delete a few EmployeeChemistries
     * const { count } = await prisma.employeeChemistry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeChemistryDeleteManyArgs>(args?: SelectSubset<T, EmployeeChemistryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeChemistries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeChemistryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeChemistries
     * const employeeChemistry = await prisma.employeeChemistry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeChemistryUpdateManyArgs>(args: SelectSubset<T, EmployeeChemistryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployeeChemistry.
     * @param {EmployeeChemistryUpsertArgs} args - Arguments to update or create a EmployeeChemistry.
     * @example
     * // Update or create a EmployeeChemistry
     * const employeeChemistry = await prisma.employeeChemistry.upsert({
     *   create: {
     *     // ... data to create a EmployeeChemistry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeChemistry we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeChemistryUpsertArgs>(args: SelectSubset<T, EmployeeChemistryUpsertArgs<ExtArgs>>): Prisma__EmployeeChemistryClient<$Result.GetResult<Prisma.$EmployeeChemistryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmployeeChemistries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeChemistryCountArgs} args - Arguments to filter EmployeeChemistries to count.
     * @example
     * // Count the number of EmployeeChemistries
     * const count = await prisma.employeeChemistry.count({
     *   where: {
     *     // ... the filter for the EmployeeChemistries we want to count
     *   }
     * })
    **/
    count<T extends EmployeeChemistryCountArgs>(
      args?: Subset<T, EmployeeChemistryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeChemistryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeChemistry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeChemistryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeChemistryAggregateArgs>(args: Subset<T, EmployeeChemistryAggregateArgs>): Prisma.PrismaPromise<GetEmployeeChemistryAggregateType<T>>

    /**
     * Group by EmployeeChemistry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeChemistryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeChemistryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeChemistryGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeChemistryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeChemistryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeChemistryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeChemistry model
   */
  readonly fields: EmployeeChemistryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeChemistry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeChemistryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee1<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    employee2<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeChemistry model
   */ 
  interface EmployeeChemistryFieldRefs {
    readonly id: FieldRef<"EmployeeChemistry", 'Int'>
    readonly employee1Id: FieldRef<"EmployeeChemistry", 'Int'>
    readonly employee2Id: FieldRef<"EmployeeChemistry", 'Int'>
    readonly score: FieldRef<"EmployeeChemistry", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeChemistry findUnique
   */
  export type EmployeeChemistryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeChemistry to fetch.
     */
    where: EmployeeChemistryWhereUniqueInput
  }

  /**
   * EmployeeChemistry findUniqueOrThrow
   */
  export type EmployeeChemistryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeChemistry to fetch.
     */
    where: EmployeeChemistryWhereUniqueInput
  }

  /**
   * EmployeeChemistry findFirst
   */
  export type EmployeeChemistryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeChemistry to fetch.
     */
    where?: EmployeeChemistryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeChemistries to fetch.
     */
    orderBy?: EmployeeChemistryOrderByWithRelationInput | EmployeeChemistryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeChemistries.
     */
    cursor?: EmployeeChemistryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeChemistries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeChemistries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeChemistries.
     */
    distinct?: EmployeeChemistryScalarFieldEnum | EmployeeChemistryScalarFieldEnum[]
  }

  /**
   * EmployeeChemistry findFirstOrThrow
   */
  export type EmployeeChemistryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeChemistry to fetch.
     */
    where?: EmployeeChemistryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeChemistries to fetch.
     */
    orderBy?: EmployeeChemistryOrderByWithRelationInput | EmployeeChemistryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeChemistries.
     */
    cursor?: EmployeeChemistryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeChemistries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeChemistries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeChemistries.
     */
    distinct?: EmployeeChemistryScalarFieldEnum | EmployeeChemistryScalarFieldEnum[]
  }

  /**
   * EmployeeChemistry findMany
   */
  export type EmployeeChemistryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeChemistries to fetch.
     */
    where?: EmployeeChemistryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeChemistries to fetch.
     */
    orderBy?: EmployeeChemistryOrderByWithRelationInput | EmployeeChemistryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeChemistries.
     */
    cursor?: EmployeeChemistryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeChemistries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeChemistries.
     */
    skip?: number
    distinct?: EmployeeChemistryScalarFieldEnum | EmployeeChemistryScalarFieldEnum[]
  }

  /**
   * EmployeeChemistry create
   */
  export type EmployeeChemistryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployeeChemistry.
     */
    data: XOR<EmployeeChemistryCreateInput, EmployeeChemistryUncheckedCreateInput>
  }

  /**
   * EmployeeChemistry createMany
   */
  export type EmployeeChemistryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeChemistries.
     */
    data: EmployeeChemistryCreateManyInput | EmployeeChemistryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployeeChemistry update
   */
  export type EmployeeChemistryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployeeChemistry.
     */
    data: XOR<EmployeeChemistryUpdateInput, EmployeeChemistryUncheckedUpdateInput>
    /**
     * Choose, which EmployeeChemistry to update.
     */
    where: EmployeeChemistryWhereUniqueInput
  }

  /**
   * EmployeeChemistry updateMany
   */
  export type EmployeeChemistryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeChemistries.
     */
    data: XOR<EmployeeChemistryUpdateManyMutationInput, EmployeeChemistryUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeChemistries to update
     */
    where?: EmployeeChemistryWhereInput
  }

  /**
   * EmployeeChemistry upsert
   */
  export type EmployeeChemistryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployeeChemistry to update in case it exists.
     */
    where: EmployeeChemistryWhereUniqueInput
    /**
     * In case the EmployeeChemistry found by the `where` argument doesn't exist, create a new EmployeeChemistry with this data.
     */
    create: XOR<EmployeeChemistryCreateInput, EmployeeChemistryUncheckedCreateInput>
    /**
     * In case the EmployeeChemistry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeChemistryUpdateInput, EmployeeChemistryUncheckedUpdateInput>
  }

  /**
   * EmployeeChemistry delete
   */
  export type EmployeeChemistryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
    /**
     * Filter which EmployeeChemistry to delete.
     */
    where: EmployeeChemistryWhereUniqueInput
  }

  /**
   * EmployeeChemistry deleteMany
   */
  export type EmployeeChemistryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeChemistries to delete
     */
    where?: EmployeeChemistryWhereInput
  }

  /**
   * EmployeeChemistry without action
   */
  export type EmployeeChemistryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeChemistry
     */
    select?: EmployeeChemistrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeChemistryInclude<ExtArgs> | null
  }


  /**
   * Model Notice
   */

  export type AggregateNotice = {
    _count: NoticeCountAggregateOutputType | null
    _avg: NoticeAvgAggregateOutputType | null
    _sum: NoticeSumAggregateOutputType | null
    _min: NoticeMinAggregateOutputType | null
    _max: NoticeMaxAggregateOutputType | null
  }

  export type NoticeAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
  }

  export type NoticeSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
  }

  export type NoticeMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    type: string | null
    priority: string | null
    isPinned: boolean | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
  }

  export type NoticeMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    type: string | null
    priority: string | null
    isPinned: boolean | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    expiresAt: Date | null
  }

  export type NoticeCountAggregateOutputType = {
    id: number
    title: number
    content: number
    type: number
    priority: number
    isPinned: number
    createdBy: number
    createdAt: number
    updatedAt: number
    expiresAt: number
    _all: number
  }


  export type NoticeAvgAggregateInputType = {
    id?: true
    createdBy?: true
  }

  export type NoticeSumAggregateInputType = {
    id?: true
    createdBy?: true
  }

  export type NoticeMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    type?: true
    priority?: true
    isPinned?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
  }

  export type NoticeMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    type?: true
    priority?: true
    isPinned?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
  }

  export type NoticeCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    type?: true
    priority?: true
    isPinned?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    expiresAt?: true
    _all?: true
  }

  export type NoticeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notice to aggregate.
     */
    where?: NoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notices to fetch.
     */
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notices
    **/
    _count?: true | NoticeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoticeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoticeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticeMaxAggregateInputType
  }

  export type GetNoticeAggregateType<T extends NoticeAggregateArgs> = {
        [P in keyof T & keyof AggregateNotice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotice[P]>
      : GetScalarType<T[P], AggregateNotice[P]>
  }




  export type NoticeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticeWhereInput
    orderBy?: NoticeOrderByWithAggregationInput | NoticeOrderByWithAggregationInput[]
    by: NoticeScalarFieldEnum[] | NoticeScalarFieldEnum
    having?: NoticeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticeCountAggregateInputType | true
    _avg?: NoticeAvgAggregateInputType
    _sum?: NoticeSumAggregateInputType
    _min?: NoticeMinAggregateInputType
    _max?: NoticeMaxAggregateInputType
  }

  export type NoticeGroupByOutputType = {
    id: number
    title: string
    content: string
    type: string
    priority: string
    isPinned: boolean
    createdBy: number
    createdAt: Date
    updatedAt: Date
    expiresAt: Date | null
    _count: NoticeCountAggregateOutputType | null
    _avg: NoticeAvgAggregateOutputType | null
    _sum: NoticeSumAggregateOutputType | null
    _min: NoticeMinAggregateOutputType | null
    _max: NoticeMaxAggregateOutputType | null
  }

  type GetNoticeGroupByPayload<T extends NoticeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoticeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticeGroupByOutputType[P]>
            : GetScalarType<T[P], NoticeGroupByOutputType[P]>
        }
      >
    >


  export type NoticeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    type?: boolean
    priority?: boolean
    isPinned?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
    readByUsers?: boolean | Notice$readByUsersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | NoticeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notice"]>


  export type NoticeSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    type?: boolean
    priority?: boolean
    isPinned?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiresAt?: boolean
  }

  export type NoticeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    readByUsers?: boolean | Notice$readByUsersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | NoticeCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $NoticePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notice"
    objects: {
      readByUsers: Prisma.$NoticeReadPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      content: string
      type: string
      priority: string
      isPinned: boolean
      createdBy: number
      createdAt: Date
      updatedAt: Date
      expiresAt: Date | null
    }, ExtArgs["result"]["notice"]>
    composites: {}
  }

  type NoticeGetPayload<S extends boolean | null | undefined | NoticeDefaultArgs> = $Result.GetResult<Prisma.$NoticePayload, S>

  type NoticeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoticeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NoticeCountAggregateInputType | true
    }

  export interface NoticeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notice'], meta: { name: 'Notice' } }
    /**
     * Find zero or one Notice that matches the filter.
     * @param {NoticeFindUniqueArgs} args - Arguments to find a Notice
     * @example
     * // Get one Notice
     * const notice = await prisma.notice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoticeFindUniqueArgs>(args: SelectSubset<T, NoticeFindUniqueArgs<ExtArgs>>): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notice that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NoticeFindUniqueOrThrowArgs} args - Arguments to find a Notice
     * @example
     * // Get one Notice
     * const notice = await prisma.notice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoticeFindUniqueOrThrowArgs>(args: SelectSubset<T, NoticeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeFindFirstArgs} args - Arguments to find a Notice
     * @example
     * // Get one Notice
     * const notice = await prisma.notice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoticeFindFirstArgs>(args?: SelectSubset<T, NoticeFindFirstArgs<ExtArgs>>): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeFindFirstOrThrowArgs} args - Arguments to find a Notice
     * @example
     * // Get one Notice
     * const notice = await prisma.notice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoticeFindFirstOrThrowArgs>(args?: SelectSubset<T, NoticeFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notices
     * const notices = await prisma.notice.findMany()
     * 
     * // Get first 10 Notices
     * const notices = await prisma.notice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noticeWithIdOnly = await prisma.notice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoticeFindManyArgs>(args?: SelectSubset<T, NoticeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notice.
     * @param {NoticeCreateArgs} args - Arguments to create a Notice.
     * @example
     * // Create one Notice
     * const Notice = await prisma.notice.create({
     *   data: {
     *     // ... data to create a Notice
     *   }
     * })
     * 
     */
    create<T extends NoticeCreateArgs>(args: SelectSubset<T, NoticeCreateArgs<ExtArgs>>): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notices.
     * @param {NoticeCreateManyArgs} args - Arguments to create many Notices.
     * @example
     * // Create many Notices
     * const notice = await prisma.notice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoticeCreateManyArgs>(args?: SelectSubset<T, NoticeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notice.
     * @param {NoticeDeleteArgs} args - Arguments to delete one Notice.
     * @example
     * // Delete one Notice
     * const Notice = await prisma.notice.delete({
     *   where: {
     *     // ... filter to delete one Notice
     *   }
     * })
     * 
     */
    delete<T extends NoticeDeleteArgs>(args: SelectSubset<T, NoticeDeleteArgs<ExtArgs>>): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notice.
     * @param {NoticeUpdateArgs} args - Arguments to update one Notice.
     * @example
     * // Update one Notice
     * const notice = await prisma.notice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoticeUpdateArgs>(args: SelectSubset<T, NoticeUpdateArgs<ExtArgs>>): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notices.
     * @param {NoticeDeleteManyArgs} args - Arguments to filter Notices to delete.
     * @example
     * // Delete a few Notices
     * const { count } = await prisma.notice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoticeDeleteManyArgs>(args?: SelectSubset<T, NoticeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notices
     * const notice = await prisma.notice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoticeUpdateManyArgs>(args: SelectSubset<T, NoticeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notice.
     * @param {NoticeUpsertArgs} args - Arguments to update or create a Notice.
     * @example
     * // Update or create a Notice
     * const notice = await prisma.notice.upsert({
     *   create: {
     *     // ... data to create a Notice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notice we want to update
     *   }
     * })
     */
    upsert<T extends NoticeUpsertArgs>(args: SelectSubset<T, NoticeUpsertArgs<ExtArgs>>): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeCountArgs} args - Arguments to filter Notices to count.
     * @example
     * // Count the number of Notices
     * const count = await prisma.notice.count({
     *   where: {
     *     // ... the filter for the Notices we want to count
     *   }
     * })
    **/
    count<T extends NoticeCountArgs>(
      args?: Subset<T, NoticeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticeAggregateArgs>(args: Subset<T, NoticeAggregateArgs>): Prisma.PrismaPromise<GetNoticeAggregateType<T>>

    /**
     * Group by Notice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoticeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoticeGroupByArgs['orderBy'] }
        : { orderBy?: NoticeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notice model
   */
  readonly fields: NoticeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoticeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    readByUsers<T extends Notice$readByUsersArgs<ExtArgs> = {}>(args?: Subset<T, Notice$readByUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "findMany"> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notice model
   */ 
  interface NoticeFieldRefs {
    readonly id: FieldRef<"Notice", 'Int'>
    readonly title: FieldRef<"Notice", 'String'>
    readonly content: FieldRef<"Notice", 'String'>
    readonly type: FieldRef<"Notice", 'String'>
    readonly priority: FieldRef<"Notice", 'String'>
    readonly isPinned: FieldRef<"Notice", 'Boolean'>
    readonly createdBy: FieldRef<"Notice", 'Int'>
    readonly createdAt: FieldRef<"Notice", 'DateTime'>
    readonly updatedAt: FieldRef<"Notice", 'DateTime'>
    readonly expiresAt: FieldRef<"Notice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notice findUnique
   */
  export type NoticeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notice to fetch.
     */
    where: NoticeWhereUniqueInput
  }

  /**
   * Notice findUniqueOrThrow
   */
  export type NoticeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notice to fetch.
     */
    where: NoticeWhereUniqueInput
  }

  /**
   * Notice findFirst
   */
  export type NoticeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notice to fetch.
     */
    where?: NoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notices to fetch.
     */
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notices.
     */
    cursor?: NoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notices.
     */
    distinct?: NoticeScalarFieldEnum | NoticeScalarFieldEnum[]
  }

  /**
   * Notice findFirstOrThrow
   */
  export type NoticeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notice to fetch.
     */
    where?: NoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notices to fetch.
     */
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notices.
     */
    cursor?: NoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notices.
     */
    distinct?: NoticeScalarFieldEnum | NoticeScalarFieldEnum[]
  }

  /**
   * Notice findMany
   */
  export type NoticeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter, which Notices to fetch.
     */
    where?: NoticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notices to fetch.
     */
    orderBy?: NoticeOrderByWithRelationInput | NoticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notices.
     */
    cursor?: NoticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notices.
     */
    skip?: number
    distinct?: NoticeScalarFieldEnum | NoticeScalarFieldEnum[]
  }

  /**
   * Notice create
   */
  export type NoticeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * The data needed to create a Notice.
     */
    data: XOR<NoticeCreateInput, NoticeUncheckedCreateInput>
  }

  /**
   * Notice createMany
   */
  export type NoticeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notices.
     */
    data: NoticeCreateManyInput | NoticeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notice update
   */
  export type NoticeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * The data needed to update a Notice.
     */
    data: XOR<NoticeUpdateInput, NoticeUncheckedUpdateInput>
    /**
     * Choose, which Notice to update.
     */
    where: NoticeWhereUniqueInput
  }

  /**
   * Notice updateMany
   */
  export type NoticeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notices.
     */
    data: XOR<NoticeUpdateManyMutationInput, NoticeUncheckedUpdateManyInput>
    /**
     * Filter which Notices to update
     */
    where?: NoticeWhereInput
  }

  /**
   * Notice upsert
   */
  export type NoticeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * The filter to search for the Notice to update in case it exists.
     */
    where: NoticeWhereUniqueInput
    /**
     * In case the Notice found by the `where` argument doesn't exist, create a new Notice with this data.
     */
    create: XOR<NoticeCreateInput, NoticeUncheckedCreateInput>
    /**
     * In case the Notice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoticeUpdateInput, NoticeUncheckedUpdateInput>
  }

  /**
   * Notice delete
   */
  export type NoticeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
    /**
     * Filter which Notice to delete.
     */
    where: NoticeWhereUniqueInput
  }

  /**
   * Notice deleteMany
   */
  export type NoticeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notices to delete
     */
    where?: NoticeWhereInput
  }

  /**
   * Notice.readByUsers
   */
  export type Notice$readByUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    where?: NoticeReadWhereInput
    orderBy?: NoticeReadOrderByWithRelationInput | NoticeReadOrderByWithRelationInput[]
    cursor?: NoticeReadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoticeReadScalarFieldEnum | NoticeReadScalarFieldEnum[]
  }

  /**
   * Notice without action
   */
  export type NoticeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notice
     */
    select?: NoticeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeInclude<ExtArgs> | null
  }


  /**
   * Model NoticeRead
   */

  export type AggregateNoticeRead = {
    _count: NoticeReadCountAggregateOutputType | null
    _avg: NoticeReadAvgAggregateOutputType | null
    _sum: NoticeReadSumAggregateOutputType | null
    _min: NoticeReadMinAggregateOutputType | null
    _max: NoticeReadMaxAggregateOutputType | null
  }

  export type NoticeReadAvgAggregateOutputType = {
    id: number | null
    noticeId: number | null
    userId: number | null
  }

  export type NoticeReadSumAggregateOutputType = {
    id: number | null
    noticeId: number | null
    userId: number | null
  }

  export type NoticeReadMinAggregateOutputType = {
    id: number | null
    noticeId: number | null
    userId: number | null
    readAt: Date | null
  }

  export type NoticeReadMaxAggregateOutputType = {
    id: number | null
    noticeId: number | null
    userId: number | null
    readAt: Date | null
  }

  export type NoticeReadCountAggregateOutputType = {
    id: number
    noticeId: number
    userId: number
    readAt: number
    _all: number
  }


  export type NoticeReadAvgAggregateInputType = {
    id?: true
    noticeId?: true
    userId?: true
  }

  export type NoticeReadSumAggregateInputType = {
    id?: true
    noticeId?: true
    userId?: true
  }

  export type NoticeReadMinAggregateInputType = {
    id?: true
    noticeId?: true
    userId?: true
    readAt?: true
  }

  export type NoticeReadMaxAggregateInputType = {
    id?: true
    noticeId?: true
    userId?: true
    readAt?: true
  }

  export type NoticeReadCountAggregateInputType = {
    id?: true
    noticeId?: true
    userId?: true
    readAt?: true
    _all?: true
  }

  export type NoticeReadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticeRead to aggregate.
     */
    where?: NoticeReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeReads to fetch.
     */
    orderBy?: NoticeReadOrderByWithRelationInput | NoticeReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoticeReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeReads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NoticeReads
    **/
    _count?: true | NoticeReadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoticeReadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoticeReadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticeReadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticeReadMaxAggregateInputType
  }

  export type GetNoticeReadAggregateType<T extends NoticeReadAggregateArgs> = {
        [P in keyof T & keyof AggregateNoticeRead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNoticeRead[P]>
      : GetScalarType<T[P], AggregateNoticeRead[P]>
  }




  export type NoticeReadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticeReadWhereInput
    orderBy?: NoticeReadOrderByWithAggregationInput | NoticeReadOrderByWithAggregationInput[]
    by: NoticeReadScalarFieldEnum[] | NoticeReadScalarFieldEnum
    having?: NoticeReadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticeReadCountAggregateInputType | true
    _avg?: NoticeReadAvgAggregateInputType
    _sum?: NoticeReadSumAggregateInputType
    _min?: NoticeReadMinAggregateInputType
    _max?: NoticeReadMaxAggregateInputType
  }

  export type NoticeReadGroupByOutputType = {
    id: number
    noticeId: number
    userId: number
    readAt: Date
    _count: NoticeReadCountAggregateOutputType | null
    _avg: NoticeReadAvgAggregateOutputType | null
    _sum: NoticeReadSumAggregateOutputType | null
    _min: NoticeReadMinAggregateOutputType | null
    _max: NoticeReadMaxAggregateOutputType | null
  }

  type GetNoticeReadGroupByPayload<T extends NoticeReadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoticeReadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticeReadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticeReadGroupByOutputType[P]>
            : GetScalarType<T[P], NoticeReadGroupByOutputType[P]>
        }
      >
    >


  export type NoticeReadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noticeId?: boolean
    userId?: boolean
    readAt?: boolean
    notice?: boolean | NoticeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["noticeRead"]>


  export type NoticeReadSelectScalar = {
    id?: boolean
    noticeId?: boolean
    userId?: boolean
    readAt?: boolean
  }

  export type NoticeReadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notice?: boolean | NoticeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NoticeReadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NoticeRead"
    objects: {
      notice: Prisma.$NoticePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      noticeId: number
      userId: number
      readAt: Date
    }, ExtArgs["result"]["noticeRead"]>
    composites: {}
  }

  type NoticeReadGetPayload<S extends boolean | null | undefined | NoticeReadDefaultArgs> = $Result.GetResult<Prisma.$NoticeReadPayload, S>

  type NoticeReadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoticeReadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NoticeReadCountAggregateInputType | true
    }

  export interface NoticeReadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NoticeRead'], meta: { name: 'NoticeRead' } }
    /**
     * Find zero or one NoticeRead that matches the filter.
     * @param {NoticeReadFindUniqueArgs} args - Arguments to find a NoticeRead
     * @example
     * // Get one NoticeRead
     * const noticeRead = await prisma.noticeRead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoticeReadFindUniqueArgs>(args: SelectSubset<T, NoticeReadFindUniqueArgs<ExtArgs>>): Prisma__NoticeReadClient<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NoticeRead that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NoticeReadFindUniqueOrThrowArgs} args - Arguments to find a NoticeRead
     * @example
     * // Get one NoticeRead
     * const noticeRead = await prisma.noticeRead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoticeReadFindUniqueOrThrowArgs>(args: SelectSubset<T, NoticeReadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoticeReadClient<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NoticeRead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeReadFindFirstArgs} args - Arguments to find a NoticeRead
     * @example
     * // Get one NoticeRead
     * const noticeRead = await prisma.noticeRead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoticeReadFindFirstArgs>(args?: SelectSubset<T, NoticeReadFindFirstArgs<ExtArgs>>): Prisma__NoticeReadClient<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NoticeRead that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeReadFindFirstOrThrowArgs} args - Arguments to find a NoticeRead
     * @example
     * // Get one NoticeRead
     * const noticeRead = await prisma.noticeRead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoticeReadFindFirstOrThrowArgs>(args?: SelectSubset<T, NoticeReadFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoticeReadClient<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NoticeReads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeReadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NoticeReads
     * const noticeReads = await prisma.noticeRead.findMany()
     * 
     * // Get first 10 NoticeReads
     * const noticeReads = await prisma.noticeRead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noticeReadWithIdOnly = await prisma.noticeRead.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoticeReadFindManyArgs>(args?: SelectSubset<T, NoticeReadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NoticeRead.
     * @param {NoticeReadCreateArgs} args - Arguments to create a NoticeRead.
     * @example
     * // Create one NoticeRead
     * const NoticeRead = await prisma.noticeRead.create({
     *   data: {
     *     // ... data to create a NoticeRead
     *   }
     * })
     * 
     */
    create<T extends NoticeReadCreateArgs>(args: SelectSubset<T, NoticeReadCreateArgs<ExtArgs>>): Prisma__NoticeReadClient<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NoticeReads.
     * @param {NoticeReadCreateManyArgs} args - Arguments to create many NoticeReads.
     * @example
     * // Create many NoticeReads
     * const noticeRead = await prisma.noticeRead.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoticeReadCreateManyArgs>(args?: SelectSubset<T, NoticeReadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NoticeRead.
     * @param {NoticeReadDeleteArgs} args - Arguments to delete one NoticeRead.
     * @example
     * // Delete one NoticeRead
     * const NoticeRead = await prisma.noticeRead.delete({
     *   where: {
     *     // ... filter to delete one NoticeRead
     *   }
     * })
     * 
     */
    delete<T extends NoticeReadDeleteArgs>(args: SelectSubset<T, NoticeReadDeleteArgs<ExtArgs>>): Prisma__NoticeReadClient<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NoticeRead.
     * @param {NoticeReadUpdateArgs} args - Arguments to update one NoticeRead.
     * @example
     * // Update one NoticeRead
     * const noticeRead = await prisma.noticeRead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoticeReadUpdateArgs>(args: SelectSubset<T, NoticeReadUpdateArgs<ExtArgs>>): Prisma__NoticeReadClient<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NoticeReads.
     * @param {NoticeReadDeleteManyArgs} args - Arguments to filter NoticeReads to delete.
     * @example
     * // Delete a few NoticeReads
     * const { count } = await prisma.noticeRead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoticeReadDeleteManyArgs>(args?: SelectSubset<T, NoticeReadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NoticeReads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeReadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NoticeReads
     * const noticeRead = await prisma.noticeRead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoticeReadUpdateManyArgs>(args: SelectSubset<T, NoticeReadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NoticeRead.
     * @param {NoticeReadUpsertArgs} args - Arguments to update or create a NoticeRead.
     * @example
     * // Update or create a NoticeRead
     * const noticeRead = await prisma.noticeRead.upsert({
     *   create: {
     *     // ... data to create a NoticeRead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NoticeRead we want to update
     *   }
     * })
     */
    upsert<T extends NoticeReadUpsertArgs>(args: SelectSubset<T, NoticeReadUpsertArgs<ExtArgs>>): Prisma__NoticeReadClient<$Result.GetResult<Prisma.$NoticeReadPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NoticeReads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeReadCountArgs} args - Arguments to filter NoticeReads to count.
     * @example
     * // Count the number of NoticeReads
     * const count = await prisma.noticeRead.count({
     *   where: {
     *     // ... the filter for the NoticeReads we want to count
     *   }
     * })
    **/
    count<T extends NoticeReadCountArgs>(
      args?: Subset<T, NoticeReadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticeReadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NoticeRead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeReadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticeReadAggregateArgs>(args: Subset<T, NoticeReadAggregateArgs>): Prisma.PrismaPromise<GetNoticeReadAggregateType<T>>

    /**
     * Group by NoticeRead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeReadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoticeReadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoticeReadGroupByArgs['orderBy'] }
        : { orderBy?: NoticeReadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoticeReadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticeReadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NoticeRead model
   */
  readonly fields: NoticeReadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NoticeRead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoticeReadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notice<T extends NoticeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NoticeDefaultArgs<ExtArgs>>): Prisma__NoticeClient<$Result.GetResult<Prisma.$NoticePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NoticeRead model
   */ 
  interface NoticeReadFieldRefs {
    readonly id: FieldRef<"NoticeRead", 'Int'>
    readonly noticeId: FieldRef<"NoticeRead", 'Int'>
    readonly userId: FieldRef<"NoticeRead", 'Int'>
    readonly readAt: FieldRef<"NoticeRead", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NoticeRead findUnique
   */
  export type NoticeReadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    /**
     * Filter, which NoticeRead to fetch.
     */
    where: NoticeReadWhereUniqueInput
  }

  /**
   * NoticeRead findUniqueOrThrow
   */
  export type NoticeReadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    /**
     * Filter, which NoticeRead to fetch.
     */
    where: NoticeReadWhereUniqueInput
  }

  /**
   * NoticeRead findFirst
   */
  export type NoticeReadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    /**
     * Filter, which NoticeRead to fetch.
     */
    where?: NoticeReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeReads to fetch.
     */
    orderBy?: NoticeReadOrderByWithRelationInput | NoticeReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticeReads.
     */
    cursor?: NoticeReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeReads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticeReads.
     */
    distinct?: NoticeReadScalarFieldEnum | NoticeReadScalarFieldEnum[]
  }

  /**
   * NoticeRead findFirstOrThrow
   */
  export type NoticeReadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    /**
     * Filter, which NoticeRead to fetch.
     */
    where?: NoticeReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeReads to fetch.
     */
    orderBy?: NoticeReadOrderByWithRelationInput | NoticeReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticeReads.
     */
    cursor?: NoticeReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeReads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticeReads.
     */
    distinct?: NoticeReadScalarFieldEnum | NoticeReadScalarFieldEnum[]
  }

  /**
   * NoticeRead findMany
   */
  export type NoticeReadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    /**
     * Filter, which NoticeReads to fetch.
     */
    where?: NoticeReadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeReads to fetch.
     */
    orderBy?: NoticeReadOrderByWithRelationInput | NoticeReadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NoticeReads.
     */
    cursor?: NoticeReadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeReads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeReads.
     */
    skip?: number
    distinct?: NoticeReadScalarFieldEnum | NoticeReadScalarFieldEnum[]
  }

  /**
   * NoticeRead create
   */
  export type NoticeReadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    /**
     * The data needed to create a NoticeRead.
     */
    data: XOR<NoticeReadCreateInput, NoticeReadUncheckedCreateInput>
  }

  /**
   * NoticeRead createMany
   */
  export type NoticeReadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NoticeReads.
     */
    data: NoticeReadCreateManyInput | NoticeReadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NoticeRead update
   */
  export type NoticeReadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    /**
     * The data needed to update a NoticeRead.
     */
    data: XOR<NoticeReadUpdateInput, NoticeReadUncheckedUpdateInput>
    /**
     * Choose, which NoticeRead to update.
     */
    where: NoticeReadWhereUniqueInput
  }

  /**
   * NoticeRead updateMany
   */
  export type NoticeReadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NoticeReads.
     */
    data: XOR<NoticeReadUpdateManyMutationInput, NoticeReadUncheckedUpdateManyInput>
    /**
     * Filter which NoticeReads to update
     */
    where?: NoticeReadWhereInput
  }

  /**
   * NoticeRead upsert
   */
  export type NoticeReadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    /**
     * The filter to search for the NoticeRead to update in case it exists.
     */
    where: NoticeReadWhereUniqueInput
    /**
     * In case the NoticeRead found by the `where` argument doesn't exist, create a new NoticeRead with this data.
     */
    create: XOR<NoticeReadCreateInput, NoticeReadUncheckedCreateInput>
    /**
     * In case the NoticeRead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoticeReadUpdateInput, NoticeReadUncheckedUpdateInput>
  }

  /**
   * NoticeRead delete
   */
  export type NoticeReadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
    /**
     * Filter which NoticeRead to delete.
     */
    where: NoticeReadWhereUniqueInput
  }

  /**
   * NoticeRead deleteMany
   */
  export type NoticeReadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticeReads to delete
     */
    where?: NoticeReadWhereInput
  }

  /**
   * NoticeRead without action
   */
  export type NoticeReadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeRead
     */
    select?: NoticeReadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoticeReadInclude<ExtArgs> | null
  }


  /**
   * Model ShiftPattern
   */

  export type AggregateShiftPattern = {
    _count: ShiftPatternCountAggregateOutputType | null
    _avg: ShiftPatternAvgAggregateOutputType | null
    _sum: ShiftPatternSumAggregateOutputType | null
    _min: ShiftPatternMinAggregateOutputType | null
    _max: ShiftPatternMaxAggregateOutputType | null
  }

  export type ShiftPatternAvgAggregateOutputType = {
    id: number | null
    duration: number | null
    breakDuration: number | null
    createdBy: number | null
    companyId: number | null
    requiredStaff: number | null
  }

  export type ShiftPatternSumAggregateOutputType = {
    id: number | null
    duration: number | null
    breakDuration: number | null
    createdBy: number | null
    companyId: number | null
    requiredStaff: number | null
  }

  export type ShiftPatternMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    startTime: string | null
    endTime: string | null
    duration: number | null
    breakDuration: number | null
    shiftType: string | null
    industryType: string | null
    isTemplate: boolean | null
    color: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: number | null
    enabled: boolean | null
    requiredStaff: number | null
  }

  export type ShiftPatternMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    startTime: string | null
    endTime: string | null
    duration: number | null
    breakDuration: number | null
    shiftType: string | null
    industryType: string | null
    isTemplate: boolean | null
    color: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    companyId: number | null
    enabled: boolean | null
    requiredStaff: number | null
  }

  export type ShiftPatternCountAggregateOutputType = {
    id: number
    name: number
    description: number
    startTime: number
    endTime: number
    duration: number
    breakDuration: number
    shiftType: number
    industryType: number
    isTemplate: number
    color: number
    createdBy: number
    createdAt: number
    updatedAt: number
    companyId: number
    days: number
    enabled: number
    requiredStaff: number
    requirements: number
    _all: number
  }


  export type ShiftPatternAvgAggregateInputType = {
    id?: true
    duration?: true
    breakDuration?: true
    createdBy?: true
    companyId?: true
    requiredStaff?: true
  }

  export type ShiftPatternSumAggregateInputType = {
    id?: true
    duration?: true
    breakDuration?: true
    createdBy?: true
    companyId?: true
    requiredStaff?: true
  }

  export type ShiftPatternMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startTime?: true
    endTime?: true
    duration?: true
    breakDuration?: true
    shiftType?: true
    industryType?: true
    isTemplate?: true
    color?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    enabled?: true
    requiredStaff?: true
  }

  export type ShiftPatternMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startTime?: true
    endTime?: true
    duration?: true
    breakDuration?: true
    shiftType?: true
    industryType?: true
    isTemplate?: true
    color?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    enabled?: true
    requiredStaff?: true
  }

  export type ShiftPatternCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startTime?: true
    endTime?: true
    duration?: true
    breakDuration?: true
    shiftType?: true
    industryType?: true
    isTemplate?: true
    color?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    companyId?: true
    days?: true
    enabled?: true
    requiredStaff?: true
    requirements?: true
    _all?: true
  }

  export type ShiftPatternAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftPattern to aggregate.
     */
    where?: ShiftPatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftPatterns to fetch.
     */
    orderBy?: ShiftPatternOrderByWithRelationInput | ShiftPatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShiftPatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftPatterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftPatterns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShiftPatterns
    **/
    _count?: true | ShiftPatternCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShiftPatternAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShiftPatternSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftPatternMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftPatternMaxAggregateInputType
  }

  export type GetShiftPatternAggregateType<T extends ShiftPatternAggregateArgs> = {
        [P in keyof T & keyof AggregateShiftPattern]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShiftPattern[P]>
      : GetScalarType<T[P], AggregateShiftPattern[P]>
  }




  export type ShiftPatternGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShiftPatternWhereInput
    orderBy?: ShiftPatternOrderByWithAggregationInput | ShiftPatternOrderByWithAggregationInput[]
    by: ShiftPatternScalarFieldEnum[] | ShiftPatternScalarFieldEnum
    having?: ShiftPatternScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftPatternCountAggregateInputType | true
    _avg?: ShiftPatternAvgAggregateInputType
    _sum?: ShiftPatternSumAggregateInputType
    _min?: ShiftPatternMinAggregateInputType
    _max?: ShiftPatternMaxAggregateInputType
  }

  export type ShiftPatternGroupByOutputType = {
    id: number
    name: string
    description: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration: number
    shiftType: string
    industryType: string | null
    isTemplate: boolean
    color: string
    createdBy: number
    createdAt: Date
    updatedAt: Date
    companyId: number | null
    days: JsonValue
    enabled: boolean
    requiredStaff: number
    requirements: JsonValue | null
    _count: ShiftPatternCountAggregateOutputType | null
    _avg: ShiftPatternAvgAggregateOutputType | null
    _sum: ShiftPatternSumAggregateOutputType | null
    _min: ShiftPatternMinAggregateOutputType | null
    _max: ShiftPatternMaxAggregateOutputType | null
  }

  type GetShiftPatternGroupByPayload<T extends ShiftPatternGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShiftPatternGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftPatternGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftPatternGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftPatternGroupByOutputType[P]>
        }
      >
    >


  export type ShiftPatternSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    breakDuration?: boolean
    shiftType?: boolean
    industryType?: boolean
    isTemplate?: boolean
    color?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    days?: boolean
    enabled?: boolean
    requiredStaff?: boolean
    requirements?: boolean
    schedules?: boolean | ShiftPattern$schedulesArgs<ExtArgs>
    company?: boolean | ShiftPattern$companyArgs<ExtArgs>
    schedule_templates?: boolean | ShiftPattern$schedule_templatesArgs<ExtArgs>
    draftItems?: boolean | ShiftPattern$draftItemsArgs<ExtArgs>
    _count?: boolean | ShiftPatternCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shiftPattern"]>


  export type ShiftPatternSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    breakDuration?: boolean
    shiftType?: boolean
    industryType?: boolean
    isTemplate?: boolean
    color?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    companyId?: boolean
    days?: boolean
    enabled?: boolean
    requiredStaff?: boolean
    requirements?: boolean
  }

  export type ShiftPatternInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | ShiftPattern$schedulesArgs<ExtArgs>
    company?: boolean | ShiftPattern$companyArgs<ExtArgs>
    schedule_templates?: boolean | ShiftPattern$schedule_templatesArgs<ExtArgs>
    draftItems?: boolean | ShiftPattern$draftItemsArgs<ExtArgs>
    _count?: boolean | ShiftPatternCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ShiftPatternPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShiftPattern"
    objects: {
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
      company: Prisma.$CompanyPayload<ExtArgs> | null
      schedule_templates: Prisma.$ScheduleTemplatePayload<ExtArgs>[]
      draftItems: Prisma.$ScheduleDraftItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      startTime: string
      endTime: string
      duration: number
      breakDuration: number
      shiftType: string
      industryType: string | null
      isTemplate: boolean
      color: string
      createdBy: number
      createdAt: Date
      updatedAt: Date
      companyId: number | null
      days: Prisma.JsonValue
      enabled: boolean
      requiredStaff: number
      requirements: Prisma.JsonValue | null
    }, ExtArgs["result"]["shiftPattern"]>
    composites: {}
  }

  type ShiftPatternGetPayload<S extends boolean | null | undefined | ShiftPatternDefaultArgs> = $Result.GetResult<Prisma.$ShiftPatternPayload, S>

  type ShiftPatternCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShiftPatternFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShiftPatternCountAggregateInputType | true
    }

  export interface ShiftPatternDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShiftPattern'], meta: { name: 'ShiftPattern' } }
    /**
     * Find zero or one ShiftPattern that matches the filter.
     * @param {ShiftPatternFindUniqueArgs} args - Arguments to find a ShiftPattern
     * @example
     * // Get one ShiftPattern
     * const shiftPattern = await prisma.shiftPattern.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShiftPatternFindUniqueArgs>(args: SelectSubset<T, ShiftPatternFindUniqueArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShiftPattern that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShiftPatternFindUniqueOrThrowArgs} args - Arguments to find a ShiftPattern
     * @example
     * // Get one ShiftPattern
     * const shiftPattern = await prisma.shiftPattern.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShiftPatternFindUniqueOrThrowArgs>(args: SelectSubset<T, ShiftPatternFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShiftPattern that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftPatternFindFirstArgs} args - Arguments to find a ShiftPattern
     * @example
     * // Get one ShiftPattern
     * const shiftPattern = await prisma.shiftPattern.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShiftPatternFindFirstArgs>(args?: SelectSubset<T, ShiftPatternFindFirstArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShiftPattern that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftPatternFindFirstOrThrowArgs} args - Arguments to find a ShiftPattern
     * @example
     * // Get one ShiftPattern
     * const shiftPattern = await prisma.shiftPattern.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShiftPatternFindFirstOrThrowArgs>(args?: SelectSubset<T, ShiftPatternFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShiftPatterns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftPatternFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShiftPatterns
     * const shiftPatterns = await prisma.shiftPattern.findMany()
     * 
     * // Get first 10 ShiftPatterns
     * const shiftPatterns = await prisma.shiftPattern.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shiftPatternWithIdOnly = await prisma.shiftPattern.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShiftPatternFindManyArgs>(args?: SelectSubset<T, ShiftPatternFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShiftPattern.
     * @param {ShiftPatternCreateArgs} args - Arguments to create a ShiftPattern.
     * @example
     * // Create one ShiftPattern
     * const ShiftPattern = await prisma.shiftPattern.create({
     *   data: {
     *     // ... data to create a ShiftPattern
     *   }
     * })
     * 
     */
    create<T extends ShiftPatternCreateArgs>(args: SelectSubset<T, ShiftPatternCreateArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShiftPatterns.
     * @param {ShiftPatternCreateManyArgs} args - Arguments to create many ShiftPatterns.
     * @example
     * // Create many ShiftPatterns
     * const shiftPattern = await prisma.shiftPattern.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShiftPatternCreateManyArgs>(args?: SelectSubset<T, ShiftPatternCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ShiftPattern.
     * @param {ShiftPatternDeleteArgs} args - Arguments to delete one ShiftPattern.
     * @example
     * // Delete one ShiftPattern
     * const ShiftPattern = await prisma.shiftPattern.delete({
     *   where: {
     *     // ... filter to delete one ShiftPattern
     *   }
     * })
     * 
     */
    delete<T extends ShiftPatternDeleteArgs>(args: SelectSubset<T, ShiftPatternDeleteArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShiftPattern.
     * @param {ShiftPatternUpdateArgs} args - Arguments to update one ShiftPattern.
     * @example
     * // Update one ShiftPattern
     * const shiftPattern = await prisma.shiftPattern.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShiftPatternUpdateArgs>(args: SelectSubset<T, ShiftPatternUpdateArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShiftPatterns.
     * @param {ShiftPatternDeleteManyArgs} args - Arguments to filter ShiftPatterns to delete.
     * @example
     * // Delete a few ShiftPatterns
     * const { count } = await prisma.shiftPattern.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShiftPatternDeleteManyArgs>(args?: SelectSubset<T, ShiftPatternDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShiftPatterns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftPatternUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShiftPatterns
     * const shiftPattern = await prisma.shiftPattern.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShiftPatternUpdateManyArgs>(args: SelectSubset<T, ShiftPatternUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShiftPattern.
     * @param {ShiftPatternUpsertArgs} args - Arguments to update or create a ShiftPattern.
     * @example
     * // Update or create a ShiftPattern
     * const shiftPattern = await prisma.shiftPattern.upsert({
     *   create: {
     *     // ... data to create a ShiftPattern
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShiftPattern we want to update
     *   }
     * })
     */
    upsert<T extends ShiftPatternUpsertArgs>(args: SelectSubset<T, ShiftPatternUpsertArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShiftPatterns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftPatternCountArgs} args - Arguments to filter ShiftPatterns to count.
     * @example
     * // Count the number of ShiftPatterns
     * const count = await prisma.shiftPattern.count({
     *   where: {
     *     // ... the filter for the ShiftPatterns we want to count
     *   }
     * })
    **/
    count<T extends ShiftPatternCountArgs>(
      args?: Subset<T, ShiftPatternCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftPatternCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShiftPattern.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftPatternAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftPatternAggregateArgs>(args: Subset<T, ShiftPatternAggregateArgs>): Prisma.PrismaPromise<GetShiftPatternAggregateType<T>>

    /**
     * Group by ShiftPattern.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftPatternGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftPatternGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftPatternGroupByArgs['orderBy'] }
        : { orderBy?: ShiftPatternGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftPatternGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftPatternGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShiftPattern model
   */
  readonly fields: ShiftPatternFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShiftPattern.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShiftPatternClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedules<T extends ShiftPattern$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, ShiftPattern$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    company<T extends ShiftPattern$companyArgs<ExtArgs> = {}>(args?: Subset<T, ShiftPattern$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    schedule_templates<T extends ShiftPattern$schedule_templatesArgs<ExtArgs> = {}>(args?: Subset<T, ShiftPattern$schedule_templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "findMany"> | Null>
    draftItems<T extends ShiftPattern$draftItemsArgs<ExtArgs> = {}>(args?: Subset<T, ShiftPattern$draftItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShiftPattern model
   */ 
  interface ShiftPatternFieldRefs {
    readonly id: FieldRef<"ShiftPattern", 'Int'>
    readonly name: FieldRef<"ShiftPattern", 'String'>
    readonly description: FieldRef<"ShiftPattern", 'String'>
    readonly startTime: FieldRef<"ShiftPattern", 'String'>
    readonly endTime: FieldRef<"ShiftPattern", 'String'>
    readonly duration: FieldRef<"ShiftPattern", 'Int'>
    readonly breakDuration: FieldRef<"ShiftPattern", 'Int'>
    readonly shiftType: FieldRef<"ShiftPattern", 'String'>
    readonly industryType: FieldRef<"ShiftPattern", 'String'>
    readonly isTemplate: FieldRef<"ShiftPattern", 'Boolean'>
    readonly color: FieldRef<"ShiftPattern", 'String'>
    readonly createdBy: FieldRef<"ShiftPattern", 'Int'>
    readonly createdAt: FieldRef<"ShiftPattern", 'DateTime'>
    readonly updatedAt: FieldRef<"ShiftPattern", 'DateTime'>
    readonly companyId: FieldRef<"ShiftPattern", 'Int'>
    readonly days: FieldRef<"ShiftPattern", 'Json'>
    readonly enabled: FieldRef<"ShiftPattern", 'Boolean'>
    readonly requiredStaff: FieldRef<"ShiftPattern", 'Int'>
    readonly requirements: FieldRef<"ShiftPattern", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ShiftPattern findUnique
   */
  export type ShiftPatternFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    /**
     * Filter, which ShiftPattern to fetch.
     */
    where: ShiftPatternWhereUniqueInput
  }

  /**
   * ShiftPattern findUniqueOrThrow
   */
  export type ShiftPatternFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    /**
     * Filter, which ShiftPattern to fetch.
     */
    where: ShiftPatternWhereUniqueInput
  }

  /**
   * ShiftPattern findFirst
   */
  export type ShiftPatternFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    /**
     * Filter, which ShiftPattern to fetch.
     */
    where?: ShiftPatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftPatterns to fetch.
     */
    orderBy?: ShiftPatternOrderByWithRelationInput | ShiftPatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftPatterns.
     */
    cursor?: ShiftPatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftPatterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftPatterns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftPatterns.
     */
    distinct?: ShiftPatternScalarFieldEnum | ShiftPatternScalarFieldEnum[]
  }

  /**
   * ShiftPattern findFirstOrThrow
   */
  export type ShiftPatternFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    /**
     * Filter, which ShiftPattern to fetch.
     */
    where?: ShiftPatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftPatterns to fetch.
     */
    orderBy?: ShiftPatternOrderByWithRelationInput | ShiftPatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShiftPatterns.
     */
    cursor?: ShiftPatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftPatterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftPatterns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShiftPatterns.
     */
    distinct?: ShiftPatternScalarFieldEnum | ShiftPatternScalarFieldEnum[]
  }

  /**
   * ShiftPattern findMany
   */
  export type ShiftPatternFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    /**
     * Filter, which ShiftPatterns to fetch.
     */
    where?: ShiftPatternWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShiftPatterns to fetch.
     */
    orderBy?: ShiftPatternOrderByWithRelationInput | ShiftPatternOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShiftPatterns.
     */
    cursor?: ShiftPatternWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShiftPatterns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShiftPatterns.
     */
    skip?: number
    distinct?: ShiftPatternScalarFieldEnum | ShiftPatternScalarFieldEnum[]
  }

  /**
   * ShiftPattern create
   */
  export type ShiftPatternCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    /**
     * The data needed to create a ShiftPattern.
     */
    data: XOR<ShiftPatternCreateInput, ShiftPatternUncheckedCreateInput>
  }

  /**
   * ShiftPattern createMany
   */
  export type ShiftPatternCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShiftPatterns.
     */
    data: ShiftPatternCreateManyInput | ShiftPatternCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShiftPattern update
   */
  export type ShiftPatternUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    /**
     * The data needed to update a ShiftPattern.
     */
    data: XOR<ShiftPatternUpdateInput, ShiftPatternUncheckedUpdateInput>
    /**
     * Choose, which ShiftPattern to update.
     */
    where: ShiftPatternWhereUniqueInput
  }

  /**
   * ShiftPattern updateMany
   */
  export type ShiftPatternUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShiftPatterns.
     */
    data: XOR<ShiftPatternUpdateManyMutationInput, ShiftPatternUncheckedUpdateManyInput>
    /**
     * Filter which ShiftPatterns to update
     */
    where?: ShiftPatternWhereInput
  }

  /**
   * ShiftPattern upsert
   */
  export type ShiftPatternUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    /**
     * The filter to search for the ShiftPattern to update in case it exists.
     */
    where: ShiftPatternWhereUniqueInput
    /**
     * In case the ShiftPattern found by the `where` argument doesn't exist, create a new ShiftPattern with this data.
     */
    create: XOR<ShiftPatternCreateInput, ShiftPatternUncheckedCreateInput>
    /**
     * In case the ShiftPattern was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShiftPatternUpdateInput, ShiftPatternUncheckedUpdateInput>
  }

  /**
   * ShiftPattern delete
   */
  export type ShiftPatternDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    /**
     * Filter which ShiftPattern to delete.
     */
    where: ShiftPatternWhereUniqueInput
  }

  /**
   * ShiftPattern deleteMany
   */
  export type ShiftPatternDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShiftPatterns to delete
     */
    where?: ShiftPatternWhereInput
  }

  /**
   * ShiftPattern.schedules
   */
  export type ShiftPattern$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * ShiftPattern.company
   */
  export type ShiftPattern$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * ShiftPattern.schedule_templates
   */
  export type ShiftPattern$schedule_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    where?: ScheduleTemplateWhereInput
    orderBy?: ScheduleTemplateOrderByWithRelationInput | ScheduleTemplateOrderByWithRelationInput[]
    cursor?: ScheduleTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleTemplateScalarFieldEnum | ScheduleTemplateScalarFieldEnum[]
  }

  /**
   * ShiftPattern.draftItems
   */
  export type ShiftPattern$draftItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    where?: ScheduleDraftItemWhereInput
    orderBy?: ScheduleDraftItemOrderByWithRelationInput | ScheduleDraftItemOrderByWithRelationInput[]
    cursor?: ScheduleDraftItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleDraftItemScalarFieldEnum | ScheduleDraftItemScalarFieldEnum[]
  }

  /**
   * ShiftPattern without action
   */
  export type ShiftPatternDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
  }


  /**
   * Model ScheduleTemplate
   */

  export type AggregateScheduleTemplate = {
    _count: ScheduleTemplateCountAggregateOutputType | null
    _avg: ScheduleTemplateAvgAggregateOutputType | null
    _sum: ScheduleTemplateSumAggregateOutputType | null
    _min: ScheduleTemplateMinAggregateOutputType | null
    _max: ScheduleTemplateMaxAggregateOutputType | null
  }

  export type ScheduleTemplateAvgAggregateOutputType = {
    id: number | null
    rotationPeriod: number | null
    minStaffPerShift: number | null
    maxStaffPerShift: number | null
    createdBy: number | null
  }

  export type ScheduleTemplateSumAggregateOutputType = {
    id: number | null
    rotationPeriod: number | null
    minStaffPerShift: number | null
    maxStaffPerShift: number | null
    createdBy: number | null
  }

  export type ScheduleTemplateMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    industryType: string | null
    templateType: string | null
    isActive: boolean | null
    rotationPeriod: number | null
    minStaffPerShift: number | null
    maxStaffPerShift: number | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleTemplateMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    industryType: string | null
    templateType: string | null
    isActive: boolean | null
    rotationPeriod: number | null
    minStaffPerShift: number | null
    maxStaffPerShift: number | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    industryType: number
    templateType: number
    isActive: number
    metadata: number
    workDaysPattern: number
    rotationPeriod: number
    minStaffPerShift: number
    maxStaffPerShift: number
    coverageRequirements: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduleTemplateAvgAggregateInputType = {
    id?: true
    rotationPeriod?: true
    minStaffPerShift?: true
    maxStaffPerShift?: true
    createdBy?: true
  }

  export type ScheduleTemplateSumAggregateInputType = {
    id?: true
    rotationPeriod?: true
    minStaffPerShift?: true
    maxStaffPerShift?: true
    createdBy?: true
  }

  export type ScheduleTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    industryType?: true
    templateType?: true
    isActive?: true
    rotationPeriod?: true
    minStaffPerShift?: true
    maxStaffPerShift?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    industryType?: true
    templateType?: true
    isActive?: true
    rotationPeriod?: true
    minStaffPerShift?: true
    maxStaffPerShift?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    industryType?: true
    templateType?: true
    isActive?: true
    metadata?: true
    workDaysPattern?: true
    rotationPeriod?: true
    minStaffPerShift?: true
    maxStaffPerShift?: true
    coverageRequirements?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduleTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleTemplate to aggregate.
     */
    where?: ScheduleTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleTemplates to fetch.
     */
    orderBy?: ScheduleTemplateOrderByWithRelationInput | ScheduleTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduleTemplates
    **/
    _count?: true | ScheduleTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleTemplateMaxAggregateInputType
  }

  export type GetScheduleTemplateAggregateType<T extends ScheduleTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduleTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduleTemplate[P]>
      : GetScalarType<T[P], AggregateScheduleTemplate[P]>
  }




  export type ScheduleTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleTemplateWhereInput
    orderBy?: ScheduleTemplateOrderByWithAggregationInput | ScheduleTemplateOrderByWithAggregationInput[]
    by: ScheduleTemplateScalarFieldEnum[] | ScheduleTemplateScalarFieldEnum
    having?: ScheduleTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleTemplateCountAggregateInputType | true
    _avg?: ScheduleTemplateAvgAggregateInputType
    _sum?: ScheduleTemplateSumAggregateInputType
    _min?: ScheduleTemplateMinAggregateInputType
    _max?: ScheduleTemplateMaxAggregateInputType
  }

  export type ScheduleTemplateGroupByOutputType = {
    id: number
    name: string
    description: string | null
    industryType: string
    templateType: string
    isActive: boolean
    metadata: JsonValue | null
    workDaysPattern: JsonValue
    rotationPeriod: number | null
    minStaffPerShift: number
    maxStaffPerShift: number | null
    coverageRequirements: JsonValue | null
    createdBy: number
    createdAt: Date
    updatedAt: Date
    _count: ScheduleTemplateCountAggregateOutputType | null
    _avg: ScheduleTemplateAvgAggregateOutputType | null
    _sum: ScheduleTemplateSumAggregateOutputType | null
    _min: ScheduleTemplateMinAggregateOutputType | null
    _max: ScheduleTemplateMaxAggregateOutputType | null
  }

  type GetScheduleTemplateGroupByPayload<T extends ScheduleTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleTemplateGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    industryType?: boolean
    templateType?: boolean
    isActive?: boolean
    metadata?: boolean
    workDaysPattern?: boolean
    rotationPeriod?: boolean
    minStaffPerShift?: boolean
    maxStaffPerShift?: boolean
    coverageRequirements?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    generationLogs?: boolean | ScheduleTemplate$generationLogsArgs<ExtArgs>
    shift_patterns?: boolean | ScheduleTemplate$shift_patternsArgs<ExtArgs>
    drafts?: boolean | ScheduleTemplate$draftsArgs<ExtArgs>
    _count?: boolean | ScheduleTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleTemplate"]>


  export type ScheduleTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    industryType?: boolean
    templateType?: boolean
    isActive?: boolean
    metadata?: boolean
    workDaysPattern?: boolean
    rotationPeriod?: boolean
    minStaffPerShift?: boolean
    maxStaffPerShift?: boolean
    coverageRequirements?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduleTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    generationLogs?: boolean | ScheduleTemplate$generationLogsArgs<ExtArgs>
    shift_patterns?: boolean | ScheduleTemplate$shift_patternsArgs<ExtArgs>
    drafts?: boolean | ScheduleTemplate$draftsArgs<ExtArgs>
    _count?: boolean | ScheduleTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ScheduleTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduleTemplate"
    objects: {
      generationLogs: Prisma.$GenerationLogPayload<ExtArgs>[]
      shift_patterns: Prisma.$ShiftPatternPayload<ExtArgs>[]
      drafts: Prisma.$ScheduleDraftPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      industryType: string
      templateType: string
      isActive: boolean
      metadata: Prisma.JsonValue | null
      workDaysPattern: Prisma.JsonValue
      rotationPeriod: number | null
      minStaffPerShift: number
      maxStaffPerShift: number | null
      coverageRequirements: Prisma.JsonValue | null
      createdBy: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scheduleTemplate"]>
    composites: {}
  }

  type ScheduleTemplateGetPayload<S extends boolean | null | undefined | ScheduleTemplateDefaultArgs> = $Result.GetResult<Prisma.$ScheduleTemplatePayload, S>

  type ScheduleTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleTemplateCountAggregateInputType | true
    }

  export interface ScheduleTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduleTemplate'], meta: { name: 'ScheduleTemplate' } }
    /**
     * Find zero or one ScheduleTemplate that matches the filter.
     * @param {ScheduleTemplateFindUniqueArgs} args - Arguments to find a ScheduleTemplate
     * @example
     * // Get one ScheduleTemplate
     * const scheduleTemplate = await prisma.scheduleTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleTemplateFindUniqueArgs>(args: SelectSubset<T, ScheduleTemplateFindUniqueArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScheduleTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleTemplateFindUniqueOrThrowArgs} args - Arguments to find a ScheduleTemplate
     * @example
     * // Get one ScheduleTemplate
     * const scheduleTemplate = await prisma.scheduleTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScheduleTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleTemplateFindFirstArgs} args - Arguments to find a ScheduleTemplate
     * @example
     * // Get one ScheduleTemplate
     * const scheduleTemplate = await prisma.scheduleTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleTemplateFindFirstArgs>(args?: SelectSubset<T, ScheduleTemplateFindFirstArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScheduleTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleTemplateFindFirstOrThrowArgs} args - Arguments to find a ScheduleTemplate
     * @example
     * // Get one ScheduleTemplate
     * const scheduleTemplate = await prisma.scheduleTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScheduleTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduleTemplates
     * const scheduleTemplates = await prisma.scheduleTemplate.findMany()
     * 
     * // Get first 10 ScheduleTemplates
     * const scheduleTemplates = await prisma.scheduleTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleTemplateWithIdOnly = await prisma.scheduleTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleTemplateFindManyArgs>(args?: SelectSubset<T, ScheduleTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScheduleTemplate.
     * @param {ScheduleTemplateCreateArgs} args - Arguments to create a ScheduleTemplate.
     * @example
     * // Create one ScheduleTemplate
     * const ScheduleTemplate = await prisma.scheduleTemplate.create({
     *   data: {
     *     // ... data to create a ScheduleTemplate
     *   }
     * })
     * 
     */
    create<T extends ScheduleTemplateCreateArgs>(args: SelectSubset<T, ScheduleTemplateCreateArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScheduleTemplates.
     * @param {ScheduleTemplateCreateManyArgs} args - Arguments to create many ScheduleTemplates.
     * @example
     * // Create many ScheduleTemplates
     * const scheduleTemplate = await prisma.scheduleTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleTemplateCreateManyArgs>(args?: SelectSubset<T, ScheduleTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ScheduleTemplate.
     * @param {ScheduleTemplateDeleteArgs} args - Arguments to delete one ScheduleTemplate.
     * @example
     * // Delete one ScheduleTemplate
     * const ScheduleTemplate = await prisma.scheduleTemplate.delete({
     *   where: {
     *     // ... filter to delete one ScheduleTemplate
     *   }
     * })
     * 
     */
    delete<T extends ScheduleTemplateDeleteArgs>(args: SelectSubset<T, ScheduleTemplateDeleteArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScheduleTemplate.
     * @param {ScheduleTemplateUpdateArgs} args - Arguments to update one ScheduleTemplate.
     * @example
     * // Update one ScheduleTemplate
     * const scheduleTemplate = await prisma.scheduleTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleTemplateUpdateArgs>(args: SelectSubset<T, ScheduleTemplateUpdateArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScheduleTemplates.
     * @param {ScheduleTemplateDeleteManyArgs} args - Arguments to filter ScheduleTemplates to delete.
     * @example
     * // Delete a few ScheduleTemplates
     * const { count } = await prisma.scheduleTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleTemplateDeleteManyArgs>(args?: SelectSubset<T, ScheduleTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduleTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduleTemplates
     * const scheduleTemplate = await prisma.scheduleTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleTemplateUpdateManyArgs>(args: SelectSubset<T, ScheduleTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScheduleTemplate.
     * @param {ScheduleTemplateUpsertArgs} args - Arguments to update or create a ScheduleTemplate.
     * @example
     * // Update or create a ScheduleTemplate
     * const scheduleTemplate = await prisma.scheduleTemplate.upsert({
     *   create: {
     *     // ... data to create a ScheduleTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduleTemplate we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleTemplateUpsertArgs>(args: SelectSubset<T, ScheduleTemplateUpsertArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScheduleTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleTemplateCountArgs} args - Arguments to filter ScheduleTemplates to count.
     * @example
     * // Count the number of ScheduleTemplates
     * const count = await prisma.scheduleTemplate.count({
     *   where: {
     *     // ... the filter for the ScheduleTemplates we want to count
     *   }
     * })
    **/
    count<T extends ScheduleTemplateCountArgs>(
      args?: Subset<T, ScheduleTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduleTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleTemplateAggregateArgs>(args: Subset<T, ScheduleTemplateAggregateArgs>): Prisma.PrismaPromise<GetScheduleTemplateAggregateType<T>>

    /**
     * Group by ScheduleTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleTemplateGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduleTemplate model
   */
  readonly fields: ScheduleTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduleTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    generationLogs<T extends ScheduleTemplate$generationLogsArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleTemplate$generationLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "findMany"> | Null>
    shift_patterns<T extends ScheduleTemplate$shift_patternsArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleTemplate$shift_patternsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "findMany"> | Null>
    drafts<T extends ScheduleTemplate$draftsArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleTemplate$draftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduleTemplate model
   */ 
  interface ScheduleTemplateFieldRefs {
    readonly id: FieldRef<"ScheduleTemplate", 'Int'>
    readonly name: FieldRef<"ScheduleTemplate", 'String'>
    readonly description: FieldRef<"ScheduleTemplate", 'String'>
    readonly industryType: FieldRef<"ScheduleTemplate", 'String'>
    readonly templateType: FieldRef<"ScheduleTemplate", 'String'>
    readonly isActive: FieldRef<"ScheduleTemplate", 'Boolean'>
    readonly metadata: FieldRef<"ScheduleTemplate", 'Json'>
    readonly workDaysPattern: FieldRef<"ScheduleTemplate", 'Json'>
    readonly rotationPeriod: FieldRef<"ScheduleTemplate", 'Int'>
    readonly minStaffPerShift: FieldRef<"ScheduleTemplate", 'Int'>
    readonly maxStaffPerShift: FieldRef<"ScheduleTemplate", 'Int'>
    readonly coverageRequirements: FieldRef<"ScheduleTemplate", 'Json'>
    readonly createdBy: FieldRef<"ScheduleTemplate", 'Int'>
    readonly createdAt: FieldRef<"ScheduleTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"ScheduleTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScheduleTemplate findUnique
   */
  export type ScheduleTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleTemplate to fetch.
     */
    where: ScheduleTemplateWhereUniqueInput
  }

  /**
   * ScheduleTemplate findUniqueOrThrow
   */
  export type ScheduleTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleTemplate to fetch.
     */
    where: ScheduleTemplateWhereUniqueInput
  }

  /**
   * ScheduleTemplate findFirst
   */
  export type ScheduleTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleTemplate to fetch.
     */
    where?: ScheduleTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleTemplates to fetch.
     */
    orderBy?: ScheduleTemplateOrderByWithRelationInput | ScheduleTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleTemplates.
     */
    cursor?: ScheduleTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleTemplates.
     */
    distinct?: ScheduleTemplateScalarFieldEnum | ScheduleTemplateScalarFieldEnum[]
  }

  /**
   * ScheduleTemplate findFirstOrThrow
   */
  export type ScheduleTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleTemplate to fetch.
     */
    where?: ScheduleTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleTemplates to fetch.
     */
    orderBy?: ScheduleTemplateOrderByWithRelationInput | ScheduleTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleTemplates.
     */
    cursor?: ScheduleTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleTemplates.
     */
    distinct?: ScheduleTemplateScalarFieldEnum | ScheduleTemplateScalarFieldEnum[]
  }

  /**
   * ScheduleTemplate findMany
   */
  export type ScheduleTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleTemplates to fetch.
     */
    where?: ScheduleTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleTemplates to fetch.
     */
    orderBy?: ScheduleTemplateOrderByWithRelationInput | ScheduleTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduleTemplates.
     */
    cursor?: ScheduleTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleTemplates.
     */
    skip?: number
    distinct?: ScheduleTemplateScalarFieldEnum | ScheduleTemplateScalarFieldEnum[]
  }

  /**
   * ScheduleTemplate create
   */
  export type ScheduleTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a ScheduleTemplate.
     */
    data: XOR<ScheduleTemplateCreateInput, ScheduleTemplateUncheckedCreateInput>
  }

  /**
   * ScheduleTemplate createMany
   */
  export type ScheduleTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduleTemplates.
     */
    data: ScheduleTemplateCreateManyInput | ScheduleTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduleTemplate update
   */
  export type ScheduleTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a ScheduleTemplate.
     */
    data: XOR<ScheduleTemplateUpdateInput, ScheduleTemplateUncheckedUpdateInput>
    /**
     * Choose, which ScheduleTemplate to update.
     */
    where: ScheduleTemplateWhereUniqueInput
  }

  /**
   * ScheduleTemplate updateMany
   */
  export type ScheduleTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduleTemplates.
     */
    data: XOR<ScheduleTemplateUpdateManyMutationInput, ScheduleTemplateUncheckedUpdateManyInput>
    /**
     * Filter which ScheduleTemplates to update
     */
    where?: ScheduleTemplateWhereInput
  }

  /**
   * ScheduleTemplate upsert
   */
  export type ScheduleTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the ScheduleTemplate to update in case it exists.
     */
    where: ScheduleTemplateWhereUniqueInput
    /**
     * In case the ScheduleTemplate found by the `where` argument doesn't exist, create a new ScheduleTemplate with this data.
     */
    create: XOR<ScheduleTemplateCreateInput, ScheduleTemplateUncheckedCreateInput>
    /**
     * In case the ScheduleTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleTemplateUpdateInput, ScheduleTemplateUncheckedUpdateInput>
  }

  /**
   * ScheduleTemplate delete
   */
  export type ScheduleTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    /**
     * Filter which ScheduleTemplate to delete.
     */
    where: ScheduleTemplateWhereUniqueInput
  }

  /**
   * ScheduleTemplate deleteMany
   */
  export type ScheduleTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleTemplates to delete
     */
    where?: ScheduleTemplateWhereInput
  }

  /**
   * ScheduleTemplate.generationLogs
   */
  export type ScheduleTemplate$generationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    where?: GenerationLogWhereInput
    orderBy?: GenerationLogOrderByWithRelationInput | GenerationLogOrderByWithRelationInput[]
    cursor?: GenerationLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GenerationLogScalarFieldEnum | GenerationLogScalarFieldEnum[]
  }

  /**
   * ScheduleTemplate.shift_patterns
   */
  export type ScheduleTemplate$shift_patternsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    where?: ShiftPatternWhereInput
    orderBy?: ShiftPatternOrderByWithRelationInput | ShiftPatternOrderByWithRelationInput[]
    cursor?: ShiftPatternWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShiftPatternScalarFieldEnum | ShiftPatternScalarFieldEnum[]
  }

  /**
   * ScheduleTemplate.drafts
   */
  export type ScheduleTemplate$draftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    where?: ScheduleDraftWhereInput
    orderBy?: ScheduleDraftOrderByWithRelationInput | ScheduleDraftOrderByWithRelationInput[]
    cursor?: ScheduleDraftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleDraftScalarFieldEnum | ScheduleDraftScalarFieldEnum[]
  }

  /**
   * ScheduleTemplate without action
   */
  export type ScheduleTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
  }


  /**
   * Model EmployeeConstraints
   */

  export type AggregateEmployeeConstraints = {
    _count: EmployeeConstraintsCountAggregateOutputType | null
    _avg: EmployeeConstraintsAvgAggregateOutputType | null
    _sum: EmployeeConstraintsSumAggregateOutputType | null
    _min: EmployeeConstraintsMinAggregateOutputType | null
    _max: EmployeeConstraintsMaxAggregateOutputType | null
  }

  export type EmployeeConstraintsAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    maxShiftsPerWeek: number | null
    maxOvertimeHours: number | null
    maxTravelTime: number | null
  }

  export type EmployeeConstraintsSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    maxShiftsPerWeek: number | null
    maxOvertimeHours: number | null
    maxTravelTime: number | null
  }

  export type EmployeeConstraintsMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    canWorkWeekends: boolean | null
    canWorkHolidays: boolean | null
    canWorkNightShifts: boolean | null
    maxShiftsPerWeek: number | null
    maxOvertimeHours: number | null
    requiresFixedSchedule: boolean | null
    fixedShiftPattern: string | null
    maxTravelTime: number | null
    workLocation: string | null
    hasReliableTransport: boolean | null
    needsAccommodation: boolean | null
    accommodationDetails: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeConstraintsMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    canWorkWeekends: boolean | null
    canWorkHolidays: boolean | null
    canWorkNightShifts: boolean | null
    maxShiftsPerWeek: number | null
    maxOvertimeHours: number | null
    requiresFixedSchedule: boolean | null
    fixedShiftPattern: string | null
    maxTravelTime: number | null
    workLocation: string | null
    hasReliableTransport: boolean | null
    needsAccommodation: boolean | null
    accommodationDetails: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeConstraintsCountAggregateOutputType = {
    id: number
    employeeId: number
    unavailableTimeSlots: number
    preferredTimeSlots: number
    blackoutDates: number
    preferredShiftTypes: number
    avoidShiftTypes: number
    canWorkWeekends: number
    canWorkHolidays: number
    canWorkNightShifts: number
    maxShiftsPerWeek: number
    maxOvertimeHours: number
    requiresFixedSchedule: number
    fixedShiftPattern: number
    maxTravelTime: number
    workLocation: number
    hasReliableTransport: number
    needsAccommodation: number
    accommodationDetails: number
    medicalRestrictions: number
    certificationRequired: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployeeConstraintsAvgAggregateInputType = {
    id?: true
    employeeId?: true
    maxShiftsPerWeek?: true
    maxOvertimeHours?: true
    maxTravelTime?: true
  }

  export type EmployeeConstraintsSumAggregateInputType = {
    id?: true
    employeeId?: true
    maxShiftsPerWeek?: true
    maxOvertimeHours?: true
    maxTravelTime?: true
  }

  export type EmployeeConstraintsMinAggregateInputType = {
    id?: true
    employeeId?: true
    canWorkWeekends?: true
    canWorkHolidays?: true
    canWorkNightShifts?: true
    maxShiftsPerWeek?: true
    maxOvertimeHours?: true
    requiresFixedSchedule?: true
    fixedShiftPattern?: true
    maxTravelTime?: true
    workLocation?: true
    hasReliableTransport?: true
    needsAccommodation?: true
    accommodationDetails?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeConstraintsMaxAggregateInputType = {
    id?: true
    employeeId?: true
    canWorkWeekends?: true
    canWorkHolidays?: true
    canWorkNightShifts?: true
    maxShiftsPerWeek?: true
    maxOvertimeHours?: true
    requiresFixedSchedule?: true
    fixedShiftPattern?: true
    maxTravelTime?: true
    workLocation?: true
    hasReliableTransport?: true
    needsAccommodation?: true
    accommodationDetails?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeConstraintsCountAggregateInputType = {
    id?: true
    employeeId?: true
    unavailableTimeSlots?: true
    preferredTimeSlots?: true
    blackoutDates?: true
    preferredShiftTypes?: true
    avoidShiftTypes?: true
    canWorkWeekends?: true
    canWorkHolidays?: true
    canWorkNightShifts?: true
    maxShiftsPerWeek?: true
    maxOvertimeHours?: true
    requiresFixedSchedule?: true
    fixedShiftPattern?: true
    maxTravelTime?: true
    workLocation?: true
    hasReliableTransport?: true
    needsAccommodation?: true
    accommodationDetails?: true
    medicalRestrictions?: true
    certificationRequired?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployeeConstraintsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeConstraints to aggregate.
     */
    where?: EmployeeConstraintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeConstraints to fetch.
     */
    orderBy?: EmployeeConstraintsOrderByWithRelationInput | EmployeeConstraintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeConstraintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeConstraints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeConstraints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeConstraints
    **/
    _count?: true | EmployeeConstraintsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeConstraintsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeConstraintsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeConstraintsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeConstraintsMaxAggregateInputType
  }

  export type GetEmployeeConstraintsAggregateType<T extends EmployeeConstraintsAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeConstraints]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeConstraints[P]>
      : GetScalarType<T[P], AggregateEmployeeConstraints[P]>
  }




  export type EmployeeConstraintsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeConstraintsWhereInput
    orderBy?: EmployeeConstraintsOrderByWithAggregationInput | EmployeeConstraintsOrderByWithAggregationInput[]
    by: EmployeeConstraintsScalarFieldEnum[] | EmployeeConstraintsScalarFieldEnum
    having?: EmployeeConstraintsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeConstraintsCountAggregateInputType | true
    _avg?: EmployeeConstraintsAvgAggregateInputType
    _sum?: EmployeeConstraintsSumAggregateInputType
    _min?: EmployeeConstraintsMinAggregateInputType
    _max?: EmployeeConstraintsMaxAggregateInputType
  }

  export type EmployeeConstraintsGroupByOutputType = {
    id: number
    employeeId: number
    unavailableTimeSlots: JsonValue | null
    preferredTimeSlots: JsonValue | null
    blackoutDates: JsonValue | null
    preferredShiftTypes: JsonValue | null
    avoidShiftTypes: JsonValue | null
    canWorkWeekends: boolean
    canWorkHolidays: boolean
    canWorkNightShifts: boolean
    maxShiftsPerWeek: number
    maxOvertimeHours: number
    requiresFixedSchedule: boolean
    fixedShiftPattern: string | null
    maxTravelTime: number | null
    workLocation: string | null
    hasReliableTransport: boolean
    needsAccommodation: boolean
    accommodationDetails: string | null
    medicalRestrictions: JsonValue | null
    certificationRequired: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: EmployeeConstraintsCountAggregateOutputType | null
    _avg: EmployeeConstraintsAvgAggregateOutputType | null
    _sum: EmployeeConstraintsSumAggregateOutputType | null
    _min: EmployeeConstraintsMinAggregateOutputType | null
    _max: EmployeeConstraintsMaxAggregateOutputType | null
  }

  type GetEmployeeConstraintsGroupByPayload<T extends EmployeeConstraintsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeConstraintsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeConstraintsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeConstraintsGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeConstraintsGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeConstraintsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    unavailableTimeSlots?: boolean
    preferredTimeSlots?: boolean
    blackoutDates?: boolean
    preferredShiftTypes?: boolean
    avoidShiftTypes?: boolean
    canWorkWeekends?: boolean
    canWorkHolidays?: boolean
    canWorkNightShifts?: boolean
    maxShiftsPerWeek?: boolean
    maxOvertimeHours?: boolean
    requiresFixedSchedule?: boolean
    fixedShiftPattern?: boolean
    maxTravelTime?: boolean
    workLocation?: boolean
    hasReliableTransport?: boolean
    needsAccommodation?: boolean
    accommodationDetails?: boolean
    medicalRestrictions?: boolean
    certificationRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeConstraints"]>


  export type EmployeeConstraintsSelectScalar = {
    id?: boolean
    employeeId?: boolean
    unavailableTimeSlots?: boolean
    preferredTimeSlots?: boolean
    blackoutDates?: boolean
    preferredShiftTypes?: boolean
    avoidShiftTypes?: boolean
    canWorkWeekends?: boolean
    canWorkHolidays?: boolean
    canWorkNightShifts?: boolean
    maxShiftsPerWeek?: boolean
    maxOvertimeHours?: boolean
    requiresFixedSchedule?: boolean
    fixedShiftPattern?: boolean
    maxTravelTime?: boolean
    workLocation?: boolean
    hasReliableTransport?: boolean
    needsAccommodation?: boolean
    accommodationDetails?: boolean
    medicalRestrictions?: boolean
    certificationRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployeeConstraintsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $EmployeeConstraintsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeConstraints"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      unavailableTimeSlots: Prisma.JsonValue | null
      preferredTimeSlots: Prisma.JsonValue | null
      blackoutDates: Prisma.JsonValue | null
      preferredShiftTypes: Prisma.JsonValue | null
      avoidShiftTypes: Prisma.JsonValue | null
      canWorkWeekends: boolean
      canWorkHolidays: boolean
      canWorkNightShifts: boolean
      maxShiftsPerWeek: number
      maxOvertimeHours: number
      requiresFixedSchedule: boolean
      fixedShiftPattern: string | null
      maxTravelTime: number | null
      workLocation: string | null
      hasReliableTransport: boolean
      needsAccommodation: boolean
      accommodationDetails: string | null
      medicalRestrictions: Prisma.JsonValue | null
      certificationRequired: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employeeConstraints"]>
    composites: {}
  }

  type EmployeeConstraintsGetPayload<S extends boolean | null | undefined | EmployeeConstraintsDefaultArgs> = $Result.GetResult<Prisma.$EmployeeConstraintsPayload, S>

  type EmployeeConstraintsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeConstraintsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeConstraintsCountAggregateInputType | true
    }

  export interface EmployeeConstraintsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeConstraints'], meta: { name: 'EmployeeConstraints' } }
    /**
     * Find zero or one EmployeeConstraints that matches the filter.
     * @param {EmployeeConstraintsFindUniqueArgs} args - Arguments to find a EmployeeConstraints
     * @example
     * // Get one EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeConstraintsFindUniqueArgs>(args: SelectSubset<T, EmployeeConstraintsFindUniqueArgs<ExtArgs>>): Prisma__EmployeeConstraintsClient<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmployeeConstraints that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeConstraintsFindUniqueOrThrowArgs} args - Arguments to find a EmployeeConstraints
     * @example
     * // Get one EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeConstraintsFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeConstraintsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeConstraintsClient<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmployeeConstraints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeConstraintsFindFirstArgs} args - Arguments to find a EmployeeConstraints
     * @example
     * // Get one EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeConstraintsFindFirstArgs>(args?: SelectSubset<T, EmployeeConstraintsFindFirstArgs<ExtArgs>>): Prisma__EmployeeConstraintsClient<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmployeeConstraints that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeConstraintsFindFirstOrThrowArgs} args - Arguments to find a EmployeeConstraints
     * @example
     * // Get one EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeConstraintsFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeConstraintsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeConstraintsClient<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmployeeConstraints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeConstraintsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.findMany()
     * 
     * // Get first 10 EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeConstraintsWithIdOnly = await prisma.employeeConstraints.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeConstraintsFindManyArgs>(args?: SelectSubset<T, EmployeeConstraintsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmployeeConstraints.
     * @param {EmployeeConstraintsCreateArgs} args - Arguments to create a EmployeeConstraints.
     * @example
     * // Create one EmployeeConstraints
     * const EmployeeConstraints = await prisma.employeeConstraints.create({
     *   data: {
     *     // ... data to create a EmployeeConstraints
     *   }
     * })
     * 
     */
    create<T extends EmployeeConstraintsCreateArgs>(args: SelectSubset<T, EmployeeConstraintsCreateArgs<ExtArgs>>): Prisma__EmployeeConstraintsClient<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmployeeConstraints.
     * @param {EmployeeConstraintsCreateManyArgs} args - Arguments to create many EmployeeConstraints.
     * @example
     * // Create many EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeConstraintsCreateManyArgs>(args?: SelectSubset<T, EmployeeConstraintsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmployeeConstraints.
     * @param {EmployeeConstraintsDeleteArgs} args - Arguments to delete one EmployeeConstraints.
     * @example
     * // Delete one EmployeeConstraints
     * const EmployeeConstraints = await prisma.employeeConstraints.delete({
     *   where: {
     *     // ... filter to delete one EmployeeConstraints
     *   }
     * })
     * 
     */
    delete<T extends EmployeeConstraintsDeleteArgs>(args: SelectSubset<T, EmployeeConstraintsDeleteArgs<ExtArgs>>): Prisma__EmployeeConstraintsClient<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmployeeConstraints.
     * @param {EmployeeConstraintsUpdateArgs} args - Arguments to update one EmployeeConstraints.
     * @example
     * // Update one EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeConstraintsUpdateArgs>(args: SelectSubset<T, EmployeeConstraintsUpdateArgs<ExtArgs>>): Prisma__EmployeeConstraintsClient<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmployeeConstraints.
     * @param {EmployeeConstraintsDeleteManyArgs} args - Arguments to filter EmployeeConstraints to delete.
     * @example
     * // Delete a few EmployeeConstraints
     * const { count } = await prisma.employeeConstraints.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeConstraintsDeleteManyArgs>(args?: SelectSubset<T, EmployeeConstraintsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeConstraints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeConstraintsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeConstraintsUpdateManyArgs>(args: SelectSubset<T, EmployeeConstraintsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployeeConstraints.
     * @param {EmployeeConstraintsUpsertArgs} args - Arguments to update or create a EmployeeConstraints.
     * @example
     * // Update or create a EmployeeConstraints
     * const employeeConstraints = await prisma.employeeConstraints.upsert({
     *   create: {
     *     // ... data to create a EmployeeConstraints
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeConstraints we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeConstraintsUpsertArgs>(args: SelectSubset<T, EmployeeConstraintsUpsertArgs<ExtArgs>>): Prisma__EmployeeConstraintsClient<$Result.GetResult<Prisma.$EmployeeConstraintsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmployeeConstraints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeConstraintsCountArgs} args - Arguments to filter EmployeeConstraints to count.
     * @example
     * // Count the number of EmployeeConstraints
     * const count = await prisma.employeeConstraints.count({
     *   where: {
     *     // ... the filter for the EmployeeConstraints we want to count
     *   }
     * })
    **/
    count<T extends EmployeeConstraintsCountArgs>(
      args?: Subset<T, EmployeeConstraintsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeConstraintsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeConstraints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeConstraintsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeConstraintsAggregateArgs>(args: Subset<T, EmployeeConstraintsAggregateArgs>): Prisma.PrismaPromise<GetEmployeeConstraintsAggregateType<T>>

    /**
     * Group by EmployeeConstraints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeConstraintsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeConstraintsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeConstraintsGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeConstraintsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeConstraintsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeConstraintsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeConstraints model
   */
  readonly fields: EmployeeConstraintsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeConstraints.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeConstraintsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeConstraints model
   */ 
  interface EmployeeConstraintsFieldRefs {
    readonly id: FieldRef<"EmployeeConstraints", 'Int'>
    readonly employeeId: FieldRef<"EmployeeConstraints", 'Int'>
    readonly unavailableTimeSlots: FieldRef<"EmployeeConstraints", 'Json'>
    readonly preferredTimeSlots: FieldRef<"EmployeeConstraints", 'Json'>
    readonly blackoutDates: FieldRef<"EmployeeConstraints", 'Json'>
    readonly preferredShiftTypes: FieldRef<"EmployeeConstraints", 'Json'>
    readonly avoidShiftTypes: FieldRef<"EmployeeConstraints", 'Json'>
    readonly canWorkWeekends: FieldRef<"EmployeeConstraints", 'Boolean'>
    readonly canWorkHolidays: FieldRef<"EmployeeConstraints", 'Boolean'>
    readonly canWorkNightShifts: FieldRef<"EmployeeConstraints", 'Boolean'>
    readonly maxShiftsPerWeek: FieldRef<"EmployeeConstraints", 'Int'>
    readonly maxOvertimeHours: FieldRef<"EmployeeConstraints", 'Int'>
    readonly requiresFixedSchedule: FieldRef<"EmployeeConstraints", 'Boolean'>
    readonly fixedShiftPattern: FieldRef<"EmployeeConstraints", 'String'>
    readonly maxTravelTime: FieldRef<"EmployeeConstraints", 'Int'>
    readonly workLocation: FieldRef<"EmployeeConstraints", 'String'>
    readonly hasReliableTransport: FieldRef<"EmployeeConstraints", 'Boolean'>
    readonly needsAccommodation: FieldRef<"EmployeeConstraints", 'Boolean'>
    readonly accommodationDetails: FieldRef<"EmployeeConstraints", 'String'>
    readonly medicalRestrictions: FieldRef<"EmployeeConstraints", 'Json'>
    readonly certificationRequired: FieldRef<"EmployeeConstraints", 'Json'>
    readonly createdAt: FieldRef<"EmployeeConstraints", 'DateTime'>
    readonly updatedAt: FieldRef<"EmployeeConstraints", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeConstraints findUnique
   */
  export type EmployeeConstraintsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeConstraints to fetch.
     */
    where: EmployeeConstraintsWhereUniqueInput
  }

  /**
   * EmployeeConstraints findUniqueOrThrow
   */
  export type EmployeeConstraintsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeConstraints to fetch.
     */
    where: EmployeeConstraintsWhereUniqueInput
  }

  /**
   * EmployeeConstraints findFirst
   */
  export type EmployeeConstraintsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeConstraints to fetch.
     */
    where?: EmployeeConstraintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeConstraints to fetch.
     */
    orderBy?: EmployeeConstraintsOrderByWithRelationInput | EmployeeConstraintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeConstraints.
     */
    cursor?: EmployeeConstraintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeConstraints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeConstraints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeConstraints.
     */
    distinct?: EmployeeConstraintsScalarFieldEnum | EmployeeConstraintsScalarFieldEnum[]
  }

  /**
   * EmployeeConstraints findFirstOrThrow
   */
  export type EmployeeConstraintsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeConstraints to fetch.
     */
    where?: EmployeeConstraintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeConstraints to fetch.
     */
    orderBy?: EmployeeConstraintsOrderByWithRelationInput | EmployeeConstraintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeConstraints.
     */
    cursor?: EmployeeConstraintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeConstraints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeConstraints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeConstraints.
     */
    distinct?: EmployeeConstraintsScalarFieldEnum | EmployeeConstraintsScalarFieldEnum[]
  }

  /**
   * EmployeeConstraints findMany
   */
  export type EmployeeConstraintsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeConstraints to fetch.
     */
    where?: EmployeeConstraintsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeConstraints to fetch.
     */
    orderBy?: EmployeeConstraintsOrderByWithRelationInput | EmployeeConstraintsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeConstraints.
     */
    cursor?: EmployeeConstraintsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeConstraints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeConstraints.
     */
    skip?: number
    distinct?: EmployeeConstraintsScalarFieldEnum | EmployeeConstraintsScalarFieldEnum[]
  }

  /**
   * EmployeeConstraints create
   */
  export type EmployeeConstraintsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployeeConstraints.
     */
    data: XOR<EmployeeConstraintsCreateInput, EmployeeConstraintsUncheckedCreateInput>
  }

  /**
   * EmployeeConstraints createMany
   */
  export type EmployeeConstraintsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeConstraints.
     */
    data: EmployeeConstraintsCreateManyInput | EmployeeConstraintsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployeeConstraints update
   */
  export type EmployeeConstraintsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployeeConstraints.
     */
    data: XOR<EmployeeConstraintsUpdateInput, EmployeeConstraintsUncheckedUpdateInput>
    /**
     * Choose, which EmployeeConstraints to update.
     */
    where: EmployeeConstraintsWhereUniqueInput
  }

  /**
   * EmployeeConstraints updateMany
   */
  export type EmployeeConstraintsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeConstraints.
     */
    data: XOR<EmployeeConstraintsUpdateManyMutationInput, EmployeeConstraintsUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeConstraints to update
     */
    where?: EmployeeConstraintsWhereInput
  }

  /**
   * EmployeeConstraints upsert
   */
  export type EmployeeConstraintsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployeeConstraints to update in case it exists.
     */
    where: EmployeeConstraintsWhereUniqueInput
    /**
     * In case the EmployeeConstraints found by the `where` argument doesn't exist, create a new EmployeeConstraints with this data.
     */
    create: XOR<EmployeeConstraintsCreateInput, EmployeeConstraintsUncheckedCreateInput>
    /**
     * In case the EmployeeConstraints was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeConstraintsUpdateInput, EmployeeConstraintsUncheckedUpdateInput>
  }

  /**
   * EmployeeConstraints delete
   */
  export type EmployeeConstraintsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
    /**
     * Filter which EmployeeConstraints to delete.
     */
    where: EmployeeConstraintsWhereUniqueInput
  }

  /**
   * EmployeeConstraints deleteMany
   */
  export type EmployeeConstraintsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeConstraints to delete
     */
    where?: EmployeeConstraintsWhereInput
  }

  /**
   * EmployeeConstraints without action
   */
  export type EmployeeConstraintsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeConstraints
     */
    select?: EmployeeConstraintsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeConstraintsInclude<ExtArgs> | null
  }


  /**
   * Model GenerationLog
   */

  export type AggregateGenerationLog = {
    _count: GenerationLogCountAggregateOutputType | null
    _avg: GenerationLogAvgAggregateOutputType | null
    _sum: GenerationLogSumAggregateOutputType | null
    _min: GenerationLogMinAggregateOutputType | null
    _max: GenerationLogMaxAggregateOutputType | null
  }

  export type GenerationLogAvgAggregateOutputType = {
    id: number | null
    templateId: number | null
    generatedBy: number | null
    totalSchedulesCreated: number | null
    totalEmployeesAffected: number | null
    coverageAchieved: number | null
    employeeSatisfaction: number | null
    executionTime: number | null
  }

  export type GenerationLogSumAggregateOutputType = {
    id: number | null
    templateId: number | null
    generatedBy: number | null
    totalSchedulesCreated: number | null
    totalEmployeesAffected: number | null
    coverageAchieved: number | null
    employeeSatisfaction: number | null
    executionTime: number | null
  }

  export type GenerationLogMinAggregateOutputType = {
    id: number | null
    templateId: number | null
    generatedBy: number | null
    generationType: string | null
    periodStart: Date | null
    periodEnd: Date | null
    totalSchedulesCreated: number | null
    totalEmployeesAffected: number | null
    coverageAchieved: number | null
    employeeSatisfaction: number | null
    executionTime: number | null
    algorithmVersion: string | null
    status: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type GenerationLogMaxAggregateOutputType = {
    id: number | null
    templateId: number | null
    generatedBy: number | null
    generationType: string | null
    periodStart: Date | null
    periodEnd: Date | null
    totalSchedulesCreated: number | null
    totalEmployeesAffected: number | null
    coverageAchieved: number | null
    employeeSatisfaction: number | null
    executionTime: number | null
    algorithmVersion: string | null
    status: string | null
    notes: string | null
    createdAt: Date | null
  }

  export type GenerationLogCountAggregateOutputType = {
    id: number
    templateId: number
    generatedBy: number
    generationType: number
    periodStart: number
    periodEnd: number
    totalSchedulesCreated: number
    totalEmployeesAffected: number
    parameters: number
    constraints: number
    coverageAchieved: number
    employeeSatisfaction: number
    constraintViolations: number
    warnings: number
    errors: number
    executionTime: number
    algorithmVersion: number
    status: number
    notes: number
    createdAt: number
    _all: number
  }


  export type GenerationLogAvgAggregateInputType = {
    id?: true
    templateId?: true
    generatedBy?: true
    totalSchedulesCreated?: true
    totalEmployeesAffected?: true
    coverageAchieved?: true
    employeeSatisfaction?: true
    executionTime?: true
  }

  export type GenerationLogSumAggregateInputType = {
    id?: true
    templateId?: true
    generatedBy?: true
    totalSchedulesCreated?: true
    totalEmployeesAffected?: true
    coverageAchieved?: true
    employeeSatisfaction?: true
    executionTime?: true
  }

  export type GenerationLogMinAggregateInputType = {
    id?: true
    templateId?: true
    generatedBy?: true
    generationType?: true
    periodStart?: true
    periodEnd?: true
    totalSchedulesCreated?: true
    totalEmployeesAffected?: true
    coverageAchieved?: true
    employeeSatisfaction?: true
    executionTime?: true
    algorithmVersion?: true
    status?: true
    notes?: true
    createdAt?: true
  }

  export type GenerationLogMaxAggregateInputType = {
    id?: true
    templateId?: true
    generatedBy?: true
    generationType?: true
    periodStart?: true
    periodEnd?: true
    totalSchedulesCreated?: true
    totalEmployeesAffected?: true
    coverageAchieved?: true
    employeeSatisfaction?: true
    executionTime?: true
    algorithmVersion?: true
    status?: true
    notes?: true
    createdAt?: true
  }

  export type GenerationLogCountAggregateInputType = {
    id?: true
    templateId?: true
    generatedBy?: true
    generationType?: true
    periodStart?: true
    periodEnd?: true
    totalSchedulesCreated?: true
    totalEmployeesAffected?: true
    parameters?: true
    constraints?: true
    coverageAchieved?: true
    employeeSatisfaction?: true
    constraintViolations?: true
    warnings?: true
    errors?: true
    executionTime?: true
    algorithmVersion?: true
    status?: true
    notes?: true
    createdAt?: true
    _all?: true
  }

  export type GenerationLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GenerationLog to aggregate.
     */
    where?: GenerationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenerationLogs to fetch.
     */
    orderBy?: GenerationLogOrderByWithRelationInput | GenerationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenerationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenerationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenerationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GenerationLogs
    **/
    _count?: true | GenerationLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenerationLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenerationLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenerationLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenerationLogMaxAggregateInputType
  }

  export type GetGenerationLogAggregateType<T extends GenerationLogAggregateArgs> = {
        [P in keyof T & keyof AggregateGenerationLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenerationLog[P]>
      : GetScalarType<T[P], AggregateGenerationLog[P]>
  }




  export type GenerationLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenerationLogWhereInput
    orderBy?: GenerationLogOrderByWithAggregationInput | GenerationLogOrderByWithAggregationInput[]
    by: GenerationLogScalarFieldEnum[] | GenerationLogScalarFieldEnum
    having?: GenerationLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenerationLogCountAggregateInputType | true
    _avg?: GenerationLogAvgAggregateInputType
    _sum?: GenerationLogSumAggregateInputType
    _min?: GenerationLogMinAggregateInputType
    _max?: GenerationLogMaxAggregateInputType
  }

  export type GenerationLogGroupByOutputType = {
    id: number
    templateId: number | null
    generatedBy: number
    generationType: string
    periodStart: Date
    periodEnd: Date
    totalSchedulesCreated: number
    totalEmployeesAffected: number
    parameters: JsonValue
    constraints: JsonValue | null
    coverageAchieved: number | null
    employeeSatisfaction: number | null
    constraintViolations: JsonValue | null
    warnings: JsonValue | null
    errors: JsonValue | null
    executionTime: number | null
    algorithmVersion: string
    status: string
    notes: string | null
    createdAt: Date
    _count: GenerationLogCountAggregateOutputType | null
    _avg: GenerationLogAvgAggregateOutputType | null
    _sum: GenerationLogSumAggregateOutputType | null
    _min: GenerationLogMinAggregateOutputType | null
    _max: GenerationLogMaxAggregateOutputType | null
  }

  type GetGenerationLogGroupByPayload<T extends GenerationLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GenerationLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenerationLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenerationLogGroupByOutputType[P]>
            : GetScalarType<T[P], GenerationLogGroupByOutputType[P]>
        }
      >
    >


  export type GenerationLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    generatedBy?: boolean
    generationType?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    totalSchedulesCreated?: boolean
    totalEmployeesAffected?: boolean
    parameters?: boolean
    constraints?: boolean
    coverageAchieved?: boolean
    employeeSatisfaction?: boolean
    constraintViolations?: boolean
    warnings?: boolean
    errors?: boolean
    executionTime?: boolean
    algorithmVersion?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    template?: boolean | GenerationLog$templateArgs<ExtArgs>
    schedules?: boolean | GenerationLog$schedulesArgs<ExtArgs>
    _count?: boolean | GenerationLogCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generationLog"]>


  export type GenerationLogSelectScalar = {
    id?: boolean
    templateId?: boolean
    generatedBy?: boolean
    generationType?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    totalSchedulesCreated?: boolean
    totalEmployeesAffected?: boolean
    parameters?: boolean
    constraints?: boolean
    coverageAchieved?: boolean
    employeeSatisfaction?: boolean
    constraintViolations?: boolean
    warnings?: boolean
    errors?: boolean
    executionTime?: boolean
    algorithmVersion?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
  }

  export type GenerationLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | GenerationLog$templateArgs<ExtArgs>
    schedules?: boolean | GenerationLog$schedulesArgs<ExtArgs>
    _count?: boolean | GenerationLogCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $GenerationLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GenerationLog"
    objects: {
      template: Prisma.$ScheduleTemplatePayload<ExtArgs> | null
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      templateId: number | null
      generatedBy: number
      generationType: string
      periodStart: Date
      periodEnd: Date
      totalSchedulesCreated: number
      totalEmployeesAffected: number
      parameters: Prisma.JsonValue
      constraints: Prisma.JsonValue | null
      coverageAchieved: number | null
      employeeSatisfaction: number | null
      constraintViolations: Prisma.JsonValue | null
      warnings: Prisma.JsonValue | null
      errors: Prisma.JsonValue | null
      executionTime: number | null
      algorithmVersion: string
      status: string
      notes: string | null
      createdAt: Date
    }, ExtArgs["result"]["generationLog"]>
    composites: {}
  }

  type GenerationLogGetPayload<S extends boolean | null | undefined | GenerationLogDefaultArgs> = $Result.GetResult<Prisma.$GenerationLogPayload, S>

  type GenerationLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GenerationLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GenerationLogCountAggregateInputType | true
    }

  export interface GenerationLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GenerationLog'], meta: { name: 'GenerationLog' } }
    /**
     * Find zero or one GenerationLog that matches the filter.
     * @param {GenerationLogFindUniqueArgs} args - Arguments to find a GenerationLog
     * @example
     * // Get one GenerationLog
     * const generationLog = await prisma.generationLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GenerationLogFindUniqueArgs>(args: SelectSubset<T, GenerationLogFindUniqueArgs<ExtArgs>>): Prisma__GenerationLogClient<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GenerationLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GenerationLogFindUniqueOrThrowArgs} args - Arguments to find a GenerationLog
     * @example
     * // Get one GenerationLog
     * const generationLog = await prisma.generationLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GenerationLogFindUniqueOrThrowArgs>(args: SelectSubset<T, GenerationLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GenerationLogClient<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GenerationLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationLogFindFirstArgs} args - Arguments to find a GenerationLog
     * @example
     * // Get one GenerationLog
     * const generationLog = await prisma.generationLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GenerationLogFindFirstArgs>(args?: SelectSubset<T, GenerationLogFindFirstArgs<ExtArgs>>): Prisma__GenerationLogClient<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GenerationLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationLogFindFirstOrThrowArgs} args - Arguments to find a GenerationLog
     * @example
     * // Get one GenerationLog
     * const generationLog = await prisma.generationLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GenerationLogFindFirstOrThrowArgs>(args?: SelectSubset<T, GenerationLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__GenerationLogClient<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GenerationLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GenerationLogs
     * const generationLogs = await prisma.generationLog.findMany()
     * 
     * // Get first 10 GenerationLogs
     * const generationLogs = await prisma.generationLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generationLogWithIdOnly = await prisma.generationLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GenerationLogFindManyArgs>(args?: SelectSubset<T, GenerationLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GenerationLog.
     * @param {GenerationLogCreateArgs} args - Arguments to create a GenerationLog.
     * @example
     * // Create one GenerationLog
     * const GenerationLog = await prisma.generationLog.create({
     *   data: {
     *     // ... data to create a GenerationLog
     *   }
     * })
     * 
     */
    create<T extends GenerationLogCreateArgs>(args: SelectSubset<T, GenerationLogCreateArgs<ExtArgs>>): Prisma__GenerationLogClient<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GenerationLogs.
     * @param {GenerationLogCreateManyArgs} args - Arguments to create many GenerationLogs.
     * @example
     * // Create many GenerationLogs
     * const generationLog = await prisma.generationLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GenerationLogCreateManyArgs>(args?: SelectSubset<T, GenerationLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GenerationLog.
     * @param {GenerationLogDeleteArgs} args - Arguments to delete one GenerationLog.
     * @example
     * // Delete one GenerationLog
     * const GenerationLog = await prisma.generationLog.delete({
     *   where: {
     *     // ... filter to delete one GenerationLog
     *   }
     * })
     * 
     */
    delete<T extends GenerationLogDeleteArgs>(args: SelectSubset<T, GenerationLogDeleteArgs<ExtArgs>>): Prisma__GenerationLogClient<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GenerationLog.
     * @param {GenerationLogUpdateArgs} args - Arguments to update one GenerationLog.
     * @example
     * // Update one GenerationLog
     * const generationLog = await prisma.generationLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GenerationLogUpdateArgs>(args: SelectSubset<T, GenerationLogUpdateArgs<ExtArgs>>): Prisma__GenerationLogClient<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GenerationLogs.
     * @param {GenerationLogDeleteManyArgs} args - Arguments to filter GenerationLogs to delete.
     * @example
     * // Delete a few GenerationLogs
     * const { count } = await prisma.generationLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GenerationLogDeleteManyArgs>(args?: SelectSubset<T, GenerationLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GenerationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GenerationLogs
     * const generationLog = await prisma.generationLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GenerationLogUpdateManyArgs>(args: SelectSubset<T, GenerationLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GenerationLog.
     * @param {GenerationLogUpsertArgs} args - Arguments to update or create a GenerationLog.
     * @example
     * // Update or create a GenerationLog
     * const generationLog = await prisma.generationLog.upsert({
     *   create: {
     *     // ... data to create a GenerationLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GenerationLog we want to update
     *   }
     * })
     */
    upsert<T extends GenerationLogUpsertArgs>(args: SelectSubset<T, GenerationLogUpsertArgs<ExtArgs>>): Prisma__GenerationLogClient<$Result.GetResult<Prisma.$GenerationLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GenerationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationLogCountArgs} args - Arguments to filter GenerationLogs to count.
     * @example
     * // Count the number of GenerationLogs
     * const count = await prisma.generationLog.count({
     *   where: {
     *     // ... the filter for the GenerationLogs we want to count
     *   }
     * })
    **/
    count<T extends GenerationLogCountArgs>(
      args?: Subset<T, GenerationLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenerationLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GenerationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenerationLogAggregateArgs>(args: Subset<T, GenerationLogAggregateArgs>): Prisma.PrismaPromise<GetGenerationLogAggregateType<T>>

    /**
     * Group by GenerationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenerationLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenerationLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenerationLogGroupByArgs['orderBy'] }
        : { orderBy?: GenerationLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenerationLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenerationLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GenerationLog model
   */
  readonly fields: GenerationLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GenerationLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GenerationLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends GenerationLog$templateArgs<ExtArgs> = {}>(args?: Subset<T, GenerationLog$templateArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    schedules<T extends GenerationLog$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, GenerationLog$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GenerationLog model
   */ 
  interface GenerationLogFieldRefs {
    readonly id: FieldRef<"GenerationLog", 'Int'>
    readonly templateId: FieldRef<"GenerationLog", 'Int'>
    readonly generatedBy: FieldRef<"GenerationLog", 'Int'>
    readonly generationType: FieldRef<"GenerationLog", 'String'>
    readonly periodStart: FieldRef<"GenerationLog", 'DateTime'>
    readonly periodEnd: FieldRef<"GenerationLog", 'DateTime'>
    readonly totalSchedulesCreated: FieldRef<"GenerationLog", 'Int'>
    readonly totalEmployeesAffected: FieldRef<"GenerationLog", 'Int'>
    readonly parameters: FieldRef<"GenerationLog", 'Json'>
    readonly constraints: FieldRef<"GenerationLog", 'Json'>
    readonly coverageAchieved: FieldRef<"GenerationLog", 'Float'>
    readonly employeeSatisfaction: FieldRef<"GenerationLog", 'Float'>
    readonly constraintViolations: FieldRef<"GenerationLog", 'Json'>
    readonly warnings: FieldRef<"GenerationLog", 'Json'>
    readonly errors: FieldRef<"GenerationLog", 'Json'>
    readonly executionTime: FieldRef<"GenerationLog", 'Int'>
    readonly algorithmVersion: FieldRef<"GenerationLog", 'String'>
    readonly status: FieldRef<"GenerationLog", 'String'>
    readonly notes: FieldRef<"GenerationLog", 'String'>
    readonly createdAt: FieldRef<"GenerationLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GenerationLog findUnique
   */
  export type GenerationLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    /**
     * Filter, which GenerationLog to fetch.
     */
    where: GenerationLogWhereUniqueInput
  }

  /**
   * GenerationLog findUniqueOrThrow
   */
  export type GenerationLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    /**
     * Filter, which GenerationLog to fetch.
     */
    where: GenerationLogWhereUniqueInput
  }

  /**
   * GenerationLog findFirst
   */
  export type GenerationLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    /**
     * Filter, which GenerationLog to fetch.
     */
    where?: GenerationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenerationLogs to fetch.
     */
    orderBy?: GenerationLogOrderByWithRelationInput | GenerationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GenerationLogs.
     */
    cursor?: GenerationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenerationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenerationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GenerationLogs.
     */
    distinct?: GenerationLogScalarFieldEnum | GenerationLogScalarFieldEnum[]
  }

  /**
   * GenerationLog findFirstOrThrow
   */
  export type GenerationLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    /**
     * Filter, which GenerationLog to fetch.
     */
    where?: GenerationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenerationLogs to fetch.
     */
    orderBy?: GenerationLogOrderByWithRelationInput | GenerationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GenerationLogs.
     */
    cursor?: GenerationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenerationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenerationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GenerationLogs.
     */
    distinct?: GenerationLogScalarFieldEnum | GenerationLogScalarFieldEnum[]
  }

  /**
   * GenerationLog findMany
   */
  export type GenerationLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    /**
     * Filter, which GenerationLogs to fetch.
     */
    where?: GenerationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenerationLogs to fetch.
     */
    orderBy?: GenerationLogOrderByWithRelationInput | GenerationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GenerationLogs.
     */
    cursor?: GenerationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenerationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenerationLogs.
     */
    skip?: number
    distinct?: GenerationLogScalarFieldEnum | GenerationLogScalarFieldEnum[]
  }

  /**
   * GenerationLog create
   */
  export type GenerationLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    /**
     * The data needed to create a GenerationLog.
     */
    data: XOR<GenerationLogCreateInput, GenerationLogUncheckedCreateInput>
  }

  /**
   * GenerationLog createMany
   */
  export type GenerationLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GenerationLogs.
     */
    data: GenerationLogCreateManyInput | GenerationLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GenerationLog update
   */
  export type GenerationLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    /**
     * The data needed to update a GenerationLog.
     */
    data: XOR<GenerationLogUpdateInput, GenerationLogUncheckedUpdateInput>
    /**
     * Choose, which GenerationLog to update.
     */
    where: GenerationLogWhereUniqueInput
  }

  /**
   * GenerationLog updateMany
   */
  export type GenerationLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GenerationLogs.
     */
    data: XOR<GenerationLogUpdateManyMutationInput, GenerationLogUncheckedUpdateManyInput>
    /**
     * Filter which GenerationLogs to update
     */
    where?: GenerationLogWhereInput
  }

  /**
   * GenerationLog upsert
   */
  export type GenerationLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    /**
     * The filter to search for the GenerationLog to update in case it exists.
     */
    where: GenerationLogWhereUniqueInput
    /**
     * In case the GenerationLog found by the `where` argument doesn't exist, create a new GenerationLog with this data.
     */
    create: XOR<GenerationLogCreateInput, GenerationLogUncheckedCreateInput>
    /**
     * In case the GenerationLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenerationLogUpdateInput, GenerationLogUncheckedUpdateInput>
  }

  /**
   * GenerationLog delete
   */
  export type GenerationLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
    /**
     * Filter which GenerationLog to delete.
     */
    where: GenerationLogWhereUniqueInput
  }

  /**
   * GenerationLog deleteMany
   */
  export type GenerationLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GenerationLogs to delete
     */
    where?: GenerationLogWhereInput
  }

  /**
   * GenerationLog.template
   */
  export type GenerationLog$templateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    where?: ScheduleTemplateWhereInput
  }

  /**
   * GenerationLog.schedules
   */
  export type GenerationLog$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * GenerationLog without action
   */
  export type GenerationLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenerationLog
     */
    select?: GenerationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenerationLogInclude<ExtArgs> | null
  }


  /**
   * Model EmployeeCertification
   */

  export type AggregateEmployeeCertification = {
    _count: EmployeeCertificationCountAggregateOutputType | null
    _avg: EmployeeCertificationAvgAggregateOutputType | null
    _sum: EmployeeCertificationSumAggregateOutputType | null
    _min: EmployeeCertificationMinAggregateOutputType | null
    _max: EmployeeCertificationMaxAggregateOutputType | null
  }

  export type EmployeeCertificationAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type EmployeeCertificationSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
  }

  export type EmployeeCertificationMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    certificationName: string | null
    certificationBody: string | null
    issueDate: Date | null
    expiryDate: Date | null
    certificateNumber: string | null
    isActive: boolean | null
    verificationStatus: string | null
    attachmentUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeCertificationMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    certificationName: string | null
    certificationBody: string | null
    issueDate: Date | null
    expiryDate: Date | null
    certificateNumber: string | null
    isActive: boolean | null
    verificationStatus: string | null
    attachmentUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeCertificationCountAggregateOutputType = {
    id: number
    employeeId: number
    certificationName: number
    certificationBody: number
    issueDate: number
    expiryDate: number
    certificateNumber: number
    isActive: number
    verificationStatus: number
    attachmentUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployeeCertificationAvgAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type EmployeeCertificationSumAggregateInputType = {
    id?: true
    employeeId?: true
  }

  export type EmployeeCertificationMinAggregateInputType = {
    id?: true
    employeeId?: true
    certificationName?: true
    certificationBody?: true
    issueDate?: true
    expiryDate?: true
    certificateNumber?: true
    isActive?: true
    verificationStatus?: true
    attachmentUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeCertificationMaxAggregateInputType = {
    id?: true
    employeeId?: true
    certificationName?: true
    certificationBody?: true
    issueDate?: true
    expiryDate?: true
    certificateNumber?: true
    isActive?: true
    verificationStatus?: true
    attachmentUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeCertificationCountAggregateInputType = {
    id?: true
    employeeId?: true
    certificationName?: true
    certificationBody?: true
    issueDate?: true
    expiryDate?: true
    certificateNumber?: true
    isActive?: true
    verificationStatus?: true
    attachmentUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployeeCertificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeCertification to aggregate.
     */
    where?: EmployeeCertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeCertifications to fetch.
     */
    orderBy?: EmployeeCertificationOrderByWithRelationInput | EmployeeCertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeCertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeCertifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeCertifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeCertifications
    **/
    _count?: true | EmployeeCertificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeCertificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeCertificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeCertificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeCertificationMaxAggregateInputType
  }

  export type GetEmployeeCertificationAggregateType<T extends EmployeeCertificationAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeCertification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeCertification[P]>
      : GetScalarType<T[P], AggregateEmployeeCertification[P]>
  }




  export type EmployeeCertificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeCertificationWhereInput
    orderBy?: EmployeeCertificationOrderByWithAggregationInput | EmployeeCertificationOrderByWithAggregationInput[]
    by: EmployeeCertificationScalarFieldEnum[] | EmployeeCertificationScalarFieldEnum
    having?: EmployeeCertificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCertificationCountAggregateInputType | true
    _avg?: EmployeeCertificationAvgAggregateInputType
    _sum?: EmployeeCertificationSumAggregateInputType
    _min?: EmployeeCertificationMinAggregateInputType
    _max?: EmployeeCertificationMaxAggregateInputType
  }

  export type EmployeeCertificationGroupByOutputType = {
    id: number
    employeeId: number
    certificationName: string
    certificationBody: string | null
    issueDate: Date
    expiryDate: Date | null
    certificateNumber: string | null
    isActive: boolean
    verificationStatus: string
    attachmentUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: EmployeeCertificationCountAggregateOutputType | null
    _avg: EmployeeCertificationAvgAggregateOutputType | null
    _sum: EmployeeCertificationSumAggregateOutputType | null
    _min: EmployeeCertificationMinAggregateOutputType | null
    _max: EmployeeCertificationMaxAggregateOutputType | null
  }

  type GetEmployeeCertificationGroupByPayload<T extends EmployeeCertificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeCertificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeCertificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeCertificationGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeCertificationGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeCertificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    certificationName?: boolean
    certificationBody?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    certificateNumber?: boolean
    isActive?: boolean
    verificationStatus?: boolean
    attachmentUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employeeCertification"]>


  export type EmployeeCertificationSelectScalar = {
    id?: boolean
    employeeId?: boolean
    certificationName?: boolean
    certificationBody?: boolean
    issueDate?: boolean
    expiryDate?: boolean
    certificateNumber?: boolean
    isActive?: boolean
    verificationStatus?: boolean
    attachmentUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployeeCertificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $EmployeeCertificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeCertification"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      certificationName: string
      certificationBody: string | null
      issueDate: Date
      expiryDate: Date | null
      certificateNumber: string | null
      isActive: boolean
      verificationStatus: string
      attachmentUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employeeCertification"]>
    composites: {}
  }

  type EmployeeCertificationGetPayload<S extends boolean | null | undefined | EmployeeCertificationDefaultArgs> = $Result.GetResult<Prisma.$EmployeeCertificationPayload, S>

  type EmployeeCertificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeCertificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeCertificationCountAggregateInputType | true
    }

  export interface EmployeeCertificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeCertification'], meta: { name: 'EmployeeCertification' } }
    /**
     * Find zero or one EmployeeCertification that matches the filter.
     * @param {EmployeeCertificationFindUniqueArgs} args - Arguments to find a EmployeeCertification
     * @example
     * // Get one EmployeeCertification
     * const employeeCertification = await prisma.employeeCertification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeCertificationFindUniqueArgs>(args: SelectSubset<T, EmployeeCertificationFindUniqueArgs<ExtArgs>>): Prisma__EmployeeCertificationClient<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmployeeCertification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeCertificationFindUniqueOrThrowArgs} args - Arguments to find a EmployeeCertification
     * @example
     * // Get one EmployeeCertification
     * const employeeCertification = await prisma.employeeCertification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeCertificationFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeCertificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeCertificationClient<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmployeeCertification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCertificationFindFirstArgs} args - Arguments to find a EmployeeCertification
     * @example
     * // Get one EmployeeCertification
     * const employeeCertification = await prisma.employeeCertification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeCertificationFindFirstArgs>(args?: SelectSubset<T, EmployeeCertificationFindFirstArgs<ExtArgs>>): Prisma__EmployeeCertificationClient<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmployeeCertification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCertificationFindFirstOrThrowArgs} args - Arguments to find a EmployeeCertification
     * @example
     * // Get one EmployeeCertification
     * const employeeCertification = await prisma.employeeCertification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeCertificationFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeCertificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeCertificationClient<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmployeeCertifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCertificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeCertifications
     * const employeeCertifications = await prisma.employeeCertification.findMany()
     * 
     * // Get first 10 EmployeeCertifications
     * const employeeCertifications = await prisma.employeeCertification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeCertificationWithIdOnly = await prisma.employeeCertification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeCertificationFindManyArgs>(args?: SelectSubset<T, EmployeeCertificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmployeeCertification.
     * @param {EmployeeCertificationCreateArgs} args - Arguments to create a EmployeeCertification.
     * @example
     * // Create one EmployeeCertification
     * const EmployeeCertification = await prisma.employeeCertification.create({
     *   data: {
     *     // ... data to create a EmployeeCertification
     *   }
     * })
     * 
     */
    create<T extends EmployeeCertificationCreateArgs>(args: SelectSubset<T, EmployeeCertificationCreateArgs<ExtArgs>>): Prisma__EmployeeCertificationClient<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmployeeCertifications.
     * @param {EmployeeCertificationCreateManyArgs} args - Arguments to create many EmployeeCertifications.
     * @example
     * // Create many EmployeeCertifications
     * const employeeCertification = await prisma.employeeCertification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCertificationCreateManyArgs>(args?: SelectSubset<T, EmployeeCertificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmployeeCertification.
     * @param {EmployeeCertificationDeleteArgs} args - Arguments to delete one EmployeeCertification.
     * @example
     * // Delete one EmployeeCertification
     * const EmployeeCertification = await prisma.employeeCertification.delete({
     *   where: {
     *     // ... filter to delete one EmployeeCertification
     *   }
     * })
     * 
     */
    delete<T extends EmployeeCertificationDeleteArgs>(args: SelectSubset<T, EmployeeCertificationDeleteArgs<ExtArgs>>): Prisma__EmployeeCertificationClient<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmployeeCertification.
     * @param {EmployeeCertificationUpdateArgs} args - Arguments to update one EmployeeCertification.
     * @example
     * // Update one EmployeeCertification
     * const employeeCertification = await prisma.employeeCertification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeCertificationUpdateArgs>(args: SelectSubset<T, EmployeeCertificationUpdateArgs<ExtArgs>>): Prisma__EmployeeCertificationClient<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmployeeCertifications.
     * @param {EmployeeCertificationDeleteManyArgs} args - Arguments to filter EmployeeCertifications to delete.
     * @example
     * // Delete a few EmployeeCertifications
     * const { count } = await prisma.employeeCertification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeCertificationDeleteManyArgs>(args?: SelectSubset<T, EmployeeCertificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeCertifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCertificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeCertifications
     * const employeeCertification = await prisma.employeeCertification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeCertificationUpdateManyArgs>(args: SelectSubset<T, EmployeeCertificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployeeCertification.
     * @param {EmployeeCertificationUpsertArgs} args - Arguments to update or create a EmployeeCertification.
     * @example
     * // Update or create a EmployeeCertification
     * const employeeCertification = await prisma.employeeCertification.upsert({
     *   create: {
     *     // ... data to create a EmployeeCertification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeCertification we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeCertificationUpsertArgs>(args: SelectSubset<T, EmployeeCertificationUpsertArgs<ExtArgs>>): Prisma__EmployeeCertificationClient<$Result.GetResult<Prisma.$EmployeeCertificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmployeeCertifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCertificationCountArgs} args - Arguments to filter EmployeeCertifications to count.
     * @example
     * // Count the number of EmployeeCertifications
     * const count = await prisma.employeeCertification.count({
     *   where: {
     *     // ... the filter for the EmployeeCertifications we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCertificationCountArgs>(
      args?: Subset<T, EmployeeCertificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCertificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeCertification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCertificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeCertificationAggregateArgs>(args: Subset<T, EmployeeCertificationAggregateArgs>): Prisma.PrismaPromise<GetEmployeeCertificationAggregateType<T>>

    /**
     * Group by EmployeeCertification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCertificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeCertificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeCertificationGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeCertificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeCertificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeCertificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeCertification model
   */
  readonly fields: EmployeeCertificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeCertification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeCertificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeCertification model
   */ 
  interface EmployeeCertificationFieldRefs {
    readonly id: FieldRef<"EmployeeCertification", 'Int'>
    readonly employeeId: FieldRef<"EmployeeCertification", 'Int'>
    readonly certificationName: FieldRef<"EmployeeCertification", 'String'>
    readonly certificationBody: FieldRef<"EmployeeCertification", 'String'>
    readonly issueDate: FieldRef<"EmployeeCertification", 'DateTime'>
    readonly expiryDate: FieldRef<"EmployeeCertification", 'DateTime'>
    readonly certificateNumber: FieldRef<"EmployeeCertification", 'String'>
    readonly isActive: FieldRef<"EmployeeCertification", 'Boolean'>
    readonly verificationStatus: FieldRef<"EmployeeCertification", 'String'>
    readonly attachmentUrl: FieldRef<"EmployeeCertification", 'String'>
    readonly createdAt: FieldRef<"EmployeeCertification", 'DateTime'>
    readonly updatedAt: FieldRef<"EmployeeCertification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeCertification findUnique
   */
  export type EmployeeCertificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeCertification to fetch.
     */
    where: EmployeeCertificationWhereUniqueInput
  }

  /**
   * EmployeeCertification findUniqueOrThrow
   */
  export type EmployeeCertificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeCertification to fetch.
     */
    where: EmployeeCertificationWhereUniqueInput
  }

  /**
   * EmployeeCertification findFirst
   */
  export type EmployeeCertificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeCertification to fetch.
     */
    where?: EmployeeCertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeCertifications to fetch.
     */
    orderBy?: EmployeeCertificationOrderByWithRelationInput | EmployeeCertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeCertifications.
     */
    cursor?: EmployeeCertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeCertifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeCertifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeCertifications.
     */
    distinct?: EmployeeCertificationScalarFieldEnum | EmployeeCertificationScalarFieldEnum[]
  }

  /**
   * EmployeeCertification findFirstOrThrow
   */
  export type EmployeeCertificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeCertification to fetch.
     */
    where?: EmployeeCertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeCertifications to fetch.
     */
    orderBy?: EmployeeCertificationOrderByWithRelationInput | EmployeeCertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeCertifications.
     */
    cursor?: EmployeeCertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeCertifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeCertifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeCertifications.
     */
    distinct?: EmployeeCertificationScalarFieldEnum | EmployeeCertificationScalarFieldEnum[]
  }

  /**
   * EmployeeCertification findMany
   */
  export type EmployeeCertificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    /**
     * Filter, which EmployeeCertifications to fetch.
     */
    where?: EmployeeCertificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeCertifications to fetch.
     */
    orderBy?: EmployeeCertificationOrderByWithRelationInput | EmployeeCertificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeCertifications.
     */
    cursor?: EmployeeCertificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeCertifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeCertifications.
     */
    skip?: number
    distinct?: EmployeeCertificationScalarFieldEnum | EmployeeCertificationScalarFieldEnum[]
  }

  /**
   * EmployeeCertification create
   */
  export type EmployeeCertificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployeeCertification.
     */
    data: XOR<EmployeeCertificationCreateInput, EmployeeCertificationUncheckedCreateInput>
  }

  /**
   * EmployeeCertification createMany
   */
  export type EmployeeCertificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeCertifications.
     */
    data: EmployeeCertificationCreateManyInput | EmployeeCertificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployeeCertification update
   */
  export type EmployeeCertificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployeeCertification.
     */
    data: XOR<EmployeeCertificationUpdateInput, EmployeeCertificationUncheckedUpdateInput>
    /**
     * Choose, which EmployeeCertification to update.
     */
    where: EmployeeCertificationWhereUniqueInput
  }

  /**
   * EmployeeCertification updateMany
   */
  export type EmployeeCertificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeCertifications.
     */
    data: XOR<EmployeeCertificationUpdateManyMutationInput, EmployeeCertificationUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeCertifications to update
     */
    where?: EmployeeCertificationWhereInput
  }

  /**
   * EmployeeCertification upsert
   */
  export type EmployeeCertificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployeeCertification to update in case it exists.
     */
    where: EmployeeCertificationWhereUniqueInput
    /**
     * In case the EmployeeCertification found by the `where` argument doesn't exist, create a new EmployeeCertification with this data.
     */
    create: XOR<EmployeeCertificationCreateInput, EmployeeCertificationUncheckedCreateInput>
    /**
     * In case the EmployeeCertification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeCertificationUpdateInput, EmployeeCertificationUncheckedUpdateInput>
  }

  /**
   * EmployeeCertification delete
   */
  export type EmployeeCertificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
    /**
     * Filter which EmployeeCertification to delete.
     */
    where: EmployeeCertificationWhereUniqueInput
  }

  /**
   * EmployeeCertification deleteMany
   */
  export type EmployeeCertificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeCertifications to delete
     */
    where?: EmployeeCertificationWhereInput
  }

  /**
   * EmployeeCertification without action
   */
  export type EmployeeCertificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCertification
     */
    select?: EmployeeCertificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeCertificationInclude<ExtArgs> | null
  }


  /**
   * Model OperatingHoursTemplate
   */

  export type AggregateOperatingHoursTemplate = {
    _count: OperatingHoursTemplateCountAggregateOutputType | null
    _avg: OperatingHoursTemplateAvgAggregateOutputType | null
    _sum: OperatingHoursTemplateSumAggregateOutputType | null
    _min: OperatingHoursTemplateMinAggregateOutputType | null
    _max: OperatingHoursTemplateMaxAggregateOutputType | null
  }

  export type OperatingHoursTemplateAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
    createdBy: number | null
  }

  export type OperatingHoursTemplateSumAggregateOutputType = {
    id: number | null
    companyId: number | null
    createdBy: number | null
  }

  export type OperatingHoursTemplateMinAggregateOutputType = {
    id: number | null
    companyId: number | null
    templateName: string | null
    description: string | null
    isDefault: boolean | null
    isActive: boolean | null
    timezone: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OperatingHoursTemplateMaxAggregateOutputType = {
    id: number | null
    companyId: number | null
    templateName: string | null
    description: string | null
    isDefault: boolean | null
    isActive: boolean | null
    timezone: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OperatingHoursTemplateCountAggregateOutputType = {
    id: number
    companyId: number
    templateName: number
    description: number
    isDefault: number
    isActive: number
    timezone: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OperatingHoursTemplateAvgAggregateInputType = {
    id?: true
    companyId?: true
    createdBy?: true
  }

  export type OperatingHoursTemplateSumAggregateInputType = {
    id?: true
    companyId?: true
    createdBy?: true
  }

  export type OperatingHoursTemplateMinAggregateInputType = {
    id?: true
    companyId?: true
    templateName?: true
    description?: true
    isDefault?: true
    isActive?: true
    timezone?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OperatingHoursTemplateMaxAggregateInputType = {
    id?: true
    companyId?: true
    templateName?: true
    description?: true
    isDefault?: true
    isActive?: true
    timezone?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OperatingHoursTemplateCountAggregateInputType = {
    id?: true
    companyId?: true
    templateName?: true
    description?: true
    isDefault?: true
    isActive?: true
    timezone?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OperatingHoursTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperatingHoursTemplate to aggregate.
     */
    where?: OperatingHoursTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatingHoursTemplates to fetch.
     */
    orderBy?: OperatingHoursTemplateOrderByWithRelationInput | OperatingHoursTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OperatingHoursTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatingHoursTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatingHoursTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OperatingHoursTemplates
    **/
    _count?: true | OperatingHoursTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OperatingHoursTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OperatingHoursTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OperatingHoursTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OperatingHoursTemplateMaxAggregateInputType
  }

  export type GetOperatingHoursTemplateAggregateType<T extends OperatingHoursTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateOperatingHoursTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOperatingHoursTemplate[P]>
      : GetScalarType<T[P], AggregateOperatingHoursTemplate[P]>
  }




  export type OperatingHoursTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OperatingHoursTemplateWhereInput
    orderBy?: OperatingHoursTemplateOrderByWithAggregationInput | OperatingHoursTemplateOrderByWithAggregationInput[]
    by: OperatingHoursTemplateScalarFieldEnum[] | OperatingHoursTemplateScalarFieldEnum
    having?: OperatingHoursTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OperatingHoursTemplateCountAggregateInputType | true
    _avg?: OperatingHoursTemplateAvgAggregateInputType
    _sum?: OperatingHoursTemplateSumAggregateInputType
    _min?: OperatingHoursTemplateMinAggregateInputType
    _max?: OperatingHoursTemplateMaxAggregateInputType
  }

  export type OperatingHoursTemplateGroupByOutputType = {
    id: number
    companyId: number
    templateName: string
    description: string | null
    isDefault: boolean
    isActive: boolean
    timezone: string
    createdBy: number
    createdAt: Date
    updatedAt: Date
    _count: OperatingHoursTemplateCountAggregateOutputType | null
    _avg: OperatingHoursTemplateAvgAggregateOutputType | null
    _sum: OperatingHoursTemplateSumAggregateOutputType | null
    _min: OperatingHoursTemplateMinAggregateOutputType | null
    _max: OperatingHoursTemplateMaxAggregateOutputType | null
  }

  type GetOperatingHoursTemplateGroupByPayload<T extends OperatingHoursTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OperatingHoursTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OperatingHoursTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OperatingHoursTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], OperatingHoursTemplateGroupByOutputType[P]>
        }
      >
    >


  export type OperatingHoursTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    templateName?: boolean
    description?: boolean
    isDefault?: boolean
    isActive?: boolean
    timezone?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    dailyHours?: boolean | OperatingHoursTemplate$dailyHoursArgs<ExtArgs>
    staffingRules?: boolean | OperatingHoursTemplate$staffingRulesArgs<ExtArgs>
    scheduleOverrides?: boolean | OperatingHoursTemplate$scheduleOverridesArgs<ExtArgs>
    _count?: boolean | OperatingHoursTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["operatingHoursTemplate"]>


  export type OperatingHoursTemplateSelectScalar = {
    id?: boolean
    companyId?: boolean
    templateName?: boolean
    description?: boolean
    isDefault?: boolean
    isActive?: boolean
    timezone?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OperatingHoursTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    dailyHours?: boolean | OperatingHoursTemplate$dailyHoursArgs<ExtArgs>
    staffingRules?: boolean | OperatingHoursTemplate$staffingRulesArgs<ExtArgs>
    scheduleOverrides?: boolean | OperatingHoursTemplate$scheduleOverridesArgs<ExtArgs>
    _count?: boolean | OperatingHoursTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OperatingHoursTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OperatingHoursTemplate"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      dailyHours: Prisma.$DailyOperatingHoursPayload<ExtArgs>[]
      staffingRules: Prisma.$StaffingRulePayload<ExtArgs>[]
      scheduleOverrides: Prisma.$ScheduleOverridePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyId: number
      templateName: string
      description: string | null
      isDefault: boolean
      isActive: boolean
      timezone: string
      createdBy: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["operatingHoursTemplate"]>
    composites: {}
  }

  type OperatingHoursTemplateGetPayload<S extends boolean | null | undefined | OperatingHoursTemplateDefaultArgs> = $Result.GetResult<Prisma.$OperatingHoursTemplatePayload, S>

  type OperatingHoursTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OperatingHoursTemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OperatingHoursTemplateCountAggregateInputType | true
    }

  export interface OperatingHoursTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OperatingHoursTemplate'], meta: { name: 'OperatingHoursTemplate' } }
    /**
     * Find zero or one OperatingHoursTemplate that matches the filter.
     * @param {OperatingHoursTemplateFindUniqueArgs} args - Arguments to find a OperatingHoursTemplate
     * @example
     * // Get one OperatingHoursTemplate
     * const operatingHoursTemplate = await prisma.operatingHoursTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OperatingHoursTemplateFindUniqueArgs>(args: SelectSubset<T, OperatingHoursTemplateFindUniqueArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OperatingHoursTemplate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OperatingHoursTemplateFindUniqueOrThrowArgs} args - Arguments to find a OperatingHoursTemplate
     * @example
     * // Get one OperatingHoursTemplate
     * const operatingHoursTemplate = await prisma.operatingHoursTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OperatingHoursTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, OperatingHoursTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OperatingHoursTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatingHoursTemplateFindFirstArgs} args - Arguments to find a OperatingHoursTemplate
     * @example
     * // Get one OperatingHoursTemplate
     * const operatingHoursTemplate = await prisma.operatingHoursTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OperatingHoursTemplateFindFirstArgs>(args?: SelectSubset<T, OperatingHoursTemplateFindFirstArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OperatingHoursTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatingHoursTemplateFindFirstOrThrowArgs} args - Arguments to find a OperatingHoursTemplate
     * @example
     * // Get one OperatingHoursTemplate
     * const operatingHoursTemplate = await prisma.operatingHoursTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OperatingHoursTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, OperatingHoursTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OperatingHoursTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatingHoursTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OperatingHoursTemplates
     * const operatingHoursTemplates = await prisma.operatingHoursTemplate.findMany()
     * 
     * // Get first 10 OperatingHoursTemplates
     * const operatingHoursTemplates = await prisma.operatingHoursTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const operatingHoursTemplateWithIdOnly = await prisma.operatingHoursTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OperatingHoursTemplateFindManyArgs>(args?: SelectSubset<T, OperatingHoursTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OperatingHoursTemplate.
     * @param {OperatingHoursTemplateCreateArgs} args - Arguments to create a OperatingHoursTemplate.
     * @example
     * // Create one OperatingHoursTemplate
     * const OperatingHoursTemplate = await prisma.operatingHoursTemplate.create({
     *   data: {
     *     // ... data to create a OperatingHoursTemplate
     *   }
     * })
     * 
     */
    create<T extends OperatingHoursTemplateCreateArgs>(args: SelectSubset<T, OperatingHoursTemplateCreateArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OperatingHoursTemplates.
     * @param {OperatingHoursTemplateCreateManyArgs} args - Arguments to create many OperatingHoursTemplates.
     * @example
     * // Create many OperatingHoursTemplates
     * const operatingHoursTemplate = await prisma.operatingHoursTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OperatingHoursTemplateCreateManyArgs>(args?: SelectSubset<T, OperatingHoursTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OperatingHoursTemplate.
     * @param {OperatingHoursTemplateDeleteArgs} args - Arguments to delete one OperatingHoursTemplate.
     * @example
     * // Delete one OperatingHoursTemplate
     * const OperatingHoursTemplate = await prisma.operatingHoursTemplate.delete({
     *   where: {
     *     // ... filter to delete one OperatingHoursTemplate
     *   }
     * })
     * 
     */
    delete<T extends OperatingHoursTemplateDeleteArgs>(args: SelectSubset<T, OperatingHoursTemplateDeleteArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OperatingHoursTemplate.
     * @param {OperatingHoursTemplateUpdateArgs} args - Arguments to update one OperatingHoursTemplate.
     * @example
     * // Update one OperatingHoursTemplate
     * const operatingHoursTemplate = await prisma.operatingHoursTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OperatingHoursTemplateUpdateArgs>(args: SelectSubset<T, OperatingHoursTemplateUpdateArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OperatingHoursTemplates.
     * @param {OperatingHoursTemplateDeleteManyArgs} args - Arguments to filter OperatingHoursTemplates to delete.
     * @example
     * // Delete a few OperatingHoursTemplates
     * const { count } = await prisma.operatingHoursTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OperatingHoursTemplateDeleteManyArgs>(args?: SelectSubset<T, OperatingHoursTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OperatingHoursTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatingHoursTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OperatingHoursTemplates
     * const operatingHoursTemplate = await prisma.operatingHoursTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OperatingHoursTemplateUpdateManyArgs>(args: SelectSubset<T, OperatingHoursTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OperatingHoursTemplate.
     * @param {OperatingHoursTemplateUpsertArgs} args - Arguments to update or create a OperatingHoursTemplate.
     * @example
     * // Update or create a OperatingHoursTemplate
     * const operatingHoursTemplate = await prisma.operatingHoursTemplate.upsert({
     *   create: {
     *     // ... data to create a OperatingHoursTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OperatingHoursTemplate we want to update
     *   }
     * })
     */
    upsert<T extends OperatingHoursTemplateUpsertArgs>(args: SelectSubset<T, OperatingHoursTemplateUpsertArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OperatingHoursTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatingHoursTemplateCountArgs} args - Arguments to filter OperatingHoursTemplates to count.
     * @example
     * // Count the number of OperatingHoursTemplates
     * const count = await prisma.operatingHoursTemplate.count({
     *   where: {
     *     // ... the filter for the OperatingHoursTemplates we want to count
     *   }
     * })
    **/
    count<T extends OperatingHoursTemplateCountArgs>(
      args?: Subset<T, OperatingHoursTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OperatingHoursTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OperatingHoursTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatingHoursTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OperatingHoursTemplateAggregateArgs>(args: Subset<T, OperatingHoursTemplateAggregateArgs>): Prisma.PrismaPromise<GetOperatingHoursTemplateAggregateType<T>>

    /**
     * Group by OperatingHoursTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OperatingHoursTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OperatingHoursTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OperatingHoursTemplateGroupByArgs['orderBy'] }
        : { orderBy?: OperatingHoursTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OperatingHoursTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOperatingHoursTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OperatingHoursTemplate model
   */
  readonly fields: OperatingHoursTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OperatingHoursTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OperatingHoursTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    dailyHours<T extends OperatingHoursTemplate$dailyHoursArgs<ExtArgs> = {}>(args?: Subset<T, OperatingHoursTemplate$dailyHoursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "findMany"> | Null>
    staffingRules<T extends OperatingHoursTemplate$staffingRulesArgs<ExtArgs> = {}>(args?: Subset<T, OperatingHoursTemplate$staffingRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "findMany"> | Null>
    scheduleOverrides<T extends OperatingHoursTemplate$scheduleOverridesArgs<ExtArgs> = {}>(args?: Subset<T, OperatingHoursTemplate$scheduleOverridesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OperatingHoursTemplate model
   */ 
  interface OperatingHoursTemplateFieldRefs {
    readonly id: FieldRef<"OperatingHoursTemplate", 'Int'>
    readonly companyId: FieldRef<"OperatingHoursTemplate", 'Int'>
    readonly templateName: FieldRef<"OperatingHoursTemplate", 'String'>
    readonly description: FieldRef<"OperatingHoursTemplate", 'String'>
    readonly isDefault: FieldRef<"OperatingHoursTemplate", 'Boolean'>
    readonly isActive: FieldRef<"OperatingHoursTemplate", 'Boolean'>
    readonly timezone: FieldRef<"OperatingHoursTemplate", 'String'>
    readonly createdBy: FieldRef<"OperatingHoursTemplate", 'Int'>
    readonly createdAt: FieldRef<"OperatingHoursTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"OperatingHoursTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OperatingHoursTemplate findUnique
   */
  export type OperatingHoursTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    /**
     * Filter, which OperatingHoursTemplate to fetch.
     */
    where: OperatingHoursTemplateWhereUniqueInput
  }

  /**
   * OperatingHoursTemplate findUniqueOrThrow
   */
  export type OperatingHoursTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    /**
     * Filter, which OperatingHoursTemplate to fetch.
     */
    where: OperatingHoursTemplateWhereUniqueInput
  }

  /**
   * OperatingHoursTemplate findFirst
   */
  export type OperatingHoursTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    /**
     * Filter, which OperatingHoursTemplate to fetch.
     */
    where?: OperatingHoursTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatingHoursTemplates to fetch.
     */
    orderBy?: OperatingHoursTemplateOrderByWithRelationInput | OperatingHoursTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperatingHoursTemplates.
     */
    cursor?: OperatingHoursTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatingHoursTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatingHoursTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperatingHoursTemplates.
     */
    distinct?: OperatingHoursTemplateScalarFieldEnum | OperatingHoursTemplateScalarFieldEnum[]
  }

  /**
   * OperatingHoursTemplate findFirstOrThrow
   */
  export type OperatingHoursTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    /**
     * Filter, which OperatingHoursTemplate to fetch.
     */
    where?: OperatingHoursTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatingHoursTemplates to fetch.
     */
    orderBy?: OperatingHoursTemplateOrderByWithRelationInput | OperatingHoursTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OperatingHoursTemplates.
     */
    cursor?: OperatingHoursTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatingHoursTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatingHoursTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OperatingHoursTemplates.
     */
    distinct?: OperatingHoursTemplateScalarFieldEnum | OperatingHoursTemplateScalarFieldEnum[]
  }

  /**
   * OperatingHoursTemplate findMany
   */
  export type OperatingHoursTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    /**
     * Filter, which OperatingHoursTemplates to fetch.
     */
    where?: OperatingHoursTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OperatingHoursTemplates to fetch.
     */
    orderBy?: OperatingHoursTemplateOrderByWithRelationInput | OperatingHoursTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OperatingHoursTemplates.
     */
    cursor?: OperatingHoursTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OperatingHoursTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OperatingHoursTemplates.
     */
    skip?: number
    distinct?: OperatingHoursTemplateScalarFieldEnum | OperatingHoursTemplateScalarFieldEnum[]
  }

  /**
   * OperatingHoursTemplate create
   */
  export type OperatingHoursTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a OperatingHoursTemplate.
     */
    data: XOR<OperatingHoursTemplateCreateInput, OperatingHoursTemplateUncheckedCreateInput>
  }

  /**
   * OperatingHoursTemplate createMany
   */
  export type OperatingHoursTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OperatingHoursTemplates.
     */
    data: OperatingHoursTemplateCreateManyInput | OperatingHoursTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OperatingHoursTemplate update
   */
  export type OperatingHoursTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a OperatingHoursTemplate.
     */
    data: XOR<OperatingHoursTemplateUpdateInput, OperatingHoursTemplateUncheckedUpdateInput>
    /**
     * Choose, which OperatingHoursTemplate to update.
     */
    where: OperatingHoursTemplateWhereUniqueInput
  }

  /**
   * OperatingHoursTemplate updateMany
   */
  export type OperatingHoursTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OperatingHoursTemplates.
     */
    data: XOR<OperatingHoursTemplateUpdateManyMutationInput, OperatingHoursTemplateUncheckedUpdateManyInput>
    /**
     * Filter which OperatingHoursTemplates to update
     */
    where?: OperatingHoursTemplateWhereInput
  }

  /**
   * OperatingHoursTemplate upsert
   */
  export type OperatingHoursTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the OperatingHoursTemplate to update in case it exists.
     */
    where: OperatingHoursTemplateWhereUniqueInput
    /**
     * In case the OperatingHoursTemplate found by the `where` argument doesn't exist, create a new OperatingHoursTemplate with this data.
     */
    create: XOR<OperatingHoursTemplateCreateInput, OperatingHoursTemplateUncheckedCreateInput>
    /**
     * In case the OperatingHoursTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OperatingHoursTemplateUpdateInput, OperatingHoursTemplateUncheckedUpdateInput>
  }

  /**
   * OperatingHoursTemplate delete
   */
  export type OperatingHoursTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
    /**
     * Filter which OperatingHoursTemplate to delete.
     */
    where: OperatingHoursTemplateWhereUniqueInput
  }

  /**
   * OperatingHoursTemplate deleteMany
   */
  export type OperatingHoursTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OperatingHoursTemplates to delete
     */
    where?: OperatingHoursTemplateWhereInput
  }

  /**
   * OperatingHoursTemplate.dailyHours
   */
  export type OperatingHoursTemplate$dailyHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    where?: DailyOperatingHoursWhereInput
    orderBy?: DailyOperatingHoursOrderByWithRelationInput | DailyOperatingHoursOrderByWithRelationInput[]
    cursor?: DailyOperatingHoursWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DailyOperatingHoursScalarFieldEnum | DailyOperatingHoursScalarFieldEnum[]
  }

  /**
   * OperatingHoursTemplate.staffingRules
   */
  export type OperatingHoursTemplate$staffingRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    where?: StaffingRuleWhereInput
    orderBy?: StaffingRuleOrderByWithRelationInput | StaffingRuleOrderByWithRelationInput[]
    cursor?: StaffingRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffingRuleScalarFieldEnum | StaffingRuleScalarFieldEnum[]
  }

  /**
   * OperatingHoursTemplate.scheduleOverrides
   */
  export type OperatingHoursTemplate$scheduleOverridesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    where?: ScheduleOverrideWhereInput
    orderBy?: ScheduleOverrideOrderByWithRelationInput | ScheduleOverrideOrderByWithRelationInput[]
    cursor?: ScheduleOverrideWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleOverrideScalarFieldEnum | ScheduleOverrideScalarFieldEnum[]
  }

  /**
   * OperatingHoursTemplate without action
   */
  export type OperatingHoursTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OperatingHoursTemplate
     */
    select?: OperatingHoursTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OperatingHoursTemplateInclude<ExtArgs> | null
  }


  /**
   * Model DailyOperatingHours
   */

  export type AggregateDailyOperatingHours = {
    _count: DailyOperatingHoursCountAggregateOutputType | null
    _avg: DailyOperatingHoursAvgAggregateOutputType | null
    _sum: DailyOperatingHoursSumAggregateOutputType | null
    _min: DailyOperatingHoursMinAggregateOutputType | null
    _max: DailyOperatingHoursMaxAggregateOutputType | null
  }

  export type DailyOperatingHoursAvgAggregateOutputType = {
    id: number | null
    templateId: number | null
    dayOfWeek: number | null
    minStaff: number | null
    maxStaff: number | null
  }

  export type DailyOperatingHoursSumAggregateOutputType = {
    id: number | null
    templateId: number | null
    dayOfWeek: number | null
    minStaff: number | null
    maxStaff: number | null
  }

  export type DailyOperatingHoursMinAggregateOutputType = {
    id: number | null
    templateId: number | null
    dayOfWeek: number | null
    isOpen: boolean | null
    openTime: string | null
    closeTime: string | null
    breakStart: string | null
    breakEnd: string | null
    minStaff: number | null
    maxStaff: number | null
    notes: string | null
  }

  export type DailyOperatingHoursMaxAggregateOutputType = {
    id: number | null
    templateId: number | null
    dayOfWeek: number | null
    isOpen: boolean | null
    openTime: string | null
    closeTime: string | null
    breakStart: string | null
    breakEnd: string | null
    minStaff: number | null
    maxStaff: number | null
    notes: string | null
  }

  export type DailyOperatingHoursCountAggregateOutputType = {
    id: number
    templateId: number
    dayOfWeek: number
    isOpen: number
    openTime: number
    closeTime: number
    breakStart: number
    breakEnd: number
    minStaff: number
    maxStaff: number
    notes: number
    _all: number
  }


  export type DailyOperatingHoursAvgAggregateInputType = {
    id?: true
    templateId?: true
    dayOfWeek?: true
    minStaff?: true
    maxStaff?: true
  }

  export type DailyOperatingHoursSumAggregateInputType = {
    id?: true
    templateId?: true
    dayOfWeek?: true
    minStaff?: true
    maxStaff?: true
  }

  export type DailyOperatingHoursMinAggregateInputType = {
    id?: true
    templateId?: true
    dayOfWeek?: true
    isOpen?: true
    openTime?: true
    closeTime?: true
    breakStart?: true
    breakEnd?: true
    minStaff?: true
    maxStaff?: true
    notes?: true
  }

  export type DailyOperatingHoursMaxAggregateInputType = {
    id?: true
    templateId?: true
    dayOfWeek?: true
    isOpen?: true
    openTime?: true
    closeTime?: true
    breakStart?: true
    breakEnd?: true
    minStaff?: true
    maxStaff?: true
    notes?: true
  }

  export type DailyOperatingHoursCountAggregateInputType = {
    id?: true
    templateId?: true
    dayOfWeek?: true
    isOpen?: true
    openTime?: true
    closeTime?: true
    breakStart?: true
    breakEnd?: true
    minStaff?: true
    maxStaff?: true
    notes?: true
    _all?: true
  }

  export type DailyOperatingHoursAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyOperatingHours to aggregate.
     */
    where?: DailyOperatingHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyOperatingHours to fetch.
     */
    orderBy?: DailyOperatingHoursOrderByWithRelationInput | DailyOperatingHoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DailyOperatingHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyOperatingHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyOperatingHours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DailyOperatingHours
    **/
    _count?: true | DailyOperatingHoursCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DailyOperatingHoursAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DailyOperatingHoursSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DailyOperatingHoursMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DailyOperatingHoursMaxAggregateInputType
  }

  export type GetDailyOperatingHoursAggregateType<T extends DailyOperatingHoursAggregateArgs> = {
        [P in keyof T & keyof AggregateDailyOperatingHours]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDailyOperatingHours[P]>
      : GetScalarType<T[P], AggregateDailyOperatingHours[P]>
  }




  export type DailyOperatingHoursGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DailyOperatingHoursWhereInput
    orderBy?: DailyOperatingHoursOrderByWithAggregationInput | DailyOperatingHoursOrderByWithAggregationInput[]
    by: DailyOperatingHoursScalarFieldEnum[] | DailyOperatingHoursScalarFieldEnum
    having?: DailyOperatingHoursScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DailyOperatingHoursCountAggregateInputType | true
    _avg?: DailyOperatingHoursAvgAggregateInputType
    _sum?: DailyOperatingHoursSumAggregateInputType
    _min?: DailyOperatingHoursMinAggregateInputType
    _max?: DailyOperatingHoursMaxAggregateInputType
  }

  export type DailyOperatingHoursGroupByOutputType = {
    id: number
    templateId: number
    dayOfWeek: number
    isOpen: boolean
    openTime: string | null
    closeTime: string | null
    breakStart: string | null
    breakEnd: string | null
    minStaff: number
    maxStaff: number | null
    notes: string | null
    _count: DailyOperatingHoursCountAggregateOutputType | null
    _avg: DailyOperatingHoursAvgAggregateOutputType | null
    _sum: DailyOperatingHoursSumAggregateOutputType | null
    _min: DailyOperatingHoursMinAggregateOutputType | null
    _max: DailyOperatingHoursMaxAggregateOutputType | null
  }

  type GetDailyOperatingHoursGroupByPayload<T extends DailyOperatingHoursGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DailyOperatingHoursGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DailyOperatingHoursGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DailyOperatingHoursGroupByOutputType[P]>
            : GetScalarType<T[P], DailyOperatingHoursGroupByOutputType[P]>
        }
      >
    >


  export type DailyOperatingHoursSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    dayOfWeek?: boolean
    isOpen?: boolean
    openTime?: boolean
    closeTime?: boolean
    breakStart?: boolean
    breakEnd?: boolean
    minStaff?: boolean
    maxStaff?: boolean
    notes?: boolean
    template?: boolean | OperatingHoursTemplateDefaultArgs<ExtArgs>
    timeSlots?: boolean | DailyOperatingHours$timeSlotsArgs<ExtArgs>
    _count?: boolean | DailyOperatingHoursCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dailyOperatingHours"]>


  export type DailyOperatingHoursSelectScalar = {
    id?: boolean
    templateId?: boolean
    dayOfWeek?: boolean
    isOpen?: boolean
    openTime?: boolean
    closeTime?: boolean
    breakStart?: boolean
    breakEnd?: boolean
    minStaff?: boolean
    maxStaff?: boolean
    notes?: boolean
  }

  export type DailyOperatingHoursInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | OperatingHoursTemplateDefaultArgs<ExtArgs>
    timeSlots?: boolean | DailyOperatingHours$timeSlotsArgs<ExtArgs>
    _count?: boolean | DailyOperatingHoursCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DailyOperatingHoursPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DailyOperatingHours"
    objects: {
      template: Prisma.$OperatingHoursTemplatePayload<ExtArgs>
      timeSlots: Prisma.$HourlyStaffingRulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      templateId: number
      dayOfWeek: number
      isOpen: boolean
      openTime: string | null
      closeTime: string | null
      breakStart: string | null
      breakEnd: string | null
      minStaff: number
      maxStaff: number | null
      notes: string | null
    }, ExtArgs["result"]["dailyOperatingHours"]>
    composites: {}
  }

  type DailyOperatingHoursGetPayload<S extends boolean | null | undefined | DailyOperatingHoursDefaultArgs> = $Result.GetResult<Prisma.$DailyOperatingHoursPayload, S>

  type DailyOperatingHoursCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DailyOperatingHoursFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DailyOperatingHoursCountAggregateInputType | true
    }

  export interface DailyOperatingHoursDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DailyOperatingHours'], meta: { name: 'DailyOperatingHours' } }
    /**
     * Find zero or one DailyOperatingHours that matches the filter.
     * @param {DailyOperatingHoursFindUniqueArgs} args - Arguments to find a DailyOperatingHours
     * @example
     * // Get one DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DailyOperatingHoursFindUniqueArgs>(args: SelectSubset<T, DailyOperatingHoursFindUniqueArgs<ExtArgs>>): Prisma__DailyOperatingHoursClient<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DailyOperatingHours that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DailyOperatingHoursFindUniqueOrThrowArgs} args - Arguments to find a DailyOperatingHours
     * @example
     * // Get one DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DailyOperatingHoursFindUniqueOrThrowArgs>(args: SelectSubset<T, DailyOperatingHoursFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DailyOperatingHoursClient<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DailyOperatingHours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyOperatingHoursFindFirstArgs} args - Arguments to find a DailyOperatingHours
     * @example
     * // Get one DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DailyOperatingHoursFindFirstArgs>(args?: SelectSubset<T, DailyOperatingHoursFindFirstArgs<ExtArgs>>): Prisma__DailyOperatingHoursClient<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DailyOperatingHours that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyOperatingHoursFindFirstOrThrowArgs} args - Arguments to find a DailyOperatingHours
     * @example
     * // Get one DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DailyOperatingHoursFindFirstOrThrowArgs>(args?: SelectSubset<T, DailyOperatingHoursFindFirstOrThrowArgs<ExtArgs>>): Prisma__DailyOperatingHoursClient<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DailyOperatingHours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyOperatingHoursFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.findMany()
     * 
     * // Get first 10 DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dailyOperatingHoursWithIdOnly = await prisma.dailyOperatingHours.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DailyOperatingHoursFindManyArgs>(args?: SelectSubset<T, DailyOperatingHoursFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DailyOperatingHours.
     * @param {DailyOperatingHoursCreateArgs} args - Arguments to create a DailyOperatingHours.
     * @example
     * // Create one DailyOperatingHours
     * const DailyOperatingHours = await prisma.dailyOperatingHours.create({
     *   data: {
     *     // ... data to create a DailyOperatingHours
     *   }
     * })
     * 
     */
    create<T extends DailyOperatingHoursCreateArgs>(args: SelectSubset<T, DailyOperatingHoursCreateArgs<ExtArgs>>): Prisma__DailyOperatingHoursClient<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DailyOperatingHours.
     * @param {DailyOperatingHoursCreateManyArgs} args - Arguments to create many DailyOperatingHours.
     * @example
     * // Create many DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DailyOperatingHoursCreateManyArgs>(args?: SelectSubset<T, DailyOperatingHoursCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DailyOperatingHours.
     * @param {DailyOperatingHoursDeleteArgs} args - Arguments to delete one DailyOperatingHours.
     * @example
     * // Delete one DailyOperatingHours
     * const DailyOperatingHours = await prisma.dailyOperatingHours.delete({
     *   where: {
     *     // ... filter to delete one DailyOperatingHours
     *   }
     * })
     * 
     */
    delete<T extends DailyOperatingHoursDeleteArgs>(args: SelectSubset<T, DailyOperatingHoursDeleteArgs<ExtArgs>>): Prisma__DailyOperatingHoursClient<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DailyOperatingHours.
     * @param {DailyOperatingHoursUpdateArgs} args - Arguments to update one DailyOperatingHours.
     * @example
     * // Update one DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DailyOperatingHoursUpdateArgs>(args: SelectSubset<T, DailyOperatingHoursUpdateArgs<ExtArgs>>): Prisma__DailyOperatingHoursClient<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DailyOperatingHours.
     * @param {DailyOperatingHoursDeleteManyArgs} args - Arguments to filter DailyOperatingHours to delete.
     * @example
     * // Delete a few DailyOperatingHours
     * const { count } = await prisma.dailyOperatingHours.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DailyOperatingHoursDeleteManyArgs>(args?: SelectSubset<T, DailyOperatingHoursDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DailyOperatingHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyOperatingHoursUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DailyOperatingHoursUpdateManyArgs>(args: SelectSubset<T, DailyOperatingHoursUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DailyOperatingHours.
     * @param {DailyOperatingHoursUpsertArgs} args - Arguments to update or create a DailyOperatingHours.
     * @example
     * // Update or create a DailyOperatingHours
     * const dailyOperatingHours = await prisma.dailyOperatingHours.upsert({
     *   create: {
     *     // ... data to create a DailyOperatingHours
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DailyOperatingHours we want to update
     *   }
     * })
     */
    upsert<T extends DailyOperatingHoursUpsertArgs>(args: SelectSubset<T, DailyOperatingHoursUpsertArgs<ExtArgs>>): Prisma__DailyOperatingHoursClient<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DailyOperatingHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyOperatingHoursCountArgs} args - Arguments to filter DailyOperatingHours to count.
     * @example
     * // Count the number of DailyOperatingHours
     * const count = await prisma.dailyOperatingHours.count({
     *   where: {
     *     // ... the filter for the DailyOperatingHours we want to count
     *   }
     * })
    **/
    count<T extends DailyOperatingHoursCountArgs>(
      args?: Subset<T, DailyOperatingHoursCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DailyOperatingHoursCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DailyOperatingHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyOperatingHoursAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DailyOperatingHoursAggregateArgs>(args: Subset<T, DailyOperatingHoursAggregateArgs>): Prisma.PrismaPromise<GetDailyOperatingHoursAggregateType<T>>

    /**
     * Group by DailyOperatingHours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DailyOperatingHoursGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DailyOperatingHoursGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DailyOperatingHoursGroupByArgs['orderBy'] }
        : { orderBy?: DailyOperatingHoursGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DailyOperatingHoursGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDailyOperatingHoursGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DailyOperatingHours model
   */
  readonly fields: DailyOperatingHoursFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DailyOperatingHours.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DailyOperatingHoursClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends OperatingHoursTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OperatingHoursTemplateDefaultArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    timeSlots<T extends DailyOperatingHours$timeSlotsArgs<ExtArgs> = {}>(args?: Subset<T, DailyOperatingHours$timeSlotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DailyOperatingHours model
   */ 
  interface DailyOperatingHoursFieldRefs {
    readonly id: FieldRef<"DailyOperatingHours", 'Int'>
    readonly templateId: FieldRef<"DailyOperatingHours", 'Int'>
    readonly dayOfWeek: FieldRef<"DailyOperatingHours", 'Int'>
    readonly isOpen: FieldRef<"DailyOperatingHours", 'Boolean'>
    readonly openTime: FieldRef<"DailyOperatingHours", 'String'>
    readonly closeTime: FieldRef<"DailyOperatingHours", 'String'>
    readonly breakStart: FieldRef<"DailyOperatingHours", 'String'>
    readonly breakEnd: FieldRef<"DailyOperatingHours", 'String'>
    readonly minStaff: FieldRef<"DailyOperatingHours", 'Int'>
    readonly maxStaff: FieldRef<"DailyOperatingHours", 'Int'>
    readonly notes: FieldRef<"DailyOperatingHours", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DailyOperatingHours findUnique
   */
  export type DailyOperatingHoursFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    /**
     * Filter, which DailyOperatingHours to fetch.
     */
    where: DailyOperatingHoursWhereUniqueInput
  }

  /**
   * DailyOperatingHours findUniqueOrThrow
   */
  export type DailyOperatingHoursFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    /**
     * Filter, which DailyOperatingHours to fetch.
     */
    where: DailyOperatingHoursWhereUniqueInput
  }

  /**
   * DailyOperatingHours findFirst
   */
  export type DailyOperatingHoursFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    /**
     * Filter, which DailyOperatingHours to fetch.
     */
    where?: DailyOperatingHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyOperatingHours to fetch.
     */
    orderBy?: DailyOperatingHoursOrderByWithRelationInput | DailyOperatingHoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyOperatingHours.
     */
    cursor?: DailyOperatingHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyOperatingHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyOperatingHours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyOperatingHours.
     */
    distinct?: DailyOperatingHoursScalarFieldEnum | DailyOperatingHoursScalarFieldEnum[]
  }

  /**
   * DailyOperatingHours findFirstOrThrow
   */
  export type DailyOperatingHoursFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    /**
     * Filter, which DailyOperatingHours to fetch.
     */
    where?: DailyOperatingHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyOperatingHours to fetch.
     */
    orderBy?: DailyOperatingHoursOrderByWithRelationInput | DailyOperatingHoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DailyOperatingHours.
     */
    cursor?: DailyOperatingHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyOperatingHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyOperatingHours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DailyOperatingHours.
     */
    distinct?: DailyOperatingHoursScalarFieldEnum | DailyOperatingHoursScalarFieldEnum[]
  }

  /**
   * DailyOperatingHours findMany
   */
  export type DailyOperatingHoursFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    /**
     * Filter, which DailyOperatingHours to fetch.
     */
    where?: DailyOperatingHoursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DailyOperatingHours to fetch.
     */
    orderBy?: DailyOperatingHoursOrderByWithRelationInput | DailyOperatingHoursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DailyOperatingHours.
     */
    cursor?: DailyOperatingHoursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DailyOperatingHours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DailyOperatingHours.
     */
    skip?: number
    distinct?: DailyOperatingHoursScalarFieldEnum | DailyOperatingHoursScalarFieldEnum[]
  }

  /**
   * DailyOperatingHours create
   */
  export type DailyOperatingHoursCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    /**
     * The data needed to create a DailyOperatingHours.
     */
    data: XOR<DailyOperatingHoursCreateInput, DailyOperatingHoursUncheckedCreateInput>
  }

  /**
   * DailyOperatingHours createMany
   */
  export type DailyOperatingHoursCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DailyOperatingHours.
     */
    data: DailyOperatingHoursCreateManyInput | DailyOperatingHoursCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DailyOperatingHours update
   */
  export type DailyOperatingHoursUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    /**
     * The data needed to update a DailyOperatingHours.
     */
    data: XOR<DailyOperatingHoursUpdateInput, DailyOperatingHoursUncheckedUpdateInput>
    /**
     * Choose, which DailyOperatingHours to update.
     */
    where: DailyOperatingHoursWhereUniqueInput
  }

  /**
   * DailyOperatingHours updateMany
   */
  export type DailyOperatingHoursUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DailyOperatingHours.
     */
    data: XOR<DailyOperatingHoursUpdateManyMutationInput, DailyOperatingHoursUncheckedUpdateManyInput>
    /**
     * Filter which DailyOperatingHours to update
     */
    where?: DailyOperatingHoursWhereInput
  }

  /**
   * DailyOperatingHours upsert
   */
  export type DailyOperatingHoursUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    /**
     * The filter to search for the DailyOperatingHours to update in case it exists.
     */
    where: DailyOperatingHoursWhereUniqueInput
    /**
     * In case the DailyOperatingHours found by the `where` argument doesn't exist, create a new DailyOperatingHours with this data.
     */
    create: XOR<DailyOperatingHoursCreateInput, DailyOperatingHoursUncheckedCreateInput>
    /**
     * In case the DailyOperatingHours was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DailyOperatingHoursUpdateInput, DailyOperatingHoursUncheckedUpdateInput>
  }

  /**
   * DailyOperatingHours delete
   */
  export type DailyOperatingHoursDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
    /**
     * Filter which DailyOperatingHours to delete.
     */
    where: DailyOperatingHoursWhereUniqueInput
  }

  /**
   * DailyOperatingHours deleteMany
   */
  export type DailyOperatingHoursDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DailyOperatingHours to delete
     */
    where?: DailyOperatingHoursWhereInput
  }

  /**
   * DailyOperatingHours.timeSlots
   */
  export type DailyOperatingHours$timeSlotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    where?: HourlyStaffingRuleWhereInput
    orderBy?: HourlyStaffingRuleOrderByWithRelationInput | HourlyStaffingRuleOrderByWithRelationInput[]
    cursor?: HourlyStaffingRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HourlyStaffingRuleScalarFieldEnum | HourlyStaffingRuleScalarFieldEnum[]
  }

  /**
   * DailyOperatingHours without action
   */
  export type DailyOperatingHoursDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DailyOperatingHours
     */
    select?: DailyOperatingHoursSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DailyOperatingHoursInclude<ExtArgs> | null
  }


  /**
   * Model HourlyStaffingRule
   */

  export type AggregateHourlyStaffingRule = {
    _count: HourlyStaffingRuleCountAggregateOutputType | null
    _avg: HourlyStaffingRuleAvgAggregateOutputType | null
    _sum: HourlyStaffingRuleSumAggregateOutputType | null
    _min: HourlyStaffingRuleMinAggregateOutputType | null
    _max: HourlyStaffingRuleMaxAggregateOutputType | null
  }

  export type HourlyStaffingRuleAvgAggregateOutputType = {
    id: number | null
    dailyHoursId: number | null
    hourSlot: number | null
    requiredStaff: number | null
    preferredStaff: number | null
    maxStaff: number | null
  }

  export type HourlyStaffingRuleSumAggregateOutputType = {
    id: number | null
    dailyHoursId: number | null
    hourSlot: number | null
    requiredStaff: number | null
    preferredStaff: number | null
    maxStaff: number | null
  }

  export type HourlyStaffingRuleMinAggregateOutputType = {
    id: number | null
    dailyHoursId: number | null
    hourSlot: number | null
    requiredStaff: number | null
    preferredStaff: number | null
    maxStaff: number | null
    priority: string | null
    notes: string | null
  }

  export type HourlyStaffingRuleMaxAggregateOutputType = {
    id: number | null
    dailyHoursId: number | null
    hourSlot: number | null
    requiredStaff: number | null
    preferredStaff: number | null
    maxStaff: number | null
    priority: string | null
    notes: string | null
  }

  export type HourlyStaffingRuleCountAggregateOutputType = {
    id: number
    dailyHoursId: number
    hourSlot: number
    requiredStaff: number
    preferredStaff: number
    maxStaff: number
    priority: number
    skillRequirement: number
    notes: number
    _all: number
  }


  export type HourlyStaffingRuleAvgAggregateInputType = {
    id?: true
    dailyHoursId?: true
    hourSlot?: true
    requiredStaff?: true
    preferredStaff?: true
    maxStaff?: true
  }

  export type HourlyStaffingRuleSumAggregateInputType = {
    id?: true
    dailyHoursId?: true
    hourSlot?: true
    requiredStaff?: true
    preferredStaff?: true
    maxStaff?: true
  }

  export type HourlyStaffingRuleMinAggregateInputType = {
    id?: true
    dailyHoursId?: true
    hourSlot?: true
    requiredStaff?: true
    preferredStaff?: true
    maxStaff?: true
    priority?: true
    notes?: true
  }

  export type HourlyStaffingRuleMaxAggregateInputType = {
    id?: true
    dailyHoursId?: true
    hourSlot?: true
    requiredStaff?: true
    preferredStaff?: true
    maxStaff?: true
    priority?: true
    notes?: true
  }

  export type HourlyStaffingRuleCountAggregateInputType = {
    id?: true
    dailyHoursId?: true
    hourSlot?: true
    requiredStaff?: true
    preferredStaff?: true
    maxStaff?: true
    priority?: true
    skillRequirement?: true
    notes?: true
    _all?: true
  }

  export type HourlyStaffingRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HourlyStaffingRule to aggregate.
     */
    where?: HourlyStaffingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HourlyStaffingRules to fetch.
     */
    orderBy?: HourlyStaffingRuleOrderByWithRelationInput | HourlyStaffingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HourlyStaffingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HourlyStaffingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HourlyStaffingRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HourlyStaffingRules
    **/
    _count?: true | HourlyStaffingRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HourlyStaffingRuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HourlyStaffingRuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HourlyStaffingRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HourlyStaffingRuleMaxAggregateInputType
  }

  export type GetHourlyStaffingRuleAggregateType<T extends HourlyStaffingRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateHourlyStaffingRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHourlyStaffingRule[P]>
      : GetScalarType<T[P], AggregateHourlyStaffingRule[P]>
  }




  export type HourlyStaffingRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HourlyStaffingRuleWhereInput
    orderBy?: HourlyStaffingRuleOrderByWithAggregationInput | HourlyStaffingRuleOrderByWithAggregationInput[]
    by: HourlyStaffingRuleScalarFieldEnum[] | HourlyStaffingRuleScalarFieldEnum
    having?: HourlyStaffingRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HourlyStaffingRuleCountAggregateInputType | true
    _avg?: HourlyStaffingRuleAvgAggregateInputType
    _sum?: HourlyStaffingRuleSumAggregateInputType
    _min?: HourlyStaffingRuleMinAggregateInputType
    _max?: HourlyStaffingRuleMaxAggregateInputType
  }

  export type HourlyStaffingRuleGroupByOutputType = {
    id: number
    dailyHoursId: number
    hourSlot: number
    requiredStaff: number
    preferredStaff: number | null
    maxStaff: number | null
    priority: string
    skillRequirement: JsonValue | null
    notes: string | null
    _count: HourlyStaffingRuleCountAggregateOutputType | null
    _avg: HourlyStaffingRuleAvgAggregateOutputType | null
    _sum: HourlyStaffingRuleSumAggregateOutputType | null
    _min: HourlyStaffingRuleMinAggregateOutputType | null
    _max: HourlyStaffingRuleMaxAggregateOutputType | null
  }

  type GetHourlyStaffingRuleGroupByPayload<T extends HourlyStaffingRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HourlyStaffingRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HourlyStaffingRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HourlyStaffingRuleGroupByOutputType[P]>
            : GetScalarType<T[P], HourlyStaffingRuleGroupByOutputType[P]>
        }
      >
    >


  export type HourlyStaffingRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dailyHoursId?: boolean
    hourSlot?: boolean
    requiredStaff?: boolean
    preferredStaff?: boolean
    maxStaff?: boolean
    priority?: boolean
    skillRequirement?: boolean
    notes?: boolean
    dailyHours?: boolean | DailyOperatingHoursDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hourlyStaffingRule"]>


  export type HourlyStaffingRuleSelectScalar = {
    id?: boolean
    dailyHoursId?: boolean
    hourSlot?: boolean
    requiredStaff?: boolean
    preferredStaff?: boolean
    maxStaff?: boolean
    priority?: boolean
    skillRequirement?: boolean
    notes?: boolean
  }

  export type HourlyStaffingRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dailyHours?: boolean | DailyOperatingHoursDefaultArgs<ExtArgs>
  }

  export type $HourlyStaffingRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HourlyStaffingRule"
    objects: {
      dailyHours: Prisma.$DailyOperatingHoursPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dailyHoursId: number
      hourSlot: number
      requiredStaff: number
      preferredStaff: number | null
      maxStaff: number | null
      priority: string
      skillRequirement: Prisma.JsonValue | null
      notes: string | null
    }, ExtArgs["result"]["hourlyStaffingRule"]>
    composites: {}
  }

  type HourlyStaffingRuleGetPayload<S extends boolean | null | undefined | HourlyStaffingRuleDefaultArgs> = $Result.GetResult<Prisma.$HourlyStaffingRulePayload, S>

  type HourlyStaffingRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HourlyStaffingRuleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HourlyStaffingRuleCountAggregateInputType | true
    }

  export interface HourlyStaffingRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HourlyStaffingRule'], meta: { name: 'HourlyStaffingRule' } }
    /**
     * Find zero or one HourlyStaffingRule that matches the filter.
     * @param {HourlyStaffingRuleFindUniqueArgs} args - Arguments to find a HourlyStaffingRule
     * @example
     * // Get one HourlyStaffingRule
     * const hourlyStaffingRule = await prisma.hourlyStaffingRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HourlyStaffingRuleFindUniqueArgs>(args: SelectSubset<T, HourlyStaffingRuleFindUniqueArgs<ExtArgs>>): Prisma__HourlyStaffingRuleClient<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HourlyStaffingRule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HourlyStaffingRuleFindUniqueOrThrowArgs} args - Arguments to find a HourlyStaffingRule
     * @example
     * // Get one HourlyStaffingRule
     * const hourlyStaffingRule = await prisma.hourlyStaffingRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HourlyStaffingRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, HourlyStaffingRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HourlyStaffingRuleClient<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HourlyStaffingRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HourlyStaffingRuleFindFirstArgs} args - Arguments to find a HourlyStaffingRule
     * @example
     * // Get one HourlyStaffingRule
     * const hourlyStaffingRule = await prisma.hourlyStaffingRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HourlyStaffingRuleFindFirstArgs>(args?: SelectSubset<T, HourlyStaffingRuleFindFirstArgs<ExtArgs>>): Prisma__HourlyStaffingRuleClient<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HourlyStaffingRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HourlyStaffingRuleFindFirstOrThrowArgs} args - Arguments to find a HourlyStaffingRule
     * @example
     * // Get one HourlyStaffingRule
     * const hourlyStaffingRule = await prisma.hourlyStaffingRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HourlyStaffingRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, HourlyStaffingRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__HourlyStaffingRuleClient<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HourlyStaffingRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HourlyStaffingRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HourlyStaffingRules
     * const hourlyStaffingRules = await prisma.hourlyStaffingRule.findMany()
     * 
     * // Get first 10 HourlyStaffingRules
     * const hourlyStaffingRules = await prisma.hourlyStaffingRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hourlyStaffingRuleWithIdOnly = await prisma.hourlyStaffingRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HourlyStaffingRuleFindManyArgs>(args?: SelectSubset<T, HourlyStaffingRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HourlyStaffingRule.
     * @param {HourlyStaffingRuleCreateArgs} args - Arguments to create a HourlyStaffingRule.
     * @example
     * // Create one HourlyStaffingRule
     * const HourlyStaffingRule = await prisma.hourlyStaffingRule.create({
     *   data: {
     *     // ... data to create a HourlyStaffingRule
     *   }
     * })
     * 
     */
    create<T extends HourlyStaffingRuleCreateArgs>(args: SelectSubset<T, HourlyStaffingRuleCreateArgs<ExtArgs>>): Prisma__HourlyStaffingRuleClient<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HourlyStaffingRules.
     * @param {HourlyStaffingRuleCreateManyArgs} args - Arguments to create many HourlyStaffingRules.
     * @example
     * // Create many HourlyStaffingRules
     * const hourlyStaffingRule = await prisma.hourlyStaffingRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HourlyStaffingRuleCreateManyArgs>(args?: SelectSubset<T, HourlyStaffingRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HourlyStaffingRule.
     * @param {HourlyStaffingRuleDeleteArgs} args - Arguments to delete one HourlyStaffingRule.
     * @example
     * // Delete one HourlyStaffingRule
     * const HourlyStaffingRule = await prisma.hourlyStaffingRule.delete({
     *   where: {
     *     // ... filter to delete one HourlyStaffingRule
     *   }
     * })
     * 
     */
    delete<T extends HourlyStaffingRuleDeleteArgs>(args: SelectSubset<T, HourlyStaffingRuleDeleteArgs<ExtArgs>>): Prisma__HourlyStaffingRuleClient<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HourlyStaffingRule.
     * @param {HourlyStaffingRuleUpdateArgs} args - Arguments to update one HourlyStaffingRule.
     * @example
     * // Update one HourlyStaffingRule
     * const hourlyStaffingRule = await prisma.hourlyStaffingRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HourlyStaffingRuleUpdateArgs>(args: SelectSubset<T, HourlyStaffingRuleUpdateArgs<ExtArgs>>): Prisma__HourlyStaffingRuleClient<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HourlyStaffingRules.
     * @param {HourlyStaffingRuleDeleteManyArgs} args - Arguments to filter HourlyStaffingRules to delete.
     * @example
     * // Delete a few HourlyStaffingRules
     * const { count } = await prisma.hourlyStaffingRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HourlyStaffingRuleDeleteManyArgs>(args?: SelectSubset<T, HourlyStaffingRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HourlyStaffingRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HourlyStaffingRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HourlyStaffingRules
     * const hourlyStaffingRule = await prisma.hourlyStaffingRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HourlyStaffingRuleUpdateManyArgs>(args: SelectSubset<T, HourlyStaffingRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HourlyStaffingRule.
     * @param {HourlyStaffingRuleUpsertArgs} args - Arguments to update or create a HourlyStaffingRule.
     * @example
     * // Update or create a HourlyStaffingRule
     * const hourlyStaffingRule = await prisma.hourlyStaffingRule.upsert({
     *   create: {
     *     // ... data to create a HourlyStaffingRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HourlyStaffingRule we want to update
     *   }
     * })
     */
    upsert<T extends HourlyStaffingRuleUpsertArgs>(args: SelectSubset<T, HourlyStaffingRuleUpsertArgs<ExtArgs>>): Prisma__HourlyStaffingRuleClient<$Result.GetResult<Prisma.$HourlyStaffingRulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HourlyStaffingRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HourlyStaffingRuleCountArgs} args - Arguments to filter HourlyStaffingRules to count.
     * @example
     * // Count the number of HourlyStaffingRules
     * const count = await prisma.hourlyStaffingRule.count({
     *   where: {
     *     // ... the filter for the HourlyStaffingRules we want to count
     *   }
     * })
    **/
    count<T extends HourlyStaffingRuleCountArgs>(
      args?: Subset<T, HourlyStaffingRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HourlyStaffingRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HourlyStaffingRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HourlyStaffingRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HourlyStaffingRuleAggregateArgs>(args: Subset<T, HourlyStaffingRuleAggregateArgs>): Prisma.PrismaPromise<GetHourlyStaffingRuleAggregateType<T>>

    /**
     * Group by HourlyStaffingRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HourlyStaffingRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HourlyStaffingRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HourlyStaffingRuleGroupByArgs['orderBy'] }
        : { orderBy?: HourlyStaffingRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HourlyStaffingRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHourlyStaffingRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HourlyStaffingRule model
   */
  readonly fields: HourlyStaffingRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HourlyStaffingRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HourlyStaffingRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dailyHours<T extends DailyOperatingHoursDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DailyOperatingHoursDefaultArgs<ExtArgs>>): Prisma__DailyOperatingHoursClient<$Result.GetResult<Prisma.$DailyOperatingHoursPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HourlyStaffingRule model
   */ 
  interface HourlyStaffingRuleFieldRefs {
    readonly id: FieldRef<"HourlyStaffingRule", 'Int'>
    readonly dailyHoursId: FieldRef<"HourlyStaffingRule", 'Int'>
    readonly hourSlot: FieldRef<"HourlyStaffingRule", 'Int'>
    readonly requiredStaff: FieldRef<"HourlyStaffingRule", 'Int'>
    readonly preferredStaff: FieldRef<"HourlyStaffingRule", 'Int'>
    readonly maxStaff: FieldRef<"HourlyStaffingRule", 'Int'>
    readonly priority: FieldRef<"HourlyStaffingRule", 'String'>
    readonly skillRequirement: FieldRef<"HourlyStaffingRule", 'Json'>
    readonly notes: FieldRef<"HourlyStaffingRule", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HourlyStaffingRule findUnique
   */
  export type HourlyStaffingRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which HourlyStaffingRule to fetch.
     */
    where: HourlyStaffingRuleWhereUniqueInput
  }

  /**
   * HourlyStaffingRule findUniqueOrThrow
   */
  export type HourlyStaffingRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which HourlyStaffingRule to fetch.
     */
    where: HourlyStaffingRuleWhereUniqueInput
  }

  /**
   * HourlyStaffingRule findFirst
   */
  export type HourlyStaffingRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which HourlyStaffingRule to fetch.
     */
    where?: HourlyStaffingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HourlyStaffingRules to fetch.
     */
    orderBy?: HourlyStaffingRuleOrderByWithRelationInput | HourlyStaffingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HourlyStaffingRules.
     */
    cursor?: HourlyStaffingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HourlyStaffingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HourlyStaffingRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HourlyStaffingRules.
     */
    distinct?: HourlyStaffingRuleScalarFieldEnum | HourlyStaffingRuleScalarFieldEnum[]
  }

  /**
   * HourlyStaffingRule findFirstOrThrow
   */
  export type HourlyStaffingRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which HourlyStaffingRule to fetch.
     */
    where?: HourlyStaffingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HourlyStaffingRules to fetch.
     */
    orderBy?: HourlyStaffingRuleOrderByWithRelationInput | HourlyStaffingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HourlyStaffingRules.
     */
    cursor?: HourlyStaffingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HourlyStaffingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HourlyStaffingRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HourlyStaffingRules.
     */
    distinct?: HourlyStaffingRuleScalarFieldEnum | HourlyStaffingRuleScalarFieldEnum[]
  }

  /**
   * HourlyStaffingRule findMany
   */
  export type HourlyStaffingRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which HourlyStaffingRules to fetch.
     */
    where?: HourlyStaffingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HourlyStaffingRules to fetch.
     */
    orderBy?: HourlyStaffingRuleOrderByWithRelationInput | HourlyStaffingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HourlyStaffingRules.
     */
    cursor?: HourlyStaffingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HourlyStaffingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HourlyStaffingRules.
     */
    skip?: number
    distinct?: HourlyStaffingRuleScalarFieldEnum | HourlyStaffingRuleScalarFieldEnum[]
  }

  /**
   * HourlyStaffingRule create
   */
  export type HourlyStaffingRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a HourlyStaffingRule.
     */
    data: XOR<HourlyStaffingRuleCreateInput, HourlyStaffingRuleUncheckedCreateInput>
  }

  /**
   * HourlyStaffingRule createMany
   */
  export type HourlyStaffingRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HourlyStaffingRules.
     */
    data: HourlyStaffingRuleCreateManyInput | HourlyStaffingRuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HourlyStaffingRule update
   */
  export type HourlyStaffingRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a HourlyStaffingRule.
     */
    data: XOR<HourlyStaffingRuleUpdateInput, HourlyStaffingRuleUncheckedUpdateInput>
    /**
     * Choose, which HourlyStaffingRule to update.
     */
    where: HourlyStaffingRuleWhereUniqueInput
  }

  /**
   * HourlyStaffingRule updateMany
   */
  export type HourlyStaffingRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HourlyStaffingRules.
     */
    data: XOR<HourlyStaffingRuleUpdateManyMutationInput, HourlyStaffingRuleUncheckedUpdateManyInput>
    /**
     * Filter which HourlyStaffingRules to update
     */
    where?: HourlyStaffingRuleWhereInput
  }

  /**
   * HourlyStaffingRule upsert
   */
  export type HourlyStaffingRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the HourlyStaffingRule to update in case it exists.
     */
    where: HourlyStaffingRuleWhereUniqueInput
    /**
     * In case the HourlyStaffingRule found by the `where` argument doesn't exist, create a new HourlyStaffingRule with this data.
     */
    create: XOR<HourlyStaffingRuleCreateInput, HourlyStaffingRuleUncheckedCreateInput>
    /**
     * In case the HourlyStaffingRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HourlyStaffingRuleUpdateInput, HourlyStaffingRuleUncheckedUpdateInput>
  }

  /**
   * HourlyStaffingRule delete
   */
  export type HourlyStaffingRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
    /**
     * Filter which HourlyStaffingRule to delete.
     */
    where: HourlyStaffingRuleWhereUniqueInput
  }

  /**
   * HourlyStaffingRule deleteMany
   */
  export type HourlyStaffingRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HourlyStaffingRules to delete
     */
    where?: HourlyStaffingRuleWhereInput
  }

  /**
   * HourlyStaffingRule without action
   */
  export type HourlyStaffingRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HourlyStaffingRule
     */
    select?: HourlyStaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HourlyStaffingRuleInclude<ExtArgs> | null
  }


  /**
   * Model StaffingRule
   */

  export type AggregateStaffingRule = {
    _count: StaffingRuleCountAggregateOutputType | null
    _avg: StaffingRuleAvgAggregateOutputType | null
    _sum: StaffingRuleSumAggregateOutputType | null
    _min: StaffingRuleMinAggregateOutputType | null
    _max: StaffingRuleMaxAggregateOutputType | null
  }

  export type StaffingRuleAvgAggregateOutputType = {
    id: number | null
    templateId: number | null
    priority: number | null
  }

  export type StaffingRuleSumAggregateOutputType = {
    id: number | null
    templateId: number | null
    priority: number | null
  }

  export type StaffingRuleMinAggregateOutputType = {
    id: number | null
    templateId: number | null
    ruleName: string | null
    ruleType: string | null
    priority: number | null
    isActive: boolean | null
    effectiveFrom: Date | null
    effectiveTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffingRuleMaxAggregateOutputType = {
    id: number | null
    templateId: number | null
    ruleName: string | null
    ruleType: string | null
    priority: number | null
    isActive: boolean | null
    effectiveFrom: Date | null
    effectiveTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffingRuleCountAggregateOutputType = {
    id: number
    templateId: number
    ruleName: number
    ruleType: number
    conditions: number
    staffingRequirements: number
    priority: number
    isActive: number
    effectiveFrom: number
    effectiveTo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffingRuleAvgAggregateInputType = {
    id?: true
    templateId?: true
    priority?: true
  }

  export type StaffingRuleSumAggregateInputType = {
    id?: true
    templateId?: true
    priority?: true
  }

  export type StaffingRuleMinAggregateInputType = {
    id?: true
    templateId?: true
    ruleName?: true
    ruleType?: true
    priority?: true
    isActive?: true
    effectiveFrom?: true
    effectiveTo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffingRuleMaxAggregateInputType = {
    id?: true
    templateId?: true
    ruleName?: true
    ruleType?: true
    priority?: true
    isActive?: true
    effectiveFrom?: true
    effectiveTo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffingRuleCountAggregateInputType = {
    id?: true
    templateId?: true
    ruleName?: true
    ruleType?: true
    conditions?: true
    staffingRequirements?: true
    priority?: true
    isActive?: true
    effectiveFrom?: true
    effectiveTo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffingRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffingRule to aggregate.
     */
    where?: StaffingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffingRules to fetch.
     */
    orderBy?: StaffingRuleOrderByWithRelationInput | StaffingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffingRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffingRules
    **/
    _count?: true | StaffingRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffingRuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffingRuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffingRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffingRuleMaxAggregateInputType
  }

  export type GetStaffingRuleAggregateType<T extends StaffingRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffingRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffingRule[P]>
      : GetScalarType<T[P], AggregateStaffingRule[P]>
  }




  export type StaffingRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffingRuleWhereInput
    orderBy?: StaffingRuleOrderByWithAggregationInput | StaffingRuleOrderByWithAggregationInput[]
    by: StaffingRuleScalarFieldEnum[] | StaffingRuleScalarFieldEnum
    having?: StaffingRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffingRuleCountAggregateInputType | true
    _avg?: StaffingRuleAvgAggregateInputType
    _sum?: StaffingRuleSumAggregateInputType
    _min?: StaffingRuleMinAggregateInputType
    _max?: StaffingRuleMaxAggregateInputType
  }

  export type StaffingRuleGroupByOutputType = {
    id: number
    templateId: number
    ruleName: string
    ruleType: string
    conditions: JsonValue
    staffingRequirements: JsonValue
    priority: number
    isActive: boolean
    effectiveFrom: Date | null
    effectiveTo: Date | null
    createdAt: Date
    updatedAt: Date
    _count: StaffingRuleCountAggregateOutputType | null
    _avg: StaffingRuleAvgAggregateOutputType | null
    _sum: StaffingRuleSumAggregateOutputType | null
    _min: StaffingRuleMinAggregateOutputType | null
    _max: StaffingRuleMaxAggregateOutputType | null
  }

  type GetStaffingRuleGroupByPayload<T extends StaffingRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffingRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffingRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffingRuleGroupByOutputType[P]>
            : GetScalarType<T[P], StaffingRuleGroupByOutputType[P]>
        }
      >
    >


  export type StaffingRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    ruleName?: boolean
    ruleType?: boolean
    conditions?: boolean
    staffingRequirements?: boolean
    priority?: boolean
    isActive?: boolean
    effectiveFrom?: boolean
    effectiveTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    template?: boolean | OperatingHoursTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffingRule"]>


  export type StaffingRuleSelectScalar = {
    id?: boolean
    templateId?: boolean
    ruleName?: boolean
    ruleType?: boolean
    conditions?: boolean
    staffingRequirements?: boolean
    priority?: boolean
    isActive?: boolean
    effectiveFrom?: boolean
    effectiveTo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StaffingRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | OperatingHoursTemplateDefaultArgs<ExtArgs>
  }

  export type $StaffingRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffingRule"
    objects: {
      template: Prisma.$OperatingHoursTemplatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      templateId: number
      ruleName: string
      ruleType: string
      conditions: Prisma.JsonValue
      staffingRequirements: Prisma.JsonValue
      priority: number
      isActive: boolean
      effectiveFrom: Date | null
      effectiveTo: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staffingRule"]>
    composites: {}
  }

  type StaffingRuleGetPayload<S extends boolean | null | undefined | StaffingRuleDefaultArgs> = $Result.GetResult<Prisma.$StaffingRulePayload, S>

  type StaffingRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StaffingRuleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StaffingRuleCountAggregateInputType | true
    }

  export interface StaffingRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffingRule'], meta: { name: 'StaffingRule' } }
    /**
     * Find zero or one StaffingRule that matches the filter.
     * @param {StaffingRuleFindUniqueArgs} args - Arguments to find a StaffingRule
     * @example
     * // Get one StaffingRule
     * const staffingRule = await prisma.staffingRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffingRuleFindUniqueArgs>(args: SelectSubset<T, StaffingRuleFindUniqueArgs<ExtArgs>>): Prisma__StaffingRuleClient<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StaffingRule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StaffingRuleFindUniqueOrThrowArgs} args - Arguments to find a StaffingRule
     * @example
     * // Get one StaffingRule
     * const staffingRule = await prisma.staffingRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffingRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffingRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffingRuleClient<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StaffingRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingRuleFindFirstArgs} args - Arguments to find a StaffingRule
     * @example
     * // Get one StaffingRule
     * const staffingRule = await prisma.staffingRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffingRuleFindFirstArgs>(args?: SelectSubset<T, StaffingRuleFindFirstArgs<ExtArgs>>): Prisma__StaffingRuleClient<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StaffingRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingRuleFindFirstOrThrowArgs} args - Arguments to find a StaffingRule
     * @example
     * // Get one StaffingRule
     * const staffingRule = await prisma.staffingRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffingRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffingRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffingRuleClient<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StaffingRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffingRules
     * const staffingRules = await prisma.staffingRule.findMany()
     * 
     * // Get first 10 StaffingRules
     * const staffingRules = await prisma.staffingRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffingRuleWithIdOnly = await prisma.staffingRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffingRuleFindManyArgs>(args?: SelectSubset<T, StaffingRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StaffingRule.
     * @param {StaffingRuleCreateArgs} args - Arguments to create a StaffingRule.
     * @example
     * // Create one StaffingRule
     * const StaffingRule = await prisma.staffingRule.create({
     *   data: {
     *     // ... data to create a StaffingRule
     *   }
     * })
     * 
     */
    create<T extends StaffingRuleCreateArgs>(args: SelectSubset<T, StaffingRuleCreateArgs<ExtArgs>>): Prisma__StaffingRuleClient<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StaffingRules.
     * @param {StaffingRuleCreateManyArgs} args - Arguments to create many StaffingRules.
     * @example
     * // Create many StaffingRules
     * const staffingRule = await prisma.staffingRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffingRuleCreateManyArgs>(args?: SelectSubset<T, StaffingRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StaffingRule.
     * @param {StaffingRuleDeleteArgs} args - Arguments to delete one StaffingRule.
     * @example
     * // Delete one StaffingRule
     * const StaffingRule = await prisma.staffingRule.delete({
     *   where: {
     *     // ... filter to delete one StaffingRule
     *   }
     * })
     * 
     */
    delete<T extends StaffingRuleDeleteArgs>(args: SelectSubset<T, StaffingRuleDeleteArgs<ExtArgs>>): Prisma__StaffingRuleClient<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StaffingRule.
     * @param {StaffingRuleUpdateArgs} args - Arguments to update one StaffingRule.
     * @example
     * // Update one StaffingRule
     * const staffingRule = await prisma.staffingRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffingRuleUpdateArgs>(args: SelectSubset<T, StaffingRuleUpdateArgs<ExtArgs>>): Prisma__StaffingRuleClient<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StaffingRules.
     * @param {StaffingRuleDeleteManyArgs} args - Arguments to filter StaffingRules to delete.
     * @example
     * // Delete a few StaffingRules
     * const { count } = await prisma.staffingRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffingRuleDeleteManyArgs>(args?: SelectSubset<T, StaffingRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffingRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffingRules
     * const staffingRule = await prisma.staffingRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffingRuleUpdateManyArgs>(args: SelectSubset<T, StaffingRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StaffingRule.
     * @param {StaffingRuleUpsertArgs} args - Arguments to update or create a StaffingRule.
     * @example
     * // Update or create a StaffingRule
     * const staffingRule = await prisma.staffingRule.upsert({
     *   create: {
     *     // ... data to create a StaffingRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffingRule we want to update
     *   }
     * })
     */
    upsert<T extends StaffingRuleUpsertArgs>(args: SelectSubset<T, StaffingRuleUpsertArgs<ExtArgs>>): Prisma__StaffingRuleClient<$Result.GetResult<Prisma.$StaffingRulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StaffingRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingRuleCountArgs} args - Arguments to filter StaffingRules to count.
     * @example
     * // Count the number of StaffingRules
     * const count = await prisma.staffingRule.count({
     *   where: {
     *     // ... the filter for the StaffingRules we want to count
     *   }
     * })
    **/
    count<T extends StaffingRuleCountArgs>(
      args?: Subset<T, StaffingRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffingRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffingRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffingRuleAggregateArgs>(args: Subset<T, StaffingRuleAggregateArgs>): Prisma.PrismaPromise<GetStaffingRuleAggregateType<T>>

    /**
     * Group by StaffingRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffingRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffingRuleGroupByArgs['orderBy'] }
        : { orderBy?: StaffingRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffingRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffingRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffingRule model
   */
  readonly fields: StaffingRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffingRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffingRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends OperatingHoursTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OperatingHoursTemplateDefaultArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffingRule model
   */ 
  interface StaffingRuleFieldRefs {
    readonly id: FieldRef<"StaffingRule", 'Int'>
    readonly templateId: FieldRef<"StaffingRule", 'Int'>
    readonly ruleName: FieldRef<"StaffingRule", 'String'>
    readonly ruleType: FieldRef<"StaffingRule", 'String'>
    readonly conditions: FieldRef<"StaffingRule", 'Json'>
    readonly staffingRequirements: FieldRef<"StaffingRule", 'Json'>
    readonly priority: FieldRef<"StaffingRule", 'Int'>
    readonly isActive: FieldRef<"StaffingRule", 'Boolean'>
    readonly effectiveFrom: FieldRef<"StaffingRule", 'DateTime'>
    readonly effectiveTo: FieldRef<"StaffingRule", 'DateTime'>
    readonly createdAt: FieldRef<"StaffingRule", 'DateTime'>
    readonly updatedAt: FieldRef<"StaffingRule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StaffingRule findUnique
   */
  export type StaffingRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which StaffingRule to fetch.
     */
    where: StaffingRuleWhereUniqueInput
  }

  /**
   * StaffingRule findUniqueOrThrow
   */
  export type StaffingRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which StaffingRule to fetch.
     */
    where: StaffingRuleWhereUniqueInput
  }

  /**
   * StaffingRule findFirst
   */
  export type StaffingRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which StaffingRule to fetch.
     */
    where?: StaffingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffingRules to fetch.
     */
    orderBy?: StaffingRuleOrderByWithRelationInput | StaffingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffingRules.
     */
    cursor?: StaffingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffingRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffingRules.
     */
    distinct?: StaffingRuleScalarFieldEnum | StaffingRuleScalarFieldEnum[]
  }

  /**
   * StaffingRule findFirstOrThrow
   */
  export type StaffingRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which StaffingRule to fetch.
     */
    where?: StaffingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffingRules to fetch.
     */
    orderBy?: StaffingRuleOrderByWithRelationInput | StaffingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffingRules.
     */
    cursor?: StaffingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffingRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffingRules.
     */
    distinct?: StaffingRuleScalarFieldEnum | StaffingRuleScalarFieldEnum[]
  }

  /**
   * StaffingRule findMany
   */
  export type StaffingRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    /**
     * Filter, which StaffingRules to fetch.
     */
    where?: StaffingRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffingRules to fetch.
     */
    orderBy?: StaffingRuleOrderByWithRelationInput | StaffingRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffingRules.
     */
    cursor?: StaffingRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffingRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffingRules.
     */
    skip?: number
    distinct?: StaffingRuleScalarFieldEnum | StaffingRuleScalarFieldEnum[]
  }

  /**
   * StaffingRule create
   */
  export type StaffingRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffingRule.
     */
    data: XOR<StaffingRuleCreateInput, StaffingRuleUncheckedCreateInput>
  }

  /**
   * StaffingRule createMany
   */
  export type StaffingRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffingRules.
     */
    data: StaffingRuleCreateManyInput | StaffingRuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffingRule update
   */
  export type StaffingRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffingRule.
     */
    data: XOR<StaffingRuleUpdateInput, StaffingRuleUncheckedUpdateInput>
    /**
     * Choose, which StaffingRule to update.
     */
    where: StaffingRuleWhereUniqueInput
  }

  /**
   * StaffingRule updateMany
   */
  export type StaffingRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffingRules.
     */
    data: XOR<StaffingRuleUpdateManyMutationInput, StaffingRuleUncheckedUpdateManyInput>
    /**
     * Filter which StaffingRules to update
     */
    where?: StaffingRuleWhereInput
  }

  /**
   * StaffingRule upsert
   */
  export type StaffingRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffingRule to update in case it exists.
     */
    where: StaffingRuleWhereUniqueInput
    /**
     * In case the StaffingRule found by the `where` argument doesn't exist, create a new StaffingRule with this data.
     */
    create: XOR<StaffingRuleCreateInput, StaffingRuleUncheckedCreateInput>
    /**
     * In case the StaffingRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffingRuleUpdateInput, StaffingRuleUncheckedUpdateInput>
  }

  /**
   * StaffingRule delete
   */
  export type StaffingRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
    /**
     * Filter which StaffingRule to delete.
     */
    where: StaffingRuleWhereUniqueInput
  }

  /**
   * StaffingRule deleteMany
   */
  export type StaffingRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffingRules to delete
     */
    where?: StaffingRuleWhereInput
  }

  /**
   * StaffingRule without action
   */
  export type StaffingRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingRule
     */
    select?: StaffingRuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffingRuleInclude<ExtArgs> | null
  }


  /**
   * Model ScheduleOverride
   */

  export type AggregateScheduleOverride = {
    _count: ScheduleOverrideCountAggregateOutputType | null
    _avg: ScheduleOverrideAvgAggregateOutputType | null
    _sum: ScheduleOverrideSumAggregateOutputType | null
    _min: ScheduleOverrideMinAggregateOutputType | null
    _max: ScheduleOverrideMaxAggregateOutputType | null
  }

  export type ScheduleOverrideAvgAggregateOutputType = {
    id: number | null
    templateId: number | null
    createdBy: number | null
  }

  export type ScheduleOverrideSumAggregateOutputType = {
    id: number | null
    templateId: number | null
    createdBy: number | null
  }

  export type ScheduleOverrideMinAggregateOutputType = {
    id: number | null
    templateId: number | null
    overrideDate: Date | null
    overrideType: string | null
    reason: string | null
    isActive: boolean | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleOverrideMaxAggregateOutputType = {
    id: number | null
    templateId: number | null
    overrideDate: Date | null
    overrideType: string | null
    reason: string | null
    isActive: boolean | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleOverrideCountAggregateOutputType = {
    id: number
    templateId: number
    overrideDate: number
    overrideType: number
    customHours: number
    staffingOverride: number
    reason: number
    isActive: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduleOverrideAvgAggregateInputType = {
    id?: true
    templateId?: true
    createdBy?: true
  }

  export type ScheduleOverrideSumAggregateInputType = {
    id?: true
    templateId?: true
    createdBy?: true
  }

  export type ScheduleOverrideMinAggregateInputType = {
    id?: true
    templateId?: true
    overrideDate?: true
    overrideType?: true
    reason?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleOverrideMaxAggregateInputType = {
    id?: true
    templateId?: true
    overrideDate?: true
    overrideType?: true
    reason?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleOverrideCountAggregateInputType = {
    id?: true
    templateId?: true
    overrideDate?: true
    overrideType?: true
    customHours?: true
    staffingOverride?: true
    reason?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduleOverrideAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleOverride to aggregate.
     */
    where?: ScheduleOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleOverrides to fetch.
     */
    orderBy?: ScheduleOverrideOrderByWithRelationInput | ScheduleOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleOverrides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduleOverrides
    **/
    _count?: true | ScheduleOverrideCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleOverrideAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleOverrideSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleOverrideMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleOverrideMaxAggregateInputType
  }

  export type GetScheduleOverrideAggregateType<T extends ScheduleOverrideAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduleOverride]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduleOverride[P]>
      : GetScalarType<T[P], AggregateScheduleOverride[P]>
  }




  export type ScheduleOverrideGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleOverrideWhereInput
    orderBy?: ScheduleOverrideOrderByWithAggregationInput | ScheduleOverrideOrderByWithAggregationInput[]
    by: ScheduleOverrideScalarFieldEnum[] | ScheduleOverrideScalarFieldEnum
    having?: ScheduleOverrideScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleOverrideCountAggregateInputType | true
    _avg?: ScheduleOverrideAvgAggregateInputType
    _sum?: ScheduleOverrideSumAggregateInputType
    _min?: ScheduleOverrideMinAggregateInputType
    _max?: ScheduleOverrideMaxAggregateInputType
  }

  export type ScheduleOverrideGroupByOutputType = {
    id: number
    templateId: number
    overrideDate: Date
    overrideType: string
    customHours: JsonValue | null
    staffingOverride: JsonValue | null
    reason: string | null
    isActive: boolean
    createdBy: number
    createdAt: Date
    updatedAt: Date
    _count: ScheduleOverrideCountAggregateOutputType | null
    _avg: ScheduleOverrideAvgAggregateOutputType | null
    _sum: ScheduleOverrideSumAggregateOutputType | null
    _min: ScheduleOverrideMinAggregateOutputType | null
    _max: ScheduleOverrideMaxAggregateOutputType | null
  }

  type GetScheduleOverrideGroupByPayload<T extends ScheduleOverrideGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleOverrideGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleOverrideGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleOverrideGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleOverrideGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleOverrideSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    overrideDate?: boolean
    overrideType?: boolean
    customHours?: boolean
    staffingOverride?: boolean
    reason?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    template?: boolean | OperatingHoursTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleOverride"]>


  export type ScheduleOverrideSelectScalar = {
    id?: boolean
    templateId?: boolean
    overrideDate?: boolean
    overrideType?: boolean
    customHours?: boolean
    staffingOverride?: boolean
    reason?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduleOverrideInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | OperatingHoursTemplateDefaultArgs<ExtArgs>
  }

  export type $ScheduleOverridePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduleOverride"
    objects: {
      template: Prisma.$OperatingHoursTemplatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      templateId: number
      overrideDate: Date
      overrideType: string
      customHours: Prisma.JsonValue | null
      staffingOverride: Prisma.JsonValue | null
      reason: string | null
      isActive: boolean
      createdBy: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scheduleOverride"]>
    composites: {}
  }

  type ScheduleOverrideGetPayload<S extends boolean | null | undefined | ScheduleOverrideDefaultArgs> = $Result.GetResult<Prisma.$ScheduleOverridePayload, S>

  type ScheduleOverrideCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleOverrideFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleOverrideCountAggregateInputType | true
    }

  export interface ScheduleOverrideDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduleOverride'], meta: { name: 'ScheduleOverride' } }
    /**
     * Find zero or one ScheduleOverride that matches the filter.
     * @param {ScheduleOverrideFindUniqueArgs} args - Arguments to find a ScheduleOverride
     * @example
     * // Get one ScheduleOverride
     * const scheduleOverride = await prisma.scheduleOverride.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleOverrideFindUniqueArgs>(args: SelectSubset<T, ScheduleOverrideFindUniqueArgs<ExtArgs>>): Prisma__ScheduleOverrideClient<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScheduleOverride that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleOverrideFindUniqueOrThrowArgs} args - Arguments to find a ScheduleOverride
     * @example
     * // Get one ScheduleOverride
     * const scheduleOverride = await prisma.scheduleOverride.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleOverrideFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleOverrideFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleOverrideClient<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScheduleOverride that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleOverrideFindFirstArgs} args - Arguments to find a ScheduleOverride
     * @example
     * // Get one ScheduleOverride
     * const scheduleOverride = await prisma.scheduleOverride.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleOverrideFindFirstArgs>(args?: SelectSubset<T, ScheduleOverrideFindFirstArgs<ExtArgs>>): Prisma__ScheduleOverrideClient<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScheduleOverride that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleOverrideFindFirstOrThrowArgs} args - Arguments to find a ScheduleOverride
     * @example
     * // Get one ScheduleOverride
     * const scheduleOverride = await prisma.scheduleOverride.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleOverrideFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleOverrideFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleOverrideClient<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScheduleOverrides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleOverrideFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduleOverrides
     * const scheduleOverrides = await prisma.scheduleOverride.findMany()
     * 
     * // Get first 10 ScheduleOverrides
     * const scheduleOverrides = await prisma.scheduleOverride.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleOverrideWithIdOnly = await prisma.scheduleOverride.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleOverrideFindManyArgs>(args?: SelectSubset<T, ScheduleOverrideFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScheduleOverride.
     * @param {ScheduleOverrideCreateArgs} args - Arguments to create a ScheduleOverride.
     * @example
     * // Create one ScheduleOverride
     * const ScheduleOverride = await prisma.scheduleOverride.create({
     *   data: {
     *     // ... data to create a ScheduleOverride
     *   }
     * })
     * 
     */
    create<T extends ScheduleOverrideCreateArgs>(args: SelectSubset<T, ScheduleOverrideCreateArgs<ExtArgs>>): Prisma__ScheduleOverrideClient<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScheduleOverrides.
     * @param {ScheduleOverrideCreateManyArgs} args - Arguments to create many ScheduleOverrides.
     * @example
     * // Create many ScheduleOverrides
     * const scheduleOverride = await prisma.scheduleOverride.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleOverrideCreateManyArgs>(args?: SelectSubset<T, ScheduleOverrideCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ScheduleOverride.
     * @param {ScheduleOverrideDeleteArgs} args - Arguments to delete one ScheduleOverride.
     * @example
     * // Delete one ScheduleOverride
     * const ScheduleOverride = await prisma.scheduleOverride.delete({
     *   where: {
     *     // ... filter to delete one ScheduleOverride
     *   }
     * })
     * 
     */
    delete<T extends ScheduleOverrideDeleteArgs>(args: SelectSubset<T, ScheduleOverrideDeleteArgs<ExtArgs>>): Prisma__ScheduleOverrideClient<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScheduleOverride.
     * @param {ScheduleOverrideUpdateArgs} args - Arguments to update one ScheduleOverride.
     * @example
     * // Update one ScheduleOverride
     * const scheduleOverride = await prisma.scheduleOverride.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleOverrideUpdateArgs>(args: SelectSubset<T, ScheduleOverrideUpdateArgs<ExtArgs>>): Prisma__ScheduleOverrideClient<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScheduleOverrides.
     * @param {ScheduleOverrideDeleteManyArgs} args - Arguments to filter ScheduleOverrides to delete.
     * @example
     * // Delete a few ScheduleOverrides
     * const { count } = await prisma.scheduleOverride.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleOverrideDeleteManyArgs>(args?: SelectSubset<T, ScheduleOverrideDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduleOverrides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleOverrideUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduleOverrides
     * const scheduleOverride = await prisma.scheduleOverride.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleOverrideUpdateManyArgs>(args: SelectSubset<T, ScheduleOverrideUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScheduleOverride.
     * @param {ScheduleOverrideUpsertArgs} args - Arguments to update or create a ScheduleOverride.
     * @example
     * // Update or create a ScheduleOverride
     * const scheduleOverride = await prisma.scheduleOverride.upsert({
     *   create: {
     *     // ... data to create a ScheduleOverride
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduleOverride we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleOverrideUpsertArgs>(args: SelectSubset<T, ScheduleOverrideUpsertArgs<ExtArgs>>): Prisma__ScheduleOverrideClient<$Result.GetResult<Prisma.$ScheduleOverridePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScheduleOverrides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleOverrideCountArgs} args - Arguments to filter ScheduleOverrides to count.
     * @example
     * // Count the number of ScheduleOverrides
     * const count = await prisma.scheduleOverride.count({
     *   where: {
     *     // ... the filter for the ScheduleOverrides we want to count
     *   }
     * })
    **/
    count<T extends ScheduleOverrideCountArgs>(
      args?: Subset<T, ScheduleOverrideCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleOverrideCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduleOverride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleOverrideAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleOverrideAggregateArgs>(args: Subset<T, ScheduleOverrideAggregateArgs>): Prisma.PrismaPromise<GetScheduleOverrideAggregateType<T>>

    /**
     * Group by ScheduleOverride.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleOverrideGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleOverrideGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleOverrideGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleOverrideGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleOverrideGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleOverrideGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduleOverride model
   */
  readonly fields: ScheduleOverrideFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduleOverride.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleOverrideClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends OperatingHoursTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OperatingHoursTemplateDefaultArgs<ExtArgs>>): Prisma__OperatingHoursTemplateClient<$Result.GetResult<Prisma.$OperatingHoursTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduleOverride model
   */ 
  interface ScheduleOverrideFieldRefs {
    readonly id: FieldRef<"ScheduleOverride", 'Int'>
    readonly templateId: FieldRef<"ScheduleOverride", 'Int'>
    readonly overrideDate: FieldRef<"ScheduleOverride", 'DateTime'>
    readonly overrideType: FieldRef<"ScheduleOverride", 'String'>
    readonly customHours: FieldRef<"ScheduleOverride", 'Json'>
    readonly staffingOverride: FieldRef<"ScheduleOverride", 'Json'>
    readonly reason: FieldRef<"ScheduleOverride", 'String'>
    readonly isActive: FieldRef<"ScheduleOverride", 'Boolean'>
    readonly createdBy: FieldRef<"ScheduleOverride", 'Int'>
    readonly createdAt: FieldRef<"ScheduleOverride", 'DateTime'>
    readonly updatedAt: FieldRef<"ScheduleOverride", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScheduleOverride findUnique
   */
  export type ScheduleOverrideFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleOverride to fetch.
     */
    where: ScheduleOverrideWhereUniqueInput
  }

  /**
   * ScheduleOverride findUniqueOrThrow
   */
  export type ScheduleOverrideFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleOverride to fetch.
     */
    where: ScheduleOverrideWhereUniqueInput
  }

  /**
   * ScheduleOverride findFirst
   */
  export type ScheduleOverrideFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleOverride to fetch.
     */
    where?: ScheduleOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleOverrides to fetch.
     */
    orderBy?: ScheduleOverrideOrderByWithRelationInput | ScheduleOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleOverrides.
     */
    cursor?: ScheduleOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleOverrides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleOverrides.
     */
    distinct?: ScheduleOverrideScalarFieldEnum | ScheduleOverrideScalarFieldEnum[]
  }

  /**
   * ScheduleOverride findFirstOrThrow
   */
  export type ScheduleOverrideFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleOverride to fetch.
     */
    where?: ScheduleOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleOverrides to fetch.
     */
    orderBy?: ScheduleOverrideOrderByWithRelationInput | ScheduleOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleOverrides.
     */
    cursor?: ScheduleOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleOverrides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleOverrides.
     */
    distinct?: ScheduleOverrideScalarFieldEnum | ScheduleOverrideScalarFieldEnum[]
  }

  /**
   * ScheduleOverride findMany
   */
  export type ScheduleOverrideFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleOverrides to fetch.
     */
    where?: ScheduleOverrideWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleOverrides to fetch.
     */
    orderBy?: ScheduleOverrideOrderByWithRelationInput | ScheduleOverrideOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduleOverrides.
     */
    cursor?: ScheduleOverrideWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleOverrides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleOverrides.
     */
    skip?: number
    distinct?: ScheduleOverrideScalarFieldEnum | ScheduleOverrideScalarFieldEnum[]
  }

  /**
   * ScheduleOverride create
   */
  export type ScheduleOverrideCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    /**
     * The data needed to create a ScheduleOverride.
     */
    data: XOR<ScheduleOverrideCreateInput, ScheduleOverrideUncheckedCreateInput>
  }

  /**
   * ScheduleOverride createMany
   */
  export type ScheduleOverrideCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduleOverrides.
     */
    data: ScheduleOverrideCreateManyInput | ScheduleOverrideCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduleOverride update
   */
  export type ScheduleOverrideUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    /**
     * The data needed to update a ScheduleOverride.
     */
    data: XOR<ScheduleOverrideUpdateInput, ScheduleOverrideUncheckedUpdateInput>
    /**
     * Choose, which ScheduleOverride to update.
     */
    where: ScheduleOverrideWhereUniqueInput
  }

  /**
   * ScheduleOverride updateMany
   */
  export type ScheduleOverrideUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduleOverrides.
     */
    data: XOR<ScheduleOverrideUpdateManyMutationInput, ScheduleOverrideUncheckedUpdateManyInput>
    /**
     * Filter which ScheduleOverrides to update
     */
    where?: ScheduleOverrideWhereInput
  }

  /**
   * ScheduleOverride upsert
   */
  export type ScheduleOverrideUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    /**
     * The filter to search for the ScheduleOverride to update in case it exists.
     */
    where: ScheduleOverrideWhereUniqueInput
    /**
     * In case the ScheduleOverride found by the `where` argument doesn't exist, create a new ScheduleOverride with this data.
     */
    create: XOR<ScheduleOverrideCreateInput, ScheduleOverrideUncheckedCreateInput>
    /**
     * In case the ScheduleOverride was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleOverrideUpdateInput, ScheduleOverrideUncheckedUpdateInput>
  }

  /**
   * ScheduleOverride delete
   */
  export type ScheduleOverrideDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
    /**
     * Filter which ScheduleOverride to delete.
     */
    where: ScheduleOverrideWhereUniqueInput
  }

  /**
   * ScheduleOverride deleteMany
   */
  export type ScheduleOverrideDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleOverrides to delete
     */
    where?: ScheduleOverrideWhereInput
  }

  /**
   * ScheduleOverride without action
   */
  export type ScheduleOverrideDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleOverride
     */
    select?: ScheduleOverrideSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleOverrideInclude<ExtArgs> | null
  }


  /**
   * Model StaffingAnalytics
   */

  export type AggregateStaffingAnalytics = {
    _count: StaffingAnalyticsCountAggregateOutputType | null
    _avg: StaffingAnalyticsAvgAggregateOutputType | null
    _sum: StaffingAnalyticsSumAggregateOutputType | null
    _min: StaffingAnalyticsMinAggregateOutputType | null
    _max: StaffingAnalyticsMaxAggregateOutputType | null
  }

  export type StaffingAnalyticsAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
    dayOfWeek: number | null
    totalScheduledHours: number | null
    totalRequiredHours: number | null
    coverageRate: number | null
    utilizationRate: number | null
    shortfallHours: number | null
    overstaffingHours: number | null
    averageStaffPerHour: number | null
    peakStaffingHour: number | null
    lowStaffingHour: number | null
  }

  export type StaffingAnalyticsSumAggregateOutputType = {
    id: number | null
    companyId: number | null
    dayOfWeek: number | null
    totalScheduledHours: number | null
    totalRequiredHours: number | null
    coverageRate: number | null
    utilizationRate: number | null
    shortfallHours: number | null
    overstaffingHours: number | null
    averageStaffPerHour: number | null
    peakStaffingHour: number | null
    lowStaffingHour: number | null
  }

  export type StaffingAnalyticsMinAggregateOutputType = {
    id: number | null
    companyId: number | null
    analysisDate: Date | null
    dayOfWeek: number | null
    totalScheduledHours: number | null
    totalRequiredHours: number | null
    coverageRate: number | null
    utilizationRate: number | null
    shortfallHours: number | null
    overstaffingHours: number | null
    averageStaffPerHour: number | null
    peakStaffingHour: number | null
    lowStaffingHour: number | null
    createdAt: Date | null
  }

  export type StaffingAnalyticsMaxAggregateOutputType = {
    id: number | null
    companyId: number | null
    analysisDate: Date | null
    dayOfWeek: number | null
    totalScheduledHours: number | null
    totalRequiredHours: number | null
    coverageRate: number | null
    utilizationRate: number | null
    shortfallHours: number | null
    overstaffingHours: number | null
    averageStaffPerHour: number | null
    peakStaffingHour: number | null
    lowStaffingHour: number | null
    createdAt: Date | null
  }

  export type StaffingAnalyticsCountAggregateOutputType = {
    id: number
    companyId: number
    analysisDate: number
    dayOfWeek: number
    totalScheduledHours: number
    totalRequiredHours: number
    coverageRate: number
    utilizationRate: number
    shortfallHours: number
    overstaffingHours: number
    averageStaffPerHour: number
    peakStaffingHour: number
    lowStaffingHour: number
    hourlyBreakdown: number
    departmentBreakdown: number
    skillGaps: number
    costAnalysis: number
    recommendations: number
    createdAt: number
    _all: number
  }


  export type StaffingAnalyticsAvgAggregateInputType = {
    id?: true
    companyId?: true
    dayOfWeek?: true
    totalScheduledHours?: true
    totalRequiredHours?: true
    coverageRate?: true
    utilizationRate?: true
    shortfallHours?: true
    overstaffingHours?: true
    averageStaffPerHour?: true
    peakStaffingHour?: true
    lowStaffingHour?: true
  }

  export type StaffingAnalyticsSumAggregateInputType = {
    id?: true
    companyId?: true
    dayOfWeek?: true
    totalScheduledHours?: true
    totalRequiredHours?: true
    coverageRate?: true
    utilizationRate?: true
    shortfallHours?: true
    overstaffingHours?: true
    averageStaffPerHour?: true
    peakStaffingHour?: true
    lowStaffingHour?: true
  }

  export type StaffingAnalyticsMinAggregateInputType = {
    id?: true
    companyId?: true
    analysisDate?: true
    dayOfWeek?: true
    totalScheduledHours?: true
    totalRequiredHours?: true
    coverageRate?: true
    utilizationRate?: true
    shortfallHours?: true
    overstaffingHours?: true
    averageStaffPerHour?: true
    peakStaffingHour?: true
    lowStaffingHour?: true
    createdAt?: true
  }

  export type StaffingAnalyticsMaxAggregateInputType = {
    id?: true
    companyId?: true
    analysisDate?: true
    dayOfWeek?: true
    totalScheduledHours?: true
    totalRequiredHours?: true
    coverageRate?: true
    utilizationRate?: true
    shortfallHours?: true
    overstaffingHours?: true
    averageStaffPerHour?: true
    peakStaffingHour?: true
    lowStaffingHour?: true
    createdAt?: true
  }

  export type StaffingAnalyticsCountAggregateInputType = {
    id?: true
    companyId?: true
    analysisDate?: true
    dayOfWeek?: true
    totalScheduledHours?: true
    totalRequiredHours?: true
    coverageRate?: true
    utilizationRate?: true
    shortfallHours?: true
    overstaffingHours?: true
    averageStaffPerHour?: true
    peakStaffingHour?: true
    lowStaffingHour?: true
    hourlyBreakdown?: true
    departmentBreakdown?: true
    skillGaps?: true
    costAnalysis?: true
    recommendations?: true
    createdAt?: true
    _all?: true
  }

  export type StaffingAnalyticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffingAnalytics to aggregate.
     */
    where?: StaffingAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffingAnalytics to fetch.
     */
    orderBy?: StaffingAnalyticsOrderByWithRelationInput | StaffingAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffingAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffingAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffingAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffingAnalytics
    **/
    _count?: true | StaffingAnalyticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffingAnalyticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffingAnalyticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffingAnalyticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffingAnalyticsMaxAggregateInputType
  }

  export type GetStaffingAnalyticsAggregateType<T extends StaffingAnalyticsAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffingAnalytics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffingAnalytics[P]>
      : GetScalarType<T[P], AggregateStaffingAnalytics[P]>
  }




  export type StaffingAnalyticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffingAnalyticsWhereInput
    orderBy?: StaffingAnalyticsOrderByWithAggregationInput | StaffingAnalyticsOrderByWithAggregationInput[]
    by: StaffingAnalyticsScalarFieldEnum[] | StaffingAnalyticsScalarFieldEnum
    having?: StaffingAnalyticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffingAnalyticsCountAggregateInputType | true
    _avg?: StaffingAnalyticsAvgAggregateInputType
    _sum?: StaffingAnalyticsSumAggregateInputType
    _min?: StaffingAnalyticsMinAggregateInputType
    _max?: StaffingAnalyticsMaxAggregateInputType
  }

  export type StaffingAnalyticsGroupByOutputType = {
    id: number
    companyId: number
    analysisDate: Date
    dayOfWeek: number
    totalScheduledHours: number
    totalRequiredHours: number
    coverageRate: number
    utilizationRate: number
    shortfallHours: number
    overstaffingHours: number
    averageStaffPerHour: number
    peakStaffingHour: number | null
    lowStaffingHour: number | null
    hourlyBreakdown: JsonValue
    departmentBreakdown: JsonValue | null
    skillGaps: JsonValue | null
    costAnalysis: JsonValue | null
    recommendations: JsonValue | null
    createdAt: Date
    _count: StaffingAnalyticsCountAggregateOutputType | null
    _avg: StaffingAnalyticsAvgAggregateOutputType | null
    _sum: StaffingAnalyticsSumAggregateOutputType | null
    _min: StaffingAnalyticsMinAggregateOutputType | null
    _max: StaffingAnalyticsMaxAggregateOutputType | null
  }

  type GetStaffingAnalyticsGroupByPayload<T extends StaffingAnalyticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffingAnalyticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffingAnalyticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffingAnalyticsGroupByOutputType[P]>
            : GetScalarType<T[P], StaffingAnalyticsGroupByOutputType[P]>
        }
      >
    >


  export type StaffingAnalyticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    analysisDate?: boolean
    dayOfWeek?: boolean
    totalScheduledHours?: boolean
    totalRequiredHours?: boolean
    coverageRate?: boolean
    utilizationRate?: boolean
    shortfallHours?: boolean
    overstaffingHours?: boolean
    averageStaffPerHour?: boolean
    peakStaffingHour?: boolean
    lowStaffingHour?: boolean
    hourlyBreakdown?: boolean
    departmentBreakdown?: boolean
    skillGaps?: boolean
    costAnalysis?: boolean
    recommendations?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["staffingAnalytics"]>


  export type StaffingAnalyticsSelectScalar = {
    id?: boolean
    companyId?: boolean
    analysisDate?: boolean
    dayOfWeek?: boolean
    totalScheduledHours?: boolean
    totalRequiredHours?: boolean
    coverageRate?: boolean
    utilizationRate?: boolean
    shortfallHours?: boolean
    overstaffingHours?: boolean
    averageStaffPerHour?: boolean
    peakStaffingHour?: boolean
    lowStaffingHour?: boolean
    hourlyBreakdown?: boolean
    departmentBreakdown?: boolean
    skillGaps?: boolean
    costAnalysis?: boolean
    recommendations?: boolean
    createdAt?: boolean
  }


  export type $StaffingAnalyticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffingAnalytics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyId: number
      analysisDate: Date
      dayOfWeek: number
      totalScheduledHours: number
      totalRequiredHours: number
      coverageRate: number
      utilizationRate: number
      shortfallHours: number
      overstaffingHours: number
      averageStaffPerHour: number
      peakStaffingHour: number | null
      lowStaffingHour: number | null
      hourlyBreakdown: Prisma.JsonValue
      departmentBreakdown: Prisma.JsonValue | null
      skillGaps: Prisma.JsonValue | null
      costAnalysis: Prisma.JsonValue | null
      recommendations: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["staffingAnalytics"]>
    composites: {}
  }

  type StaffingAnalyticsGetPayload<S extends boolean | null | undefined | StaffingAnalyticsDefaultArgs> = $Result.GetResult<Prisma.$StaffingAnalyticsPayload, S>

  type StaffingAnalyticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StaffingAnalyticsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StaffingAnalyticsCountAggregateInputType | true
    }

  export interface StaffingAnalyticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffingAnalytics'], meta: { name: 'StaffingAnalytics' } }
    /**
     * Find zero or one StaffingAnalytics that matches the filter.
     * @param {StaffingAnalyticsFindUniqueArgs} args - Arguments to find a StaffingAnalytics
     * @example
     * // Get one StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffingAnalyticsFindUniqueArgs>(args: SelectSubset<T, StaffingAnalyticsFindUniqueArgs<ExtArgs>>): Prisma__StaffingAnalyticsClient<$Result.GetResult<Prisma.$StaffingAnalyticsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StaffingAnalytics that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StaffingAnalyticsFindUniqueOrThrowArgs} args - Arguments to find a StaffingAnalytics
     * @example
     * // Get one StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffingAnalyticsFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffingAnalyticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffingAnalyticsClient<$Result.GetResult<Prisma.$StaffingAnalyticsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StaffingAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingAnalyticsFindFirstArgs} args - Arguments to find a StaffingAnalytics
     * @example
     * // Get one StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffingAnalyticsFindFirstArgs>(args?: SelectSubset<T, StaffingAnalyticsFindFirstArgs<ExtArgs>>): Prisma__StaffingAnalyticsClient<$Result.GetResult<Prisma.$StaffingAnalyticsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StaffingAnalytics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingAnalyticsFindFirstOrThrowArgs} args - Arguments to find a StaffingAnalytics
     * @example
     * // Get one StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffingAnalyticsFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffingAnalyticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffingAnalyticsClient<$Result.GetResult<Prisma.$StaffingAnalyticsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StaffingAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingAnalyticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.findMany()
     * 
     * // Get first 10 StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffingAnalyticsWithIdOnly = await prisma.staffingAnalytics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffingAnalyticsFindManyArgs>(args?: SelectSubset<T, StaffingAnalyticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffingAnalyticsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StaffingAnalytics.
     * @param {StaffingAnalyticsCreateArgs} args - Arguments to create a StaffingAnalytics.
     * @example
     * // Create one StaffingAnalytics
     * const StaffingAnalytics = await prisma.staffingAnalytics.create({
     *   data: {
     *     // ... data to create a StaffingAnalytics
     *   }
     * })
     * 
     */
    create<T extends StaffingAnalyticsCreateArgs>(args: SelectSubset<T, StaffingAnalyticsCreateArgs<ExtArgs>>): Prisma__StaffingAnalyticsClient<$Result.GetResult<Prisma.$StaffingAnalyticsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StaffingAnalytics.
     * @param {StaffingAnalyticsCreateManyArgs} args - Arguments to create many StaffingAnalytics.
     * @example
     * // Create many StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffingAnalyticsCreateManyArgs>(args?: SelectSubset<T, StaffingAnalyticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StaffingAnalytics.
     * @param {StaffingAnalyticsDeleteArgs} args - Arguments to delete one StaffingAnalytics.
     * @example
     * // Delete one StaffingAnalytics
     * const StaffingAnalytics = await prisma.staffingAnalytics.delete({
     *   where: {
     *     // ... filter to delete one StaffingAnalytics
     *   }
     * })
     * 
     */
    delete<T extends StaffingAnalyticsDeleteArgs>(args: SelectSubset<T, StaffingAnalyticsDeleteArgs<ExtArgs>>): Prisma__StaffingAnalyticsClient<$Result.GetResult<Prisma.$StaffingAnalyticsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StaffingAnalytics.
     * @param {StaffingAnalyticsUpdateArgs} args - Arguments to update one StaffingAnalytics.
     * @example
     * // Update one StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffingAnalyticsUpdateArgs>(args: SelectSubset<T, StaffingAnalyticsUpdateArgs<ExtArgs>>): Prisma__StaffingAnalyticsClient<$Result.GetResult<Prisma.$StaffingAnalyticsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StaffingAnalytics.
     * @param {StaffingAnalyticsDeleteManyArgs} args - Arguments to filter StaffingAnalytics to delete.
     * @example
     * // Delete a few StaffingAnalytics
     * const { count } = await prisma.staffingAnalytics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffingAnalyticsDeleteManyArgs>(args?: SelectSubset<T, StaffingAnalyticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffingAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingAnalyticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffingAnalyticsUpdateManyArgs>(args: SelectSubset<T, StaffingAnalyticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StaffingAnalytics.
     * @param {StaffingAnalyticsUpsertArgs} args - Arguments to update or create a StaffingAnalytics.
     * @example
     * // Update or create a StaffingAnalytics
     * const staffingAnalytics = await prisma.staffingAnalytics.upsert({
     *   create: {
     *     // ... data to create a StaffingAnalytics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffingAnalytics we want to update
     *   }
     * })
     */
    upsert<T extends StaffingAnalyticsUpsertArgs>(args: SelectSubset<T, StaffingAnalyticsUpsertArgs<ExtArgs>>): Prisma__StaffingAnalyticsClient<$Result.GetResult<Prisma.$StaffingAnalyticsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StaffingAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingAnalyticsCountArgs} args - Arguments to filter StaffingAnalytics to count.
     * @example
     * // Count the number of StaffingAnalytics
     * const count = await prisma.staffingAnalytics.count({
     *   where: {
     *     // ... the filter for the StaffingAnalytics we want to count
     *   }
     * })
    **/
    count<T extends StaffingAnalyticsCountArgs>(
      args?: Subset<T, StaffingAnalyticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffingAnalyticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffingAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingAnalyticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffingAnalyticsAggregateArgs>(args: Subset<T, StaffingAnalyticsAggregateArgs>): Prisma.PrismaPromise<GetStaffingAnalyticsAggregateType<T>>

    /**
     * Group by StaffingAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffingAnalyticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffingAnalyticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffingAnalyticsGroupByArgs['orderBy'] }
        : { orderBy?: StaffingAnalyticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffingAnalyticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffingAnalyticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffingAnalytics model
   */
  readonly fields: StaffingAnalyticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffingAnalytics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffingAnalyticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffingAnalytics model
   */ 
  interface StaffingAnalyticsFieldRefs {
    readonly id: FieldRef<"StaffingAnalytics", 'Int'>
    readonly companyId: FieldRef<"StaffingAnalytics", 'Int'>
    readonly analysisDate: FieldRef<"StaffingAnalytics", 'DateTime'>
    readonly dayOfWeek: FieldRef<"StaffingAnalytics", 'Int'>
    readonly totalScheduledHours: FieldRef<"StaffingAnalytics", 'Float'>
    readonly totalRequiredHours: FieldRef<"StaffingAnalytics", 'Float'>
    readonly coverageRate: FieldRef<"StaffingAnalytics", 'Float'>
    readonly utilizationRate: FieldRef<"StaffingAnalytics", 'Float'>
    readonly shortfallHours: FieldRef<"StaffingAnalytics", 'Float'>
    readonly overstaffingHours: FieldRef<"StaffingAnalytics", 'Float'>
    readonly averageStaffPerHour: FieldRef<"StaffingAnalytics", 'Float'>
    readonly peakStaffingHour: FieldRef<"StaffingAnalytics", 'Int'>
    readonly lowStaffingHour: FieldRef<"StaffingAnalytics", 'Int'>
    readonly hourlyBreakdown: FieldRef<"StaffingAnalytics", 'Json'>
    readonly departmentBreakdown: FieldRef<"StaffingAnalytics", 'Json'>
    readonly skillGaps: FieldRef<"StaffingAnalytics", 'Json'>
    readonly costAnalysis: FieldRef<"StaffingAnalytics", 'Json'>
    readonly recommendations: FieldRef<"StaffingAnalytics", 'Json'>
    readonly createdAt: FieldRef<"StaffingAnalytics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StaffingAnalytics findUnique
   */
  export type StaffingAnalyticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
    /**
     * Filter, which StaffingAnalytics to fetch.
     */
    where: StaffingAnalyticsWhereUniqueInput
  }

  /**
   * StaffingAnalytics findUniqueOrThrow
   */
  export type StaffingAnalyticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
    /**
     * Filter, which StaffingAnalytics to fetch.
     */
    where: StaffingAnalyticsWhereUniqueInput
  }

  /**
   * StaffingAnalytics findFirst
   */
  export type StaffingAnalyticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
    /**
     * Filter, which StaffingAnalytics to fetch.
     */
    where?: StaffingAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffingAnalytics to fetch.
     */
    orderBy?: StaffingAnalyticsOrderByWithRelationInput | StaffingAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffingAnalytics.
     */
    cursor?: StaffingAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffingAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffingAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffingAnalytics.
     */
    distinct?: StaffingAnalyticsScalarFieldEnum | StaffingAnalyticsScalarFieldEnum[]
  }

  /**
   * StaffingAnalytics findFirstOrThrow
   */
  export type StaffingAnalyticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
    /**
     * Filter, which StaffingAnalytics to fetch.
     */
    where?: StaffingAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffingAnalytics to fetch.
     */
    orderBy?: StaffingAnalyticsOrderByWithRelationInput | StaffingAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffingAnalytics.
     */
    cursor?: StaffingAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffingAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffingAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffingAnalytics.
     */
    distinct?: StaffingAnalyticsScalarFieldEnum | StaffingAnalyticsScalarFieldEnum[]
  }

  /**
   * StaffingAnalytics findMany
   */
  export type StaffingAnalyticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
    /**
     * Filter, which StaffingAnalytics to fetch.
     */
    where?: StaffingAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffingAnalytics to fetch.
     */
    orderBy?: StaffingAnalyticsOrderByWithRelationInput | StaffingAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffingAnalytics.
     */
    cursor?: StaffingAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffingAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffingAnalytics.
     */
    skip?: number
    distinct?: StaffingAnalyticsScalarFieldEnum | StaffingAnalyticsScalarFieldEnum[]
  }

  /**
   * StaffingAnalytics create
   */
  export type StaffingAnalyticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
    /**
     * The data needed to create a StaffingAnalytics.
     */
    data: XOR<StaffingAnalyticsCreateInput, StaffingAnalyticsUncheckedCreateInput>
  }

  /**
   * StaffingAnalytics createMany
   */
  export type StaffingAnalyticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffingAnalytics.
     */
    data: StaffingAnalyticsCreateManyInput | StaffingAnalyticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffingAnalytics update
   */
  export type StaffingAnalyticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
    /**
     * The data needed to update a StaffingAnalytics.
     */
    data: XOR<StaffingAnalyticsUpdateInput, StaffingAnalyticsUncheckedUpdateInput>
    /**
     * Choose, which StaffingAnalytics to update.
     */
    where: StaffingAnalyticsWhereUniqueInput
  }

  /**
   * StaffingAnalytics updateMany
   */
  export type StaffingAnalyticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffingAnalytics.
     */
    data: XOR<StaffingAnalyticsUpdateManyMutationInput, StaffingAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which StaffingAnalytics to update
     */
    where?: StaffingAnalyticsWhereInput
  }

  /**
   * StaffingAnalytics upsert
   */
  export type StaffingAnalyticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
    /**
     * The filter to search for the StaffingAnalytics to update in case it exists.
     */
    where: StaffingAnalyticsWhereUniqueInput
    /**
     * In case the StaffingAnalytics found by the `where` argument doesn't exist, create a new StaffingAnalytics with this data.
     */
    create: XOR<StaffingAnalyticsCreateInput, StaffingAnalyticsUncheckedCreateInput>
    /**
     * In case the StaffingAnalytics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffingAnalyticsUpdateInput, StaffingAnalyticsUncheckedUpdateInput>
  }

  /**
   * StaffingAnalytics delete
   */
  export type StaffingAnalyticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
    /**
     * Filter which StaffingAnalytics to delete.
     */
    where: StaffingAnalyticsWhereUniqueInput
  }

  /**
   * StaffingAnalytics deleteMany
   */
  export type StaffingAnalyticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffingAnalytics to delete
     */
    where?: StaffingAnalyticsWhereInput
  }

  /**
   * StaffingAnalytics without action
   */
  export type StaffingAnalyticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffingAnalytics
     */
    select?: StaffingAnalyticsSelect<ExtArgs> | null
  }


  /**
   * Model ScheduleDraft
   */

  export type AggregateScheduleDraft = {
    _count: ScheduleDraftCountAggregateOutputType | null
    _avg: ScheduleDraftAvgAggregateOutputType | null
    _sum: ScheduleDraftSumAggregateOutputType | null
    _min: ScheduleDraftMinAggregateOutputType | null
    _max: ScheduleDraftMaxAggregateOutputType | null
  }

  export type ScheduleDraftAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
    basedOnTemplateId: number | null
    basedOnDraftId: number | null
    createdBy: number | null
    approvedBy: number | null
  }

  export type ScheduleDraftSumAggregateOutputType = {
    id: number | null
    companyId: number | null
    basedOnTemplateId: number | null
    basedOnDraftId: number | null
    createdBy: number | null
    approvedBy: number | null
  }

  export type ScheduleDraftMinAggregateOutputType = {
    id: number | null
    companyId: number | null
    name: string | null
    description: string | null
    version: string | null
    status: string | null
    periodStart: Date | null
    periodEnd: Date | null
    basedOnTemplateId: number | null
    basedOnDraftId: number | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    approvedBy: number | null
    approvedAt: Date | null
    activatedAt: Date | null
    archivedAt: Date | null
    notes: string | null
  }

  export type ScheduleDraftMaxAggregateOutputType = {
    id: number | null
    companyId: number | null
    name: string | null
    description: string | null
    version: string | null
    status: string | null
    periodStart: Date | null
    periodEnd: Date | null
    basedOnTemplateId: number | null
    basedOnDraftId: number | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    approvedBy: number | null
    approvedAt: Date | null
    activatedAt: Date | null
    archivedAt: Date | null
    notes: string | null
  }

  export type ScheduleDraftCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    description: number
    version: number
    status: number
    periodStart: number
    periodEnd: number
    basedOnTemplateId: number
    basedOnDraftId: number
    createdBy: number
    createdAt: number
    updatedAt: number
    approvedBy: number
    approvedAt: number
    activatedAt: number
    archivedAt: number
    metadata: number
    notes: number
    _all: number
  }


  export type ScheduleDraftAvgAggregateInputType = {
    id?: true
    companyId?: true
    basedOnTemplateId?: true
    basedOnDraftId?: true
    createdBy?: true
    approvedBy?: true
  }

  export type ScheduleDraftSumAggregateInputType = {
    id?: true
    companyId?: true
    basedOnTemplateId?: true
    basedOnDraftId?: true
    createdBy?: true
    approvedBy?: true
  }

  export type ScheduleDraftMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    description?: true
    version?: true
    status?: true
    periodStart?: true
    periodEnd?: true
    basedOnTemplateId?: true
    basedOnDraftId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    approvedBy?: true
    approvedAt?: true
    activatedAt?: true
    archivedAt?: true
    notes?: true
  }

  export type ScheduleDraftMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    description?: true
    version?: true
    status?: true
    periodStart?: true
    periodEnd?: true
    basedOnTemplateId?: true
    basedOnDraftId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    approvedBy?: true
    approvedAt?: true
    activatedAt?: true
    archivedAt?: true
    notes?: true
  }

  export type ScheduleDraftCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    description?: true
    version?: true
    status?: true
    periodStart?: true
    periodEnd?: true
    basedOnTemplateId?: true
    basedOnDraftId?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    approvedBy?: true
    approvedAt?: true
    activatedAt?: true
    archivedAt?: true
    metadata?: true
    notes?: true
    _all?: true
  }

  export type ScheduleDraftAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleDraft to aggregate.
     */
    where?: ScheduleDraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleDrafts to fetch.
     */
    orderBy?: ScheduleDraftOrderByWithRelationInput | ScheduleDraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleDraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleDrafts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleDrafts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduleDrafts
    **/
    _count?: true | ScheduleDraftCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleDraftAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleDraftSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleDraftMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleDraftMaxAggregateInputType
  }

  export type GetScheduleDraftAggregateType<T extends ScheduleDraftAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduleDraft]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduleDraft[P]>
      : GetScalarType<T[P], AggregateScheduleDraft[P]>
  }




  export type ScheduleDraftGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleDraftWhereInput
    orderBy?: ScheduleDraftOrderByWithAggregationInput | ScheduleDraftOrderByWithAggregationInput[]
    by: ScheduleDraftScalarFieldEnum[] | ScheduleDraftScalarFieldEnum
    having?: ScheduleDraftScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleDraftCountAggregateInputType | true
    _avg?: ScheduleDraftAvgAggregateInputType
    _sum?: ScheduleDraftSumAggregateInputType
    _min?: ScheduleDraftMinAggregateInputType
    _max?: ScheduleDraftMaxAggregateInputType
  }

  export type ScheduleDraftGroupByOutputType = {
    id: number
    companyId: number
    name: string
    description: string | null
    version: string
    status: string
    periodStart: Date
    periodEnd: Date
    basedOnTemplateId: number | null
    basedOnDraftId: number | null
    createdBy: number
    createdAt: Date
    updatedAt: Date
    approvedBy: number | null
    approvedAt: Date | null
    activatedAt: Date | null
    archivedAt: Date | null
    metadata: JsonValue | null
    notes: string | null
    _count: ScheduleDraftCountAggregateOutputType | null
    _avg: ScheduleDraftAvgAggregateOutputType | null
    _sum: ScheduleDraftSumAggregateOutputType | null
    _min: ScheduleDraftMinAggregateOutputType | null
    _max: ScheduleDraftMaxAggregateOutputType | null
  }

  type GetScheduleDraftGroupByPayload<T extends ScheduleDraftGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleDraftGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleDraftGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleDraftGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleDraftGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleDraftSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    description?: boolean
    version?: boolean
    status?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    basedOnTemplateId?: boolean
    basedOnDraftId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    approvedBy?: boolean
    approvedAt?: boolean
    activatedAt?: boolean
    archivedAt?: boolean
    metadata?: boolean
    notes?: boolean
    items?: boolean | ScheduleDraft$itemsArgs<ExtArgs>
    scheduleTemplate?: boolean | ScheduleDraft$scheduleTemplateArgs<ExtArgs>
    parentDraft?: boolean | ScheduleDraft$parentDraftArgs<ExtArgs>
    versionDrafts?: boolean | ScheduleDraft$versionDraftsArgs<ExtArgs>
    _count?: boolean | ScheduleDraftCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleDraft"]>


  export type ScheduleDraftSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    description?: boolean
    version?: boolean
    status?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    basedOnTemplateId?: boolean
    basedOnDraftId?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    approvedBy?: boolean
    approvedAt?: boolean
    activatedAt?: boolean
    archivedAt?: boolean
    metadata?: boolean
    notes?: boolean
  }

  export type ScheduleDraftInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ScheduleDraft$itemsArgs<ExtArgs>
    scheduleTemplate?: boolean | ScheduleDraft$scheduleTemplateArgs<ExtArgs>
    parentDraft?: boolean | ScheduleDraft$parentDraftArgs<ExtArgs>
    versionDrafts?: boolean | ScheduleDraft$versionDraftsArgs<ExtArgs>
    _count?: boolean | ScheduleDraftCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ScheduleDraftPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduleDraft"
    objects: {
      items: Prisma.$ScheduleDraftItemPayload<ExtArgs>[]
      scheduleTemplate: Prisma.$ScheduleTemplatePayload<ExtArgs> | null
      parentDraft: Prisma.$ScheduleDraftPayload<ExtArgs> | null
      versionDrafts: Prisma.$ScheduleDraftPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyId: number
      name: string
      description: string | null
      version: string
      status: string
      periodStart: Date
      periodEnd: Date
      basedOnTemplateId: number | null
      basedOnDraftId: number | null
      createdBy: number
      createdAt: Date
      updatedAt: Date
      approvedBy: number | null
      approvedAt: Date | null
      activatedAt: Date | null
      archivedAt: Date | null
      metadata: Prisma.JsonValue | null
      notes: string | null
    }, ExtArgs["result"]["scheduleDraft"]>
    composites: {}
  }

  type ScheduleDraftGetPayload<S extends boolean | null | undefined | ScheduleDraftDefaultArgs> = $Result.GetResult<Prisma.$ScheduleDraftPayload, S>

  type ScheduleDraftCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleDraftFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleDraftCountAggregateInputType | true
    }

  export interface ScheduleDraftDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduleDraft'], meta: { name: 'ScheduleDraft' } }
    /**
     * Find zero or one ScheduleDraft that matches the filter.
     * @param {ScheduleDraftFindUniqueArgs} args - Arguments to find a ScheduleDraft
     * @example
     * // Get one ScheduleDraft
     * const scheduleDraft = await prisma.scheduleDraft.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleDraftFindUniqueArgs>(args: SelectSubset<T, ScheduleDraftFindUniqueArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScheduleDraft that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleDraftFindUniqueOrThrowArgs} args - Arguments to find a ScheduleDraft
     * @example
     * // Get one ScheduleDraft
     * const scheduleDraft = await prisma.scheduleDraft.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleDraftFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleDraftFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScheduleDraft that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftFindFirstArgs} args - Arguments to find a ScheduleDraft
     * @example
     * // Get one ScheduleDraft
     * const scheduleDraft = await prisma.scheduleDraft.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleDraftFindFirstArgs>(args?: SelectSubset<T, ScheduleDraftFindFirstArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScheduleDraft that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftFindFirstOrThrowArgs} args - Arguments to find a ScheduleDraft
     * @example
     * // Get one ScheduleDraft
     * const scheduleDraft = await prisma.scheduleDraft.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleDraftFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleDraftFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScheduleDrafts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduleDrafts
     * const scheduleDrafts = await prisma.scheduleDraft.findMany()
     * 
     * // Get first 10 ScheduleDrafts
     * const scheduleDrafts = await prisma.scheduleDraft.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleDraftWithIdOnly = await prisma.scheduleDraft.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleDraftFindManyArgs>(args?: SelectSubset<T, ScheduleDraftFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScheduleDraft.
     * @param {ScheduleDraftCreateArgs} args - Arguments to create a ScheduleDraft.
     * @example
     * // Create one ScheduleDraft
     * const ScheduleDraft = await prisma.scheduleDraft.create({
     *   data: {
     *     // ... data to create a ScheduleDraft
     *   }
     * })
     * 
     */
    create<T extends ScheduleDraftCreateArgs>(args: SelectSubset<T, ScheduleDraftCreateArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScheduleDrafts.
     * @param {ScheduleDraftCreateManyArgs} args - Arguments to create many ScheduleDrafts.
     * @example
     * // Create many ScheduleDrafts
     * const scheduleDraft = await prisma.scheduleDraft.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleDraftCreateManyArgs>(args?: SelectSubset<T, ScheduleDraftCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ScheduleDraft.
     * @param {ScheduleDraftDeleteArgs} args - Arguments to delete one ScheduleDraft.
     * @example
     * // Delete one ScheduleDraft
     * const ScheduleDraft = await prisma.scheduleDraft.delete({
     *   where: {
     *     // ... filter to delete one ScheduleDraft
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDraftDeleteArgs>(args: SelectSubset<T, ScheduleDraftDeleteArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScheduleDraft.
     * @param {ScheduleDraftUpdateArgs} args - Arguments to update one ScheduleDraft.
     * @example
     * // Update one ScheduleDraft
     * const scheduleDraft = await prisma.scheduleDraft.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleDraftUpdateArgs>(args: SelectSubset<T, ScheduleDraftUpdateArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScheduleDrafts.
     * @param {ScheduleDraftDeleteManyArgs} args - Arguments to filter ScheduleDrafts to delete.
     * @example
     * // Delete a few ScheduleDrafts
     * const { count } = await prisma.scheduleDraft.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDraftDeleteManyArgs>(args?: SelectSubset<T, ScheduleDraftDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduleDrafts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduleDrafts
     * const scheduleDraft = await prisma.scheduleDraft.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleDraftUpdateManyArgs>(args: SelectSubset<T, ScheduleDraftUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScheduleDraft.
     * @param {ScheduleDraftUpsertArgs} args - Arguments to update or create a ScheduleDraft.
     * @example
     * // Update or create a ScheduleDraft
     * const scheduleDraft = await prisma.scheduleDraft.upsert({
     *   create: {
     *     // ... data to create a ScheduleDraft
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduleDraft we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleDraftUpsertArgs>(args: SelectSubset<T, ScheduleDraftUpsertArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScheduleDrafts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftCountArgs} args - Arguments to filter ScheduleDrafts to count.
     * @example
     * // Count the number of ScheduleDrafts
     * const count = await prisma.scheduleDraft.count({
     *   where: {
     *     // ... the filter for the ScheduleDrafts we want to count
     *   }
     * })
    **/
    count<T extends ScheduleDraftCountArgs>(
      args?: Subset<T, ScheduleDraftCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleDraftCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduleDraft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleDraftAggregateArgs>(args: Subset<T, ScheduleDraftAggregateArgs>): Prisma.PrismaPromise<GetScheduleDraftAggregateType<T>>

    /**
     * Group by ScheduleDraft.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleDraftGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleDraftGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleDraftGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleDraftGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleDraftGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduleDraft model
   */
  readonly fields: ScheduleDraftFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduleDraft.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleDraftClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends ScheduleDraft$itemsArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleDraft$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "findMany"> | Null>
    scheduleTemplate<T extends ScheduleDraft$scheduleTemplateArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleDraft$scheduleTemplateArgs<ExtArgs>>): Prisma__ScheduleTemplateClient<$Result.GetResult<Prisma.$ScheduleTemplatePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    parentDraft<T extends ScheduleDraft$parentDraftArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleDraft$parentDraftArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    versionDrafts<T extends ScheduleDraft$versionDraftsArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleDraft$versionDraftsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduleDraft model
   */ 
  interface ScheduleDraftFieldRefs {
    readonly id: FieldRef<"ScheduleDraft", 'Int'>
    readonly companyId: FieldRef<"ScheduleDraft", 'Int'>
    readonly name: FieldRef<"ScheduleDraft", 'String'>
    readonly description: FieldRef<"ScheduleDraft", 'String'>
    readonly version: FieldRef<"ScheduleDraft", 'String'>
    readonly status: FieldRef<"ScheduleDraft", 'String'>
    readonly periodStart: FieldRef<"ScheduleDraft", 'DateTime'>
    readonly periodEnd: FieldRef<"ScheduleDraft", 'DateTime'>
    readonly basedOnTemplateId: FieldRef<"ScheduleDraft", 'Int'>
    readonly basedOnDraftId: FieldRef<"ScheduleDraft", 'Int'>
    readonly createdBy: FieldRef<"ScheduleDraft", 'Int'>
    readonly createdAt: FieldRef<"ScheduleDraft", 'DateTime'>
    readonly updatedAt: FieldRef<"ScheduleDraft", 'DateTime'>
    readonly approvedBy: FieldRef<"ScheduleDraft", 'Int'>
    readonly approvedAt: FieldRef<"ScheduleDraft", 'DateTime'>
    readonly activatedAt: FieldRef<"ScheduleDraft", 'DateTime'>
    readonly archivedAt: FieldRef<"ScheduleDraft", 'DateTime'>
    readonly metadata: FieldRef<"ScheduleDraft", 'Json'>
    readonly notes: FieldRef<"ScheduleDraft", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ScheduleDraft findUnique
   */
  export type ScheduleDraftFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDraft to fetch.
     */
    where: ScheduleDraftWhereUniqueInput
  }

  /**
   * ScheduleDraft findUniqueOrThrow
   */
  export type ScheduleDraftFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDraft to fetch.
     */
    where: ScheduleDraftWhereUniqueInput
  }

  /**
   * ScheduleDraft findFirst
   */
  export type ScheduleDraftFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDraft to fetch.
     */
    where?: ScheduleDraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleDrafts to fetch.
     */
    orderBy?: ScheduleDraftOrderByWithRelationInput | ScheduleDraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleDrafts.
     */
    cursor?: ScheduleDraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleDrafts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleDrafts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleDrafts.
     */
    distinct?: ScheduleDraftScalarFieldEnum | ScheduleDraftScalarFieldEnum[]
  }

  /**
   * ScheduleDraft findFirstOrThrow
   */
  export type ScheduleDraftFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDraft to fetch.
     */
    where?: ScheduleDraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleDrafts to fetch.
     */
    orderBy?: ScheduleDraftOrderByWithRelationInput | ScheduleDraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleDrafts.
     */
    cursor?: ScheduleDraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleDrafts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleDrafts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleDrafts.
     */
    distinct?: ScheduleDraftScalarFieldEnum | ScheduleDraftScalarFieldEnum[]
  }

  /**
   * ScheduleDraft findMany
   */
  export type ScheduleDraftFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDrafts to fetch.
     */
    where?: ScheduleDraftWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleDrafts to fetch.
     */
    orderBy?: ScheduleDraftOrderByWithRelationInput | ScheduleDraftOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduleDrafts.
     */
    cursor?: ScheduleDraftWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleDrafts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleDrafts.
     */
    skip?: number
    distinct?: ScheduleDraftScalarFieldEnum | ScheduleDraftScalarFieldEnum[]
  }

  /**
   * ScheduleDraft create
   */
  export type ScheduleDraftCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    /**
     * The data needed to create a ScheduleDraft.
     */
    data: XOR<ScheduleDraftCreateInput, ScheduleDraftUncheckedCreateInput>
  }

  /**
   * ScheduleDraft createMany
   */
  export type ScheduleDraftCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduleDrafts.
     */
    data: ScheduleDraftCreateManyInput | ScheduleDraftCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduleDraft update
   */
  export type ScheduleDraftUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    /**
     * The data needed to update a ScheduleDraft.
     */
    data: XOR<ScheduleDraftUpdateInput, ScheduleDraftUncheckedUpdateInput>
    /**
     * Choose, which ScheduleDraft to update.
     */
    where: ScheduleDraftWhereUniqueInput
  }

  /**
   * ScheduleDraft updateMany
   */
  export type ScheduleDraftUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduleDrafts.
     */
    data: XOR<ScheduleDraftUpdateManyMutationInput, ScheduleDraftUncheckedUpdateManyInput>
    /**
     * Filter which ScheduleDrafts to update
     */
    where?: ScheduleDraftWhereInput
  }

  /**
   * ScheduleDraft upsert
   */
  export type ScheduleDraftUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    /**
     * The filter to search for the ScheduleDraft to update in case it exists.
     */
    where: ScheduleDraftWhereUniqueInput
    /**
     * In case the ScheduleDraft found by the `where` argument doesn't exist, create a new ScheduleDraft with this data.
     */
    create: XOR<ScheduleDraftCreateInput, ScheduleDraftUncheckedCreateInput>
    /**
     * In case the ScheduleDraft was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleDraftUpdateInput, ScheduleDraftUncheckedUpdateInput>
  }

  /**
   * ScheduleDraft delete
   */
  export type ScheduleDraftDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    /**
     * Filter which ScheduleDraft to delete.
     */
    where: ScheduleDraftWhereUniqueInput
  }

  /**
   * ScheduleDraft deleteMany
   */
  export type ScheduleDraftDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleDrafts to delete
     */
    where?: ScheduleDraftWhereInput
  }

  /**
   * ScheduleDraft.items
   */
  export type ScheduleDraft$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    where?: ScheduleDraftItemWhereInput
    orderBy?: ScheduleDraftItemOrderByWithRelationInput | ScheduleDraftItemOrderByWithRelationInput[]
    cursor?: ScheduleDraftItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleDraftItemScalarFieldEnum | ScheduleDraftItemScalarFieldEnum[]
  }

  /**
   * ScheduleDraft.scheduleTemplate
   */
  export type ScheduleDraft$scheduleTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleTemplate
     */
    select?: ScheduleTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleTemplateInclude<ExtArgs> | null
    where?: ScheduleTemplateWhereInput
  }

  /**
   * ScheduleDraft.parentDraft
   */
  export type ScheduleDraft$parentDraftArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    where?: ScheduleDraftWhereInput
  }

  /**
   * ScheduleDraft.versionDrafts
   */
  export type ScheduleDraft$versionDraftsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
    where?: ScheduleDraftWhereInput
    orderBy?: ScheduleDraftOrderByWithRelationInput | ScheduleDraftOrderByWithRelationInput[]
    cursor?: ScheduleDraftWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleDraftScalarFieldEnum | ScheduleDraftScalarFieldEnum[]
  }

  /**
   * ScheduleDraft without action
   */
  export type ScheduleDraftDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraft
     */
    select?: ScheduleDraftSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftInclude<ExtArgs> | null
  }


  /**
   * Model ScheduleDraftItem
   */

  export type AggregateScheduleDraftItem = {
    _count: ScheduleDraftItemCountAggregateOutputType | null
    _avg: ScheduleDraftItemAvgAggregateOutputType | null
    _sum: ScheduleDraftItemSumAggregateOutputType | null
    _min: ScheduleDraftItemMinAggregateOutputType | null
    _max: ScheduleDraftItemMaxAggregateOutputType | null
  }

  export type ScheduleDraftItemAvgAggregateOutputType = {
    id: number | null
    draftId: number | null
    employeeId: number | null
    shiftPatternId: number | null
  }

  export type ScheduleDraftItemSumAggregateOutputType = {
    id: number | null
    draftId: number | null
    employeeId: number | null
    shiftPatternId: number | null
  }

  export type ScheduleDraftItemMinAggregateOutputType = {
    id: number | null
    draftId: number | null
    employeeId: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    shiftType: string | null
    shiftPatternId: number | null
    notes: string | null
    status: string | null
    priority: string | null
    breakTime: string | null
    estimatedWorkload: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleDraftItemMaxAggregateOutputType = {
    id: number | null
    draftId: number | null
    employeeId: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    shiftType: string | null
    shiftPatternId: number | null
    notes: string | null
    status: string | null
    priority: string | null
    breakTime: string | null
    estimatedWorkload: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleDraftItemCountAggregateOutputType = {
    id: number
    draftId: number
    employeeId: number
    date: number
    startTime: number
    endTime: number
    shiftType: number
    shiftPatternId: number
    notes: number
    status: number
    priority: number
    breakTime: number
    estimatedWorkload: number
    requirements: number
    constraints: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduleDraftItemAvgAggregateInputType = {
    id?: true
    draftId?: true
    employeeId?: true
    shiftPatternId?: true
  }

  export type ScheduleDraftItemSumAggregateInputType = {
    id?: true
    draftId?: true
    employeeId?: true
    shiftPatternId?: true
  }

  export type ScheduleDraftItemMinAggregateInputType = {
    id?: true
    draftId?: true
    employeeId?: true
    date?: true
    startTime?: true
    endTime?: true
    shiftType?: true
    shiftPatternId?: true
    notes?: true
    status?: true
    priority?: true
    breakTime?: true
    estimatedWorkload?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleDraftItemMaxAggregateInputType = {
    id?: true
    draftId?: true
    employeeId?: true
    date?: true
    startTime?: true
    endTime?: true
    shiftType?: true
    shiftPatternId?: true
    notes?: true
    status?: true
    priority?: true
    breakTime?: true
    estimatedWorkload?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleDraftItemCountAggregateInputType = {
    id?: true
    draftId?: true
    employeeId?: true
    date?: true
    startTime?: true
    endTime?: true
    shiftType?: true
    shiftPatternId?: true
    notes?: true
    status?: true
    priority?: true
    breakTime?: true
    estimatedWorkload?: true
    requirements?: true
    constraints?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduleDraftItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleDraftItem to aggregate.
     */
    where?: ScheduleDraftItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleDraftItems to fetch.
     */
    orderBy?: ScheduleDraftItemOrderByWithRelationInput | ScheduleDraftItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleDraftItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleDraftItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleDraftItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScheduleDraftItems
    **/
    _count?: true | ScheduleDraftItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleDraftItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleDraftItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleDraftItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleDraftItemMaxAggregateInputType
  }

  export type GetScheduleDraftItemAggregateType<T extends ScheduleDraftItemAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduleDraftItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduleDraftItem[P]>
      : GetScalarType<T[P], AggregateScheduleDraftItem[P]>
  }




  export type ScheduleDraftItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleDraftItemWhereInput
    orderBy?: ScheduleDraftItemOrderByWithAggregationInput | ScheduleDraftItemOrderByWithAggregationInput[]
    by: ScheduleDraftItemScalarFieldEnum[] | ScheduleDraftItemScalarFieldEnum
    having?: ScheduleDraftItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleDraftItemCountAggregateInputType | true
    _avg?: ScheduleDraftItemAvgAggregateInputType
    _sum?: ScheduleDraftItemSumAggregateInputType
    _min?: ScheduleDraftItemMinAggregateInputType
    _max?: ScheduleDraftItemMaxAggregateInputType
  }

  export type ScheduleDraftItemGroupByOutputType = {
    id: number
    draftId: number
    employeeId: number
    date: Date
    startTime: string
    endTime: string
    shiftType: string
    shiftPatternId: number | null
    notes: string | null
    status: string
    priority: string
    breakTime: string | null
    estimatedWorkload: string | null
    requirements: JsonValue | null
    constraints: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ScheduleDraftItemCountAggregateOutputType | null
    _avg: ScheduleDraftItemAvgAggregateOutputType | null
    _sum: ScheduleDraftItemSumAggregateOutputType | null
    _min: ScheduleDraftItemMinAggregateOutputType | null
    _max: ScheduleDraftItemMaxAggregateOutputType | null
  }

  type GetScheduleDraftItemGroupByPayload<T extends ScheduleDraftItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleDraftItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleDraftItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleDraftItemGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleDraftItemGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleDraftItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    draftId?: boolean
    employeeId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    shiftType?: boolean
    shiftPatternId?: boolean
    notes?: boolean
    status?: boolean
    priority?: boolean
    breakTime?: boolean
    estimatedWorkload?: boolean
    requirements?: boolean
    constraints?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    draft?: boolean | ScheduleDraftDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    shiftPattern?: boolean | ScheduleDraftItem$shiftPatternArgs<ExtArgs>
  }, ExtArgs["result"]["scheduleDraftItem"]>


  export type ScheduleDraftItemSelectScalar = {
    id?: boolean
    draftId?: boolean
    employeeId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    shiftType?: boolean
    shiftPatternId?: boolean
    notes?: boolean
    status?: boolean
    priority?: boolean
    breakTime?: boolean
    estimatedWorkload?: boolean
    requirements?: boolean
    constraints?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduleDraftItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    draft?: boolean | ScheduleDraftDefaultArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    shiftPattern?: boolean | ScheduleDraftItem$shiftPatternArgs<ExtArgs>
  }

  export type $ScheduleDraftItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScheduleDraftItem"
    objects: {
      draft: Prisma.$ScheduleDraftPayload<ExtArgs>
      employee: Prisma.$EmployeePayload<ExtArgs>
      shiftPattern: Prisma.$ShiftPatternPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      draftId: number
      employeeId: number
      date: Date
      startTime: string
      endTime: string
      shiftType: string
      shiftPatternId: number | null
      notes: string | null
      status: string
      priority: string
      breakTime: string | null
      estimatedWorkload: string | null
      requirements: Prisma.JsonValue | null
      constraints: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scheduleDraftItem"]>
    composites: {}
  }

  type ScheduleDraftItemGetPayload<S extends boolean | null | undefined | ScheduleDraftItemDefaultArgs> = $Result.GetResult<Prisma.$ScheduleDraftItemPayload, S>

  type ScheduleDraftItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleDraftItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleDraftItemCountAggregateInputType | true
    }

  export interface ScheduleDraftItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScheduleDraftItem'], meta: { name: 'ScheduleDraftItem' } }
    /**
     * Find zero or one ScheduleDraftItem that matches the filter.
     * @param {ScheduleDraftItemFindUniqueArgs} args - Arguments to find a ScheduleDraftItem
     * @example
     * // Get one ScheduleDraftItem
     * const scheduleDraftItem = await prisma.scheduleDraftItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleDraftItemFindUniqueArgs>(args: SelectSubset<T, ScheduleDraftItemFindUniqueArgs<ExtArgs>>): Prisma__ScheduleDraftItemClient<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScheduleDraftItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleDraftItemFindUniqueOrThrowArgs} args - Arguments to find a ScheduleDraftItem
     * @example
     * // Get one ScheduleDraftItem
     * const scheduleDraftItem = await prisma.scheduleDraftItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleDraftItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleDraftItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleDraftItemClient<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScheduleDraftItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftItemFindFirstArgs} args - Arguments to find a ScheduleDraftItem
     * @example
     * // Get one ScheduleDraftItem
     * const scheduleDraftItem = await prisma.scheduleDraftItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleDraftItemFindFirstArgs>(args?: SelectSubset<T, ScheduleDraftItemFindFirstArgs<ExtArgs>>): Prisma__ScheduleDraftItemClient<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScheduleDraftItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftItemFindFirstOrThrowArgs} args - Arguments to find a ScheduleDraftItem
     * @example
     * // Get one ScheduleDraftItem
     * const scheduleDraftItem = await prisma.scheduleDraftItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleDraftItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleDraftItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleDraftItemClient<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScheduleDraftItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScheduleDraftItems
     * const scheduleDraftItems = await prisma.scheduleDraftItem.findMany()
     * 
     * // Get first 10 ScheduleDraftItems
     * const scheduleDraftItems = await prisma.scheduleDraftItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleDraftItemWithIdOnly = await prisma.scheduleDraftItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleDraftItemFindManyArgs>(args?: SelectSubset<T, ScheduleDraftItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScheduleDraftItem.
     * @param {ScheduleDraftItemCreateArgs} args - Arguments to create a ScheduleDraftItem.
     * @example
     * // Create one ScheduleDraftItem
     * const ScheduleDraftItem = await prisma.scheduleDraftItem.create({
     *   data: {
     *     // ... data to create a ScheduleDraftItem
     *   }
     * })
     * 
     */
    create<T extends ScheduleDraftItemCreateArgs>(args: SelectSubset<T, ScheduleDraftItemCreateArgs<ExtArgs>>): Prisma__ScheduleDraftItemClient<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScheduleDraftItems.
     * @param {ScheduleDraftItemCreateManyArgs} args - Arguments to create many ScheduleDraftItems.
     * @example
     * // Create many ScheduleDraftItems
     * const scheduleDraftItem = await prisma.scheduleDraftItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleDraftItemCreateManyArgs>(args?: SelectSubset<T, ScheduleDraftItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ScheduleDraftItem.
     * @param {ScheduleDraftItemDeleteArgs} args - Arguments to delete one ScheduleDraftItem.
     * @example
     * // Delete one ScheduleDraftItem
     * const ScheduleDraftItem = await prisma.scheduleDraftItem.delete({
     *   where: {
     *     // ... filter to delete one ScheduleDraftItem
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDraftItemDeleteArgs>(args: SelectSubset<T, ScheduleDraftItemDeleteArgs<ExtArgs>>): Prisma__ScheduleDraftItemClient<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScheduleDraftItem.
     * @param {ScheduleDraftItemUpdateArgs} args - Arguments to update one ScheduleDraftItem.
     * @example
     * // Update one ScheduleDraftItem
     * const scheduleDraftItem = await prisma.scheduleDraftItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleDraftItemUpdateArgs>(args: SelectSubset<T, ScheduleDraftItemUpdateArgs<ExtArgs>>): Prisma__ScheduleDraftItemClient<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScheduleDraftItems.
     * @param {ScheduleDraftItemDeleteManyArgs} args - Arguments to filter ScheduleDraftItems to delete.
     * @example
     * // Delete a few ScheduleDraftItems
     * const { count } = await prisma.scheduleDraftItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDraftItemDeleteManyArgs>(args?: SelectSubset<T, ScheduleDraftItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScheduleDraftItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScheduleDraftItems
     * const scheduleDraftItem = await prisma.scheduleDraftItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleDraftItemUpdateManyArgs>(args: SelectSubset<T, ScheduleDraftItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScheduleDraftItem.
     * @param {ScheduleDraftItemUpsertArgs} args - Arguments to update or create a ScheduleDraftItem.
     * @example
     * // Update or create a ScheduleDraftItem
     * const scheduleDraftItem = await prisma.scheduleDraftItem.upsert({
     *   create: {
     *     // ... data to create a ScheduleDraftItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScheduleDraftItem we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleDraftItemUpsertArgs>(args: SelectSubset<T, ScheduleDraftItemUpsertArgs<ExtArgs>>): Prisma__ScheduleDraftItemClient<$Result.GetResult<Prisma.$ScheduleDraftItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScheduleDraftItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftItemCountArgs} args - Arguments to filter ScheduleDraftItems to count.
     * @example
     * // Count the number of ScheduleDraftItems
     * const count = await prisma.scheduleDraftItem.count({
     *   where: {
     *     // ... the filter for the ScheduleDraftItems we want to count
     *   }
     * })
    **/
    count<T extends ScheduleDraftItemCountArgs>(
      args?: Subset<T, ScheduleDraftItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleDraftItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScheduleDraftItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleDraftItemAggregateArgs>(args: Subset<T, ScheduleDraftItemAggregateArgs>): Prisma.PrismaPromise<GetScheduleDraftItemAggregateType<T>>

    /**
     * Group by ScheduleDraftItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleDraftItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleDraftItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleDraftItemGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleDraftItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleDraftItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleDraftItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScheduleDraftItem model
   */
  readonly fields: ScheduleDraftItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScheduleDraftItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleDraftItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    draft<T extends ScheduleDraftDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleDraftDefaultArgs<ExtArgs>>): Prisma__ScheduleDraftClient<$Result.GetResult<Prisma.$ScheduleDraftPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    shiftPattern<T extends ScheduleDraftItem$shiftPatternArgs<ExtArgs> = {}>(args?: Subset<T, ScheduleDraftItem$shiftPatternArgs<ExtArgs>>): Prisma__ShiftPatternClient<$Result.GetResult<Prisma.$ShiftPatternPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScheduleDraftItem model
   */ 
  interface ScheduleDraftItemFieldRefs {
    readonly id: FieldRef<"ScheduleDraftItem", 'Int'>
    readonly draftId: FieldRef<"ScheduleDraftItem", 'Int'>
    readonly employeeId: FieldRef<"ScheduleDraftItem", 'Int'>
    readonly date: FieldRef<"ScheduleDraftItem", 'DateTime'>
    readonly startTime: FieldRef<"ScheduleDraftItem", 'String'>
    readonly endTime: FieldRef<"ScheduleDraftItem", 'String'>
    readonly shiftType: FieldRef<"ScheduleDraftItem", 'String'>
    readonly shiftPatternId: FieldRef<"ScheduleDraftItem", 'Int'>
    readonly notes: FieldRef<"ScheduleDraftItem", 'String'>
    readonly status: FieldRef<"ScheduleDraftItem", 'String'>
    readonly priority: FieldRef<"ScheduleDraftItem", 'String'>
    readonly breakTime: FieldRef<"ScheduleDraftItem", 'String'>
    readonly estimatedWorkload: FieldRef<"ScheduleDraftItem", 'String'>
    readonly requirements: FieldRef<"ScheduleDraftItem", 'Json'>
    readonly constraints: FieldRef<"ScheduleDraftItem", 'Json'>
    readonly createdAt: FieldRef<"ScheduleDraftItem", 'DateTime'>
    readonly updatedAt: FieldRef<"ScheduleDraftItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScheduleDraftItem findUnique
   */
  export type ScheduleDraftItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDraftItem to fetch.
     */
    where: ScheduleDraftItemWhereUniqueInput
  }

  /**
   * ScheduleDraftItem findUniqueOrThrow
   */
  export type ScheduleDraftItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDraftItem to fetch.
     */
    where: ScheduleDraftItemWhereUniqueInput
  }

  /**
   * ScheduleDraftItem findFirst
   */
  export type ScheduleDraftItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDraftItem to fetch.
     */
    where?: ScheduleDraftItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleDraftItems to fetch.
     */
    orderBy?: ScheduleDraftItemOrderByWithRelationInput | ScheduleDraftItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleDraftItems.
     */
    cursor?: ScheduleDraftItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleDraftItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleDraftItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleDraftItems.
     */
    distinct?: ScheduleDraftItemScalarFieldEnum | ScheduleDraftItemScalarFieldEnum[]
  }

  /**
   * ScheduleDraftItem findFirstOrThrow
   */
  export type ScheduleDraftItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDraftItem to fetch.
     */
    where?: ScheduleDraftItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleDraftItems to fetch.
     */
    orderBy?: ScheduleDraftItemOrderByWithRelationInput | ScheduleDraftItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScheduleDraftItems.
     */
    cursor?: ScheduleDraftItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleDraftItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleDraftItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScheduleDraftItems.
     */
    distinct?: ScheduleDraftItemScalarFieldEnum | ScheduleDraftItemScalarFieldEnum[]
  }

  /**
   * ScheduleDraftItem findMany
   */
  export type ScheduleDraftItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    /**
     * Filter, which ScheduleDraftItems to fetch.
     */
    where?: ScheduleDraftItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScheduleDraftItems to fetch.
     */
    orderBy?: ScheduleDraftItemOrderByWithRelationInput | ScheduleDraftItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScheduleDraftItems.
     */
    cursor?: ScheduleDraftItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScheduleDraftItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScheduleDraftItems.
     */
    skip?: number
    distinct?: ScheduleDraftItemScalarFieldEnum | ScheduleDraftItemScalarFieldEnum[]
  }

  /**
   * ScheduleDraftItem create
   */
  export type ScheduleDraftItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ScheduleDraftItem.
     */
    data: XOR<ScheduleDraftItemCreateInput, ScheduleDraftItemUncheckedCreateInput>
  }

  /**
   * ScheduleDraftItem createMany
   */
  export type ScheduleDraftItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScheduleDraftItems.
     */
    data: ScheduleDraftItemCreateManyInput | ScheduleDraftItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScheduleDraftItem update
   */
  export type ScheduleDraftItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ScheduleDraftItem.
     */
    data: XOR<ScheduleDraftItemUpdateInput, ScheduleDraftItemUncheckedUpdateInput>
    /**
     * Choose, which ScheduleDraftItem to update.
     */
    where: ScheduleDraftItemWhereUniqueInput
  }

  /**
   * ScheduleDraftItem updateMany
   */
  export type ScheduleDraftItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScheduleDraftItems.
     */
    data: XOR<ScheduleDraftItemUpdateManyMutationInput, ScheduleDraftItemUncheckedUpdateManyInput>
    /**
     * Filter which ScheduleDraftItems to update
     */
    where?: ScheduleDraftItemWhereInput
  }

  /**
   * ScheduleDraftItem upsert
   */
  export type ScheduleDraftItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ScheduleDraftItem to update in case it exists.
     */
    where: ScheduleDraftItemWhereUniqueInput
    /**
     * In case the ScheduleDraftItem found by the `where` argument doesn't exist, create a new ScheduleDraftItem with this data.
     */
    create: XOR<ScheduleDraftItemCreateInput, ScheduleDraftItemUncheckedCreateInput>
    /**
     * In case the ScheduleDraftItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleDraftItemUpdateInput, ScheduleDraftItemUncheckedUpdateInput>
  }

  /**
   * ScheduleDraftItem delete
   */
  export type ScheduleDraftItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
    /**
     * Filter which ScheduleDraftItem to delete.
     */
    where: ScheduleDraftItemWhereUniqueInput
  }

  /**
   * ScheduleDraftItem deleteMany
   */
  export type ScheduleDraftItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScheduleDraftItems to delete
     */
    where?: ScheduleDraftItemWhereInput
  }

  /**
   * ScheduleDraftItem.shiftPattern
   */
  export type ScheduleDraftItem$shiftPatternArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShiftPattern
     */
    select?: ShiftPatternSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShiftPatternInclude<ExtArgs> | null
    where?: ShiftPatternWhereInput
  }

  /**
   * ScheduleDraftItem without action
   */
  export type ScheduleDraftItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleDraftItem
     */
    select?: ScheduleDraftItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleDraftItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    companyName: 'companyName',
    industry: 'industry',
    companySize: 'companySize',
    address: 'address',
    phone: 'phone',
    createdAt: 'createdAt',
    defaultEndTime: 'defaultEndTime',
    defaultStartTime: 'defaultStartTime',
    minStaffRequired: 'minStaffRequired',
    showLeaveInSchedule: 'showLeaveInSchedule',
    updatedAt: 'updatedAt',
    workDays: 'workDays',
    workType: 'workType',
    allowEmployeeSelfScheduling: 'allowEmployeeSelfScheduling',
    autoSchedulingEnabled: 'autoSchedulingEnabled',
    complianceRequirements: 'complianceRequirements',
    holidaySchedule: 'holidaySchedule',
    maxAdvanceScheduleDays: 'maxAdvanceScheduleDays',
    minimumStaffCoverage: 'minimumStaffCoverage',
    operatingHours: 'operatingHours',
    overtimePolicy: 'overtimePolicy',
    peakHours: 'peakHours',
    scheduleNotificationDays: 'scheduleNotificationDays',
    timezone: 'timezone',
    unionRules: 'unionRules'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    email: 'email',
    department: 'department',
    position: 'position',
    phone: 'phone',
    address: 'address',
    hireDate: 'hireDate',
    yearsOfExperience: 'yearsOfExperience',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    employeeType: 'employeeType',
    isActive: 'isActive',
    maxConsecutiveDays: 'maxConsecutiveDays',
    maxDailyHours: 'maxDailyHours',
    minDailyHours: 'minDailyHours',
    minRestHours: 'minRestHours',
    seniorityLevel: 'seniorityLevel',
    weeklyHoursTarget: 'weeklyHoursTarget'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const AbilityScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    customerService: 'customerService',
    experience: 'experience',
    flexibility: 'flexibility',
    rank: 'rank',
    teamChemistry: 'teamChemistry',
    totalScore: 'totalScore',
    workSkill: 'workSkill'
  };

  export type AbilityScalarFieldEnum = (typeof AbilityScalarFieldEnum)[keyof typeof AbilityScalarFieldEnum]


  export const PreferenceScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    preferDays: 'preferDays',
    avoidDays: 'avoidDays',
    fixedOffDays: 'fixedOffDays'
  };

  export type PreferenceScalarFieldEnum = (typeof PreferenceScalarFieldEnum)[keyof typeof PreferenceScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    shiftType: 'shiftType',
    notes: 'notes',
    status: 'status',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    breakTime: 'breakTime',
    estimatedWorkload: 'estimatedWorkload',
    generationLogId: 'generationLogId',
    isAutoGenerated: 'isAutoGenerated',
    overtimeApproved: 'overtimeApproved',
    priority: 'priority',
    shiftPatternId: 'shiftPatternId',
    swapRequested: 'swapRequested'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const LeaveScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    startDate: 'startDate',
    endDate: 'endDate',
    type: 'type',
    reason: 'reason',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    adminComment: 'adminComment',
    reviewedAt: 'reviewedAt',
    reviewedBy: 'reviewedBy'
  };

  export type LeaveScalarFieldEnum = (typeof LeaveScalarFieldEnum)[keyof typeof LeaveScalarFieldEnum]


  export const EmployeeNoteScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    type: 'type',
    content: 'content',
    priority: 'priority',
    createdBy: 'createdBy',
    createdAt: 'createdAt'
  };

  export type EmployeeNoteScalarFieldEnum = (typeof EmployeeNoteScalarFieldEnum)[keyof typeof EmployeeNoteScalarFieldEnum]


  export const EmployeeChemistryScalarFieldEnum: {
    id: 'id',
    employee1Id: 'employee1Id',
    employee2Id: 'employee2Id',
    score: 'score'
  };

  export type EmployeeChemistryScalarFieldEnum = (typeof EmployeeChemistryScalarFieldEnum)[keyof typeof EmployeeChemistryScalarFieldEnum]


  export const NoticeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    type: 'type',
    priority: 'priority',
    isPinned: 'isPinned',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    expiresAt: 'expiresAt'
  };

  export type NoticeScalarFieldEnum = (typeof NoticeScalarFieldEnum)[keyof typeof NoticeScalarFieldEnum]


  export const NoticeReadScalarFieldEnum: {
    id: 'id',
    noticeId: 'noticeId',
    userId: 'userId',
    readAt: 'readAt'
  };

  export type NoticeReadScalarFieldEnum = (typeof NoticeReadScalarFieldEnum)[keyof typeof NoticeReadScalarFieldEnum]


  export const ShiftPatternScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    startTime: 'startTime',
    endTime: 'endTime',
    duration: 'duration',
    breakDuration: 'breakDuration',
    shiftType: 'shiftType',
    industryType: 'industryType',
    isTemplate: 'isTemplate',
    color: 'color',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    companyId: 'companyId',
    days: 'days',
    enabled: 'enabled',
    requiredStaff: 'requiredStaff',
    requirements: 'requirements'
  };

  export type ShiftPatternScalarFieldEnum = (typeof ShiftPatternScalarFieldEnum)[keyof typeof ShiftPatternScalarFieldEnum]


  export const ScheduleTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    industryType: 'industryType',
    templateType: 'templateType',
    isActive: 'isActive',
    metadata: 'metadata',
    workDaysPattern: 'workDaysPattern',
    rotationPeriod: 'rotationPeriod',
    minStaffPerShift: 'minStaffPerShift',
    maxStaffPerShift: 'maxStaffPerShift',
    coverageRequirements: 'coverageRequirements',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduleTemplateScalarFieldEnum = (typeof ScheduleTemplateScalarFieldEnum)[keyof typeof ScheduleTemplateScalarFieldEnum]


  export const EmployeeConstraintsScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    unavailableTimeSlots: 'unavailableTimeSlots',
    preferredTimeSlots: 'preferredTimeSlots',
    blackoutDates: 'blackoutDates',
    preferredShiftTypes: 'preferredShiftTypes',
    avoidShiftTypes: 'avoidShiftTypes',
    canWorkWeekends: 'canWorkWeekends',
    canWorkHolidays: 'canWorkHolidays',
    canWorkNightShifts: 'canWorkNightShifts',
    maxShiftsPerWeek: 'maxShiftsPerWeek',
    maxOvertimeHours: 'maxOvertimeHours',
    requiresFixedSchedule: 'requiresFixedSchedule',
    fixedShiftPattern: 'fixedShiftPattern',
    maxTravelTime: 'maxTravelTime',
    workLocation: 'workLocation',
    hasReliableTransport: 'hasReliableTransport',
    needsAccommodation: 'needsAccommodation',
    accommodationDetails: 'accommodationDetails',
    medicalRestrictions: 'medicalRestrictions',
    certificationRequired: 'certificationRequired',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployeeConstraintsScalarFieldEnum = (typeof EmployeeConstraintsScalarFieldEnum)[keyof typeof EmployeeConstraintsScalarFieldEnum]


  export const GenerationLogScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    generatedBy: 'generatedBy',
    generationType: 'generationType',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    totalSchedulesCreated: 'totalSchedulesCreated',
    totalEmployeesAffected: 'totalEmployeesAffected',
    parameters: 'parameters',
    constraints: 'constraints',
    coverageAchieved: 'coverageAchieved',
    employeeSatisfaction: 'employeeSatisfaction',
    constraintViolations: 'constraintViolations',
    warnings: 'warnings',
    errors: 'errors',
    executionTime: 'executionTime',
    algorithmVersion: 'algorithmVersion',
    status: 'status',
    notes: 'notes',
    createdAt: 'createdAt'
  };

  export type GenerationLogScalarFieldEnum = (typeof GenerationLogScalarFieldEnum)[keyof typeof GenerationLogScalarFieldEnum]


  export const EmployeeCertificationScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    certificationName: 'certificationName',
    certificationBody: 'certificationBody',
    issueDate: 'issueDate',
    expiryDate: 'expiryDate',
    certificateNumber: 'certificateNumber',
    isActive: 'isActive',
    verificationStatus: 'verificationStatus',
    attachmentUrl: 'attachmentUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployeeCertificationScalarFieldEnum = (typeof EmployeeCertificationScalarFieldEnum)[keyof typeof EmployeeCertificationScalarFieldEnum]


  export const OperatingHoursTemplateScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    templateName: 'templateName',
    description: 'description',
    isDefault: 'isDefault',
    isActive: 'isActive',
    timezone: 'timezone',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OperatingHoursTemplateScalarFieldEnum = (typeof OperatingHoursTemplateScalarFieldEnum)[keyof typeof OperatingHoursTemplateScalarFieldEnum]


  export const DailyOperatingHoursScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    dayOfWeek: 'dayOfWeek',
    isOpen: 'isOpen',
    openTime: 'openTime',
    closeTime: 'closeTime',
    breakStart: 'breakStart',
    breakEnd: 'breakEnd',
    minStaff: 'minStaff',
    maxStaff: 'maxStaff',
    notes: 'notes'
  };

  export type DailyOperatingHoursScalarFieldEnum = (typeof DailyOperatingHoursScalarFieldEnum)[keyof typeof DailyOperatingHoursScalarFieldEnum]


  export const HourlyStaffingRuleScalarFieldEnum: {
    id: 'id',
    dailyHoursId: 'dailyHoursId',
    hourSlot: 'hourSlot',
    requiredStaff: 'requiredStaff',
    preferredStaff: 'preferredStaff',
    maxStaff: 'maxStaff',
    priority: 'priority',
    skillRequirement: 'skillRequirement',
    notes: 'notes'
  };

  export type HourlyStaffingRuleScalarFieldEnum = (typeof HourlyStaffingRuleScalarFieldEnum)[keyof typeof HourlyStaffingRuleScalarFieldEnum]


  export const StaffingRuleScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    ruleName: 'ruleName',
    ruleType: 'ruleType',
    conditions: 'conditions',
    staffingRequirements: 'staffingRequirements',
    priority: 'priority',
    isActive: 'isActive',
    effectiveFrom: 'effectiveFrom',
    effectiveTo: 'effectiveTo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffingRuleScalarFieldEnum = (typeof StaffingRuleScalarFieldEnum)[keyof typeof StaffingRuleScalarFieldEnum]


  export const ScheduleOverrideScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    overrideDate: 'overrideDate',
    overrideType: 'overrideType',
    customHours: 'customHours',
    staffingOverride: 'staffingOverride',
    reason: 'reason',
    isActive: 'isActive',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduleOverrideScalarFieldEnum = (typeof ScheduleOverrideScalarFieldEnum)[keyof typeof ScheduleOverrideScalarFieldEnum]


  export const StaffingAnalyticsScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    analysisDate: 'analysisDate',
    dayOfWeek: 'dayOfWeek',
    totalScheduledHours: 'totalScheduledHours',
    totalRequiredHours: 'totalRequiredHours',
    coverageRate: 'coverageRate',
    utilizationRate: 'utilizationRate',
    shortfallHours: 'shortfallHours',
    overstaffingHours: 'overstaffingHours',
    averageStaffPerHour: 'averageStaffPerHour',
    peakStaffingHour: 'peakStaffingHour',
    lowStaffingHour: 'lowStaffingHour',
    hourlyBreakdown: 'hourlyBreakdown',
    departmentBreakdown: 'departmentBreakdown',
    skillGaps: 'skillGaps',
    costAnalysis: 'costAnalysis',
    recommendations: 'recommendations',
    createdAt: 'createdAt'
  };

  export type StaffingAnalyticsScalarFieldEnum = (typeof StaffingAnalyticsScalarFieldEnum)[keyof typeof StaffingAnalyticsScalarFieldEnum]


  export const ScheduleDraftScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    description: 'description',
    version: 'version',
    status: 'status',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    basedOnTemplateId: 'basedOnTemplateId',
    basedOnDraftId: 'basedOnDraftId',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    approvedBy: 'approvedBy',
    approvedAt: 'approvedAt',
    activatedAt: 'activatedAt',
    archivedAt: 'archivedAt',
    metadata: 'metadata',
    notes: 'notes'
  };

  export type ScheduleDraftScalarFieldEnum = (typeof ScheduleDraftScalarFieldEnum)[keyof typeof ScheduleDraftScalarFieldEnum]


  export const ScheduleDraftItemScalarFieldEnum: {
    id: 'id',
    draftId: 'draftId',
    employeeId: 'employeeId',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    shiftType: 'shiftType',
    shiftPatternId: 'shiftPatternId',
    notes: 'notes',
    status: 'status',
    priority: 'priority',
    breakTime: 'breakTime',
    estimatedWorkload: 'estimatedWorkload',
    requirements: 'requirements',
    constraints: 'constraints',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduleDraftItemScalarFieldEnum = (typeof ScheduleDraftItemScalarFieldEnum)[keyof typeof ScheduleDraftItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    employee?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    reviewedLeaves?: LeaveListRelationFilter
    readNotices?: NoticeReadListRelationFilter
    createdNotices?: NoticeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    reviewedLeaves?: LeaveOrderByRelationAggregateInput
    readNotices?: NoticeReadOrderByRelationAggregateInput
    createdNotices?: NoticeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    employee?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    reviewedLeaves?: LeaveListRelationFilter
    readNotices?: NoticeReadListRelationFilter
    createdNotices?: NoticeListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: IntFilter<"Company"> | number
    userId?: IntFilter<"Company"> | number
    companyName?: StringFilter<"Company"> | string
    industry?: StringFilter<"Company"> | string
    companySize?: StringFilter<"Company"> | string
    address?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    defaultEndTime?: StringNullableFilter<"Company"> | string | null
    defaultStartTime?: StringNullableFilter<"Company"> | string | null
    minStaffRequired?: IntNullableFilter<"Company"> | number | null
    showLeaveInSchedule?: BoolFilter<"Company"> | boolean
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    workDays?: JsonNullableFilter<"Company">
    workType?: StringFilter<"Company"> | string
    allowEmployeeSelfScheduling?: BoolFilter<"Company"> | boolean
    autoSchedulingEnabled?: BoolFilter<"Company"> | boolean
    complianceRequirements?: JsonNullableFilter<"Company">
    holidaySchedule?: JsonNullableFilter<"Company">
    maxAdvanceScheduleDays?: IntFilter<"Company"> | number
    minimumStaffCoverage?: FloatFilter<"Company"> | number
    operatingHours?: JsonNullableFilter<"Company">
    overtimePolicy?: JsonNullableFilter<"Company">
    peakHours?: JsonNullableFilter<"Company">
    scheduleNotificationDays?: IntFilter<"Company"> | number
    timezone?: StringFilter<"Company"> | string
    unionRules?: JsonNullableFilter<"Company">
    user?: XOR<UserRelationFilter, UserWhereInput>
    shiftPatterns?: ShiftPatternListRelationFilter
    operatingHoursTemplates?: OperatingHoursTemplateListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    defaultEndTime?: SortOrderInput | SortOrder
    defaultStartTime?: SortOrderInput | SortOrder
    minStaffRequired?: SortOrderInput | SortOrder
    showLeaveInSchedule?: SortOrder
    updatedAt?: SortOrder
    workDays?: SortOrderInput | SortOrder
    workType?: SortOrder
    allowEmployeeSelfScheduling?: SortOrder
    autoSchedulingEnabled?: SortOrder
    complianceRequirements?: SortOrderInput | SortOrder
    holidaySchedule?: SortOrderInput | SortOrder
    maxAdvanceScheduleDays?: SortOrder
    minimumStaffCoverage?: SortOrder
    operatingHours?: SortOrderInput | SortOrder
    overtimePolicy?: SortOrderInput | SortOrder
    peakHours?: SortOrderInput | SortOrder
    scheduleNotificationDays?: SortOrder
    timezone?: SortOrder
    unionRules?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    shiftPatterns?: ShiftPatternOrderByRelationAggregateInput
    operatingHoursTemplates?: OperatingHoursTemplateOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    companyName?: StringFilter<"Company"> | string
    industry?: StringFilter<"Company"> | string
    companySize?: StringFilter<"Company"> | string
    address?: StringNullableFilter<"Company"> | string | null
    phone?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    defaultEndTime?: StringNullableFilter<"Company"> | string | null
    defaultStartTime?: StringNullableFilter<"Company"> | string | null
    minStaffRequired?: IntNullableFilter<"Company"> | number | null
    showLeaveInSchedule?: BoolFilter<"Company"> | boolean
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    workDays?: JsonNullableFilter<"Company">
    workType?: StringFilter<"Company"> | string
    allowEmployeeSelfScheduling?: BoolFilter<"Company"> | boolean
    autoSchedulingEnabled?: BoolFilter<"Company"> | boolean
    complianceRequirements?: JsonNullableFilter<"Company">
    holidaySchedule?: JsonNullableFilter<"Company">
    maxAdvanceScheduleDays?: IntFilter<"Company"> | number
    minimumStaffCoverage?: FloatFilter<"Company"> | number
    operatingHours?: JsonNullableFilter<"Company">
    overtimePolicy?: JsonNullableFilter<"Company">
    peakHours?: JsonNullableFilter<"Company">
    scheduleNotificationDays?: IntFilter<"Company"> | number
    timezone?: StringFilter<"Company"> | string
    unionRules?: JsonNullableFilter<"Company">
    user?: XOR<UserRelationFilter, UserWhereInput>
    shiftPatterns?: ShiftPatternListRelationFilter
    operatingHoursTemplates?: OperatingHoursTemplateListRelationFilter
  }, "id" | "userId">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    defaultEndTime?: SortOrderInput | SortOrder
    defaultStartTime?: SortOrderInput | SortOrder
    minStaffRequired?: SortOrderInput | SortOrder
    showLeaveInSchedule?: SortOrder
    updatedAt?: SortOrder
    workDays?: SortOrderInput | SortOrder
    workType?: SortOrder
    allowEmployeeSelfScheduling?: SortOrder
    autoSchedulingEnabled?: SortOrder
    complianceRequirements?: SortOrderInput | SortOrder
    holidaySchedule?: SortOrderInput | SortOrder
    maxAdvanceScheduleDays?: SortOrder
    minimumStaffCoverage?: SortOrder
    operatingHours?: SortOrderInput | SortOrder
    overtimePolicy?: SortOrderInput | SortOrder
    peakHours?: SortOrderInput | SortOrder
    scheduleNotificationDays?: SortOrder
    timezone?: SortOrder
    unionRules?: SortOrderInput | SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Company"> | number
    userId?: IntWithAggregatesFilter<"Company"> | number
    companyName?: StringWithAggregatesFilter<"Company"> | string
    industry?: StringWithAggregatesFilter<"Company"> | string
    companySize?: StringWithAggregatesFilter<"Company"> | string
    address?: StringNullableWithAggregatesFilter<"Company"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Company"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    defaultEndTime?: StringNullableWithAggregatesFilter<"Company"> | string | null
    defaultStartTime?: StringNullableWithAggregatesFilter<"Company"> | string | null
    minStaffRequired?: IntNullableWithAggregatesFilter<"Company"> | number | null
    showLeaveInSchedule?: BoolWithAggregatesFilter<"Company"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    workDays?: JsonNullableWithAggregatesFilter<"Company">
    workType?: StringWithAggregatesFilter<"Company"> | string
    allowEmployeeSelfScheduling?: BoolWithAggregatesFilter<"Company"> | boolean
    autoSchedulingEnabled?: BoolWithAggregatesFilter<"Company"> | boolean
    complianceRequirements?: JsonNullableWithAggregatesFilter<"Company">
    holidaySchedule?: JsonNullableWithAggregatesFilter<"Company">
    maxAdvanceScheduleDays?: IntWithAggregatesFilter<"Company"> | number
    minimumStaffCoverage?: FloatWithAggregatesFilter<"Company"> | number
    operatingHours?: JsonNullableWithAggregatesFilter<"Company">
    overtimePolicy?: JsonNullableWithAggregatesFilter<"Company">
    peakHours?: JsonNullableWithAggregatesFilter<"Company">
    scheduleNotificationDays?: IntWithAggregatesFilter<"Company"> | number
    timezone?: StringWithAggregatesFilter<"Company"> | string
    unionRules?: JsonNullableWithAggregatesFilter<"Company">
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: IntFilter<"Employee"> | number
    userId?: IntFilter<"Employee"> | number
    name?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    department?: StringFilter<"Employee"> | string
    position?: StringFilter<"Employee"> | string
    phone?: StringNullableFilter<"Employee"> | string | null
    address?: StringNullableFilter<"Employee"> | string | null
    hireDate?: DateTimeFilter<"Employee"> | Date | string
    yearsOfExperience?: IntFilter<"Employee"> | number
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    employeeType?: StringFilter<"Employee"> | string
    isActive?: BoolFilter<"Employee"> | boolean
    maxConsecutiveDays?: IntFilter<"Employee"> | number
    maxDailyHours?: IntFilter<"Employee"> | number
    minDailyHours?: IntFilter<"Employee"> | number
    minRestHours?: IntFilter<"Employee"> | number
    seniorityLevel?: StringFilter<"Employee"> | string
    weeklyHoursTarget?: IntFilter<"Employee"> | number
    abilities?: XOR<AbilityNullableRelationFilter, AbilityWhereInput> | null
    certifications?: EmployeeCertificationListRelationFilter
    chemistry1?: EmployeeChemistryListRelationFilter
    chemistry2?: EmployeeChemistryListRelationFilter
    constraints?: XOR<EmployeeConstraintsNullableRelationFilter, EmployeeConstraintsWhereInput> | null
    notes?: EmployeeNoteListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    leaves?: LeaveListRelationFilter
    preferences?: XOR<PreferenceNullableRelationFilter, PreferenceWhereInput> | null
    schedules?: ScheduleListRelationFilter
    draftSchedules?: ScheduleDraftItemListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    department?: SortOrder
    position?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    hireDate?: SortOrder
    yearsOfExperience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeType?: SortOrder
    isActive?: SortOrder
    maxConsecutiveDays?: SortOrder
    maxDailyHours?: SortOrder
    minDailyHours?: SortOrder
    minRestHours?: SortOrder
    seniorityLevel?: SortOrder
    weeklyHoursTarget?: SortOrder
    abilities?: AbilityOrderByWithRelationInput
    certifications?: EmployeeCertificationOrderByRelationAggregateInput
    chemistry1?: EmployeeChemistryOrderByRelationAggregateInput
    chemistry2?: EmployeeChemistryOrderByRelationAggregateInput
    constraints?: EmployeeConstraintsOrderByWithRelationInput
    notes?: EmployeeNoteOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    leaves?: LeaveOrderByRelationAggregateInput
    preferences?: PreferenceOrderByWithRelationInput
    schedules?: ScheduleOrderByRelationAggregateInput
    draftSchedules?: ScheduleDraftItemOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    email?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    name?: StringFilter<"Employee"> | string
    department?: StringFilter<"Employee"> | string
    position?: StringFilter<"Employee"> | string
    phone?: StringNullableFilter<"Employee"> | string | null
    address?: StringNullableFilter<"Employee"> | string | null
    hireDate?: DateTimeFilter<"Employee"> | Date | string
    yearsOfExperience?: IntFilter<"Employee"> | number
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    employeeType?: StringFilter<"Employee"> | string
    isActive?: BoolFilter<"Employee"> | boolean
    maxConsecutiveDays?: IntFilter<"Employee"> | number
    maxDailyHours?: IntFilter<"Employee"> | number
    minDailyHours?: IntFilter<"Employee"> | number
    minRestHours?: IntFilter<"Employee"> | number
    seniorityLevel?: StringFilter<"Employee"> | string
    weeklyHoursTarget?: IntFilter<"Employee"> | number
    abilities?: XOR<AbilityNullableRelationFilter, AbilityWhereInput> | null
    certifications?: EmployeeCertificationListRelationFilter
    chemistry1?: EmployeeChemistryListRelationFilter
    chemistry2?: EmployeeChemistryListRelationFilter
    constraints?: XOR<EmployeeConstraintsNullableRelationFilter, EmployeeConstraintsWhereInput> | null
    notes?: EmployeeNoteListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    leaves?: LeaveListRelationFilter
    preferences?: XOR<PreferenceNullableRelationFilter, PreferenceWhereInput> | null
    schedules?: ScheduleListRelationFilter
    draftSchedules?: ScheduleDraftItemListRelationFilter
  }, "id" | "userId" | "email">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    department?: SortOrder
    position?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    hireDate?: SortOrder
    yearsOfExperience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeType?: SortOrder
    isActive?: SortOrder
    maxConsecutiveDays?: SortOrder
    maxDailyHours?: SortOrder
    minDailyHours?: SortOrder
    minRestHours?: SortOrder
    seniorityLevel?: SortOrder
    weeklyHoursTarget?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employee"> | number
    userId?: IntWithAggregatesFilter<"Employee"> | number
    name?: StringWithAggregatesFilter<"Employee"> | string
    email?: StringWithAggregatesFilter<"Employee"> | string
    department?: StringWithAggregatesFilter<"Employee"> | string
    position?: StringWithAggregatesFilter<"Employee"> | string
    phone?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    address?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    hireDate?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    yearsOfExperience?: IntWithAggregatesFilter<"Employee"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    employeeType?: StringWithAggregatesFilter<"Employee"> | string
    isActive?: BoolWithAggregatesFilter<"Employee"> | boolean
    maxConsecutiveDays?: IntWithAggregatesFilter<"Employee"> | number
    maxDailyHours?: IntWithAggregatesFilter<"Employee"> | number
    minDailyHours?: IntWithAggregatesFilter<"Employee"> | number
    minRestHours?: IntWithAggregatesFilter<"Employee"> | number
    seniorityLevel?: StringWithAggregatesFilter<"Employee"> | string
    weeklyHoursTarget?: IntWithAggregatesFilter<"Employee"> | number
  }

  export type AbilityWhereInput = {
    AND?: AbilityWhereInput | AbilityWhereInput[]
    OR?: AbilityWhereInput[]
    NOT?: AbilityWhereInput | AbilityWhereInput[]
    id?: IntFilter<"Ability"> | number
    employeeId?: IntFilter<"Ability"> | number
    customerService?: IntFilter<"Ability"> | number
    experience?: IntFilter<"Ability"> | number
    flexibility?: IntFilter<"Ability"> | number
    rank?: StringNullableFilter<"Ability"> | string | null
    teamChemistry?: IntFilter<"Ability"> | number
    totalScore?: IntNullableFilter<"Ability"> | number | null
    workSkill?: IntFilter<"Ability"> | number
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type AbilityOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    customerService?: SortOrder
    experience?: SortOrder
    flexibility?: SortOrder
    rank?: SortOrderInput | SortOrder
    teamChemistry?: SortOrder
    totalScore?: SortOrderInput | SortOrder
    workSkill?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type AbilityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employeeId?: number
    AND?: AbilityWhereInput | AbilityWhereInput[]
    OR?: AbilityWhereInput[]
    NOT?: AbilityWhereInput | AbilityWhereInput[]
    customerService?: IntFilter<"Ability"> | number
    experience?: IntFilter<"Ability"> | number
    flexibility?: IntFilter<"Ability"> | number
    rank?: StringNullableFilter<"Ability"> | string | null
    teamChemistry?: IntFilter<"Ability"> | number
    totalScore?: IntNullableFilter<"Ability"> | number | null
    workSkill?: IntFilter<"Ability"> | number
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id" | "employeeId">

  export type AbilityOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    customerService?: SortOrder
    experience?: SortOrder
    flexibility?: SortOrder
    rank?: SortOrderInput | SortOrder
    teamChemistry?: SortOrder
    totalScore?: SortOrderInput | SortOrder
    workSkill?: SortOrder
    _count?: AbilityCountOrderByAggregateInput
    _avg?: AbilityAvgOrderByAggregateInput
    _max?: AbilityMaxOrderByAggregateInput
    _min?: AbilityMinOrderByAggregateInput
    _sum?: AbilitySumOrderByAggregateInput
  }

  export type AbilityScalarWhereWithAggregatesInput = {
    AND?: AbilityScalarWhereWithAggregatesInput | AbilityScalarWhereWithAggregatesInput[]
    OR?: AbilityScalarWhereWithAggregatesInput[]
    NOT?: AbilityScalarWhereWithAggregatesInput | AbilityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ability"> | number
    employeeId?: IntWithAggregatesFilter<"Ability"> | number
    customerService?: IntWithAggregatesFilter<"Ability"> | number
    experience?: IntWithAggregatesFilter<"Ability"> | number
    flexibility?: IntWithAggregatesFilter<"Ability"> | number
    rank?: StringNullableWithAggregatesFilter<"Ability"> | string | null
    teamChemistry?: IntWithAggregatesFilter<"Ability"> | number
    totalScore?: IntNullableWithAggregatesFilter<"Ability"> | number | null
    workSkill?: IntWithAggregatesFilter<"Ability"> | number
  }

  export type PreferenceWhereInput = {
    AND?: PreferenceWhereInput | PreferenceWhereInput[]
    OR?: PreferenceWhereInput[]
    NOT?: PreferenceWhereInput | PreferenceWhereInput[]
    id?: IntFilter<"Preference"> | number
    employeeId?: IntFilter<"Preference"> | number
    preferDays?: JsonFilter<"Preference">
    avoidDays?: JsonFilter<"Preference">
    fixedOffDays?: JsonFilter<"Preference">
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PreferenceOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    preferDays?: SortOrder
    avoidDays?: SortOrder
    fixedOffDays?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type PreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employeeId?: number
    AND?: PreferenceWhereInput | PreferenceWhereInput[]
    OR?: PreferenceWhereInput[]
    NOT?: PreferenceWhereInput | PreferenceWhereInput[]
    preferDays?: JsonFilter<"Preference">
    avoidDays?: JsonFilter<"Preference">
    fixedOffDays?: JsonFilter<"Preference">
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id" | "employeeId">

  export type PreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    preferDays?: SortOrder
    avoidDays?: SortOrder
    fixedOffDays?: SortOrder
    _count?: PreferenceCountOrderByAggregateInput
    _avg?: PreferenceAvgOrderByAggregateInput
    _max?: PreferenceMaxOrderByAggregateInput
    _min?: PreferenceMinOrderByAggregateInput
    _sum?: PreferenceSumOrderByAggregateInput
  }

  export type PreferenceScalarWhereWithAggregatesInput = {
    AND?: PreferenceScalarWhereWithAggregatesInput | PreferenceScalarWhereWithAggregatesInput[]
    OR?: PreferenceScalarWhereWithAggregatesInput[]
    NOT?: PreferenceScalarWhereWithAggregatesInput | PreferenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Preference"> | number
    employeeId?: IntWithAggregatesFilter<"Preference"> | number
    preferDays?: JsonWithAggregatesFilter<"Preference">
    avoidDays?: JsonWithAggregatesFilter<"Preference">
    fixedOffDays?: JsonWithAggregatesFilter<"Preference">
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: IntFilter<"Schedule"> | number
    employeeId?: IntFilter<"Schedule"> | number
    date?: DateTimeFilter<"Schedule"> | Date | string
    startTime?: StringFilter<"Schedule"> | string
    endTime?: StringFilter<"Schedule"> | string
    shiftType?: StringFilter<"Schedule"> | string
    notes?: StringNullableFilter<"Schedule"> | string | null
    status?: StringFilter<"Schedule"> | string
    createdBy?: IntNullableFilter<"Schedule"> | number | null
    updatedBy?: IntNullableFilter<"Schedule"> | number | null
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    breakTime?: StringNullableFilter<"Schedule"> | string | null
    estimatedWorkload?: StringNullableFilter<"Schedule"> | string | null
    generationLogId?: IntNullableFilter<"Schedule"> | number | null
    isAutoGenerated?: BoolFilter<"Schedule"> | boolean
    overtimeApproved?: BoolFilter<"Schedule"> | boolean
    priority?: StringFilter<"Schedule"> | string
    shiftPatternId?: IntNullableFilter<"Schedule"> | number | null
    swapRequested?: BoolFilter<"Schedule"> | boolean
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    generationLog?: XOR<GenerationLogNullableRelationFilter, GenerationLogWhereInput> | null
    shiftPattern?: XOR<ShiftPatternNullableRelationFilter, ShiftPatternWhereInput> | null
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    breakTime?: SortOrderInput | SortOrder
    estimatedWorkload?: SortOrderInput | SortOrder
    generationLogId?: SortOrderInput | SortOrder
    isAutoGenerated?: SortOrder
    overtimeApproved?: SortOrder
    priority?: SortOrder
    shiftPatternId?: SortOrderInput | SortOrder
    swapRequested?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    generationLog?: GenerationLogOrderByWithRelationInput
    shiftPattern?: ShiftPatternOrderByWithRelationInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    employeeId?: IntFilter<"Schedule"> | number
    date?: DateTimeFilter<"Schedule"> | Date | string
    startTime?: StringFilter<"Schedule"> | string
    endTime?: StringFilter<"Schedule"> | string
    shiftType?: StringFilter<"Schedule"> | string
    notes?: StringNullableFilter<"Schedule"> | string | null
    status?: StringFilter<"Schedule"> | string
    createdBy?: IntNullableFilter<"Schedule"> | number | null
    updatedBy?: IntNullableFilter<"Schedule"> | number | null
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    breakTime?: StringNullableFilter<"Schedule"> | string | null
    estimatedWorkload?: StringNullableFilter<"Schedule"> | string | null
    generationLogId?: IntNullableFilter<"Schedule"> | number | null
    isAutoGenerated?: BoolFilter<"Schedule"> | boolean
    overtimeApproved?: BoolFilter<"Schedule"> | boolean
    priority?: StringFilter<"Schedule"> | string
    shiftPatternId?: IntNullableFilter<"Schedule"> | number | null
    swapRequested?: BoolFilter<"Schedule"> | boolean
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    generationLog?: XOR<GenerationLogNullableRelationFilter, GenerationLogWhereInput> | null
    shiftPattern?: XOR<ShiftPatternNullableRelationFilter, ShiftPatternWhereInput> | null
  }, "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    breakTime?: SortOrderInput | SortOrder
    estimatedWorkload?: SortOrderInput | SortOrder
    generationLogId?: SortOrderInput | SortOrder
    isAutoGenerated?: SortOrder
    overtimeApproved?: SortOrder
    priority?: SortOrder
    shiftPatternId?: SortOrderInput | SortOrder
    swapRequested?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Schedule"> | number
    employeeId?: IntWithAggregatesFilter<"Schedule"> | number
    date?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    startTime?: StringWithAggregatesFilter<"Schedule"> | string
    endTime?: StringWithAggregatesFilter<"Schedule"> | string
    shiftType?: StringWithAggregatesFilter<"Schedule"> | string
    notes?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    status?: StringWithAggregatesFilter<"Schedule"> | string
    createdBy?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    breakTime?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    estimatedWorkload?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    generationLogId?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    isAutoGenerated?: BoolWithAggregatesFilter<"Schedule"> | boolean
    overtimeApproved?: BoolWithAggregatesFilter<"Schedule"> | boolean
    priority?: StringWithAggregatesFilter<"Schedule"> | string
    shiftPatternId?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    swapRequested?: BoolWithAggregatesFilter<"Schedule"> | boolean
  }

  export type LeaveWhereInput = {
    AND?: LeaveWhereInput | LeaveWhereInput[]
    OR?: LeaveWhereInput[]
    NOT?: LeaveWhereInput | LeaveWhereInput[]
    id?: IntFilter<"Leave"> | number
    employeeId?: IntFilter<"Leave"> | number
    startDate?: DateTimeFilter<"Leave"> | Date | string
    endDate?: DateTimeFilter<"Leave"> | Date | string
    type?: StringFilter<"Leave"> | string
    reason?: StringNullableFilter<"Leave"> | string | null
    status?: StringFilter<"Leave"> | string
    createdAt?: DateTimeFilter<"Leave"> | Date | string
    updatedAt?: DateTimeFilter<"Leave"> | Date | string
    adminComment?: StringNullableFilter<"Leave"> | string | null
    reviewedAt?: DateTimeNullableFilter<"Leave"> | Date | string | null
    reviewedBy?: IntNullableFilter<"Leave"> | number | null
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    reviewer?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type LeaveOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    type?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    employee?: EmployeeOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
  }

  export type LeaveWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeaveWhereInput | LeaveWhereInput[]
    OR?: LeaveWhereInput[]
    NOT?: LeaveWhereInput | LeaveWhereInput[]
    employeeId?: IntFilter<"Leave"> | number
    startDate?: DateTimeFilter<"Leave"> | Date | string
    endDate?: DateTimeFilter<"Leave"> | Date | string
    type?: StringFilter<"Leave"> | string
    reason?: StringNullableFilter<"Leave"> | string | null
    status?: StringFilter<"Leave"> | string
    createdAt?: DateTimeFilter<"Leave"> | Date | string
    updatedAt?: DateTimeFilter<"Leave"> | Date | string
    adminComment?: StringNullableFilter<"Leave"> | string | null
    reviewedAt?: DateTimeNullableFilter<"Leave"> | Date | string | null
    reviewedBy?: IntNullableFilter<"Leave"> | number | null
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    reviewer?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type LeaveOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    type?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    _count?: LeaveCountOrderByAggregateInput
    _avg?: LeaveAvgOrderByAggregateInput
    _max?: LeaveMaxOrderByAggregateInput
    _min?: LeaveMinOrderByAggregateInput
    _sum?: LeaveSumOrderByAggregateInput
  }

  export type LeaveScalarWhereWithAggregatesInput = {
    AND?: LeaveScalarWhereWithAggregatesInput | LeaveScalarWhereWithAggregatesInput[]
    OR?: LeaveScalarWhereWithAggregatesInput[]
    NOT?: LeaveScalarWhereWithAggregatesInput | LeaveScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Leave"> | number
    employeeId?: IntWithAggregatesFilter<"Leave"> | number
    startDate?: DateTimeWithAggregatesFilter<"Leave"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Leave"> | Date | string
    type?: StringWithAggregatesFilter<"Leave"> | string
    reason?: StringNullableWithAggregatesFilter<"Leave"> | string | null
    status?: StringWithAggregatesFilter<"Leave"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Leave"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Leave"> | Date | string
    adminComment?: StringNullableWithAggregatesFilter<"Leave"> | string | null
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"Leave"> | Date | string | null
    reviewedBy?: IntNullableWithAggregatesFilter<"Leave"> | number | null
  }

  export type EmployeeNoteWhereInput = {
    AND?: EmployeeNoteWhereInput | EmployeeNoteWhereInput[]
    OR?: EmployeeNoteWhereInput[]
    NOT?: EmployeeNoteWhereInput | EmployeeNoteWhereInput[]
    id?: IntFilter<"EmployeeNote"> | number
    employeeId?: IntFilter<"EmployeeNote"> | number
    type?: StringFilter<"EmployeeNote"> | string
    content?: StringFilter<"EmployeeNote"> | string
    priority?: StringFilter<"EmployeeNote"> | string
    createdBy?: IntFilter<"EmployeeNote"> | number
    createdAt?: DateTimeFilter<"EmployeeNote"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type EmployeeNoteOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type EmployeeNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmployeeNoteWhereInput | EmployeeNoteWhereInput[]
    OR?: EmployeeNoteWhereInput[]
    NOT?: EmployeeNoteWhereInput | EmployeeNoteWhereInput[]
    employeeId?: IntFilter<"EmployeeNote"> | number
    type?: StringFilter<"EmployeeNote"> | string
    content?: StringFilter<"EmployeeNote"> | string
    priority?: StringFilter<"EmployeeNote"> | string
    createdBy?: IntFilter<"EmployeeNote"> | number
    createdAt?: DateTimeFilter<"EmployeeNote"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type EmployeeNoteOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    _count?: EmployeeNoteCountOrderByAggregateInput
    _avg?: EmployeeNoteAvgOrderByAggregateInput
    _max?: EmployeeNoteMaxOrderByAggregateInput
    _min?: EmployeeNoteMinOrderByAggregateInput
    _sum?: EmployeeNoteSumOrderByAggregateInput
  }

  export type EmployeeNoteScalarWhereWithAggregatesInput = {
    AND?: EmployeeNoteScalarWhereWithAggregatesInput | EmployeeNoteScalarWhereWithAggregatesInput[]
    OR?: EmployeeNoteScalarWhereWithAggregatesInput[]
    NOT?: EmployeeNoteScalarWhereWithAggregatesInput | EmployeeNoteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmployeeNote"> | number
    employeeId?: IntWithAggregatesFilter<"EmployeeNote"> | number
    type?: StringWithAggregatesFilter<"EmployeeNote"> | string
    content?: StringWithAggregatesFilter<"EmployeeNote"> | string
    priority?: StringWithAggregatesFilter<"EmployeeNote"> | string
    createdBy?: IntWithAggregatesFilter<"EmployeeNote"> | number
    createdAt?: DateTimeWithAggregatesFilter<"EmployeeNote"> | Date | string
  }

  export type EmployeeChemistryWhereInput = {
    AND?: EmployeeChemistryWhereInput | EmployeeChemistryWhereInput[]
    OR?: EmployeeChemistryWhereInput[]
    NOT?: EmployeeChemistryWhereInput | EmployeeChemistryWhereInput[]
    id?: IntFilter<"EmployeeChemistry"> | number
    employee1Id?: IntFilter<"EmployeeChemistry"> | number
    employee2Id?: IntFilter<"EmployeeChemistry"> | number
    score?: IntFilter<"EmployeeChemistry"> | number
    employee1?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    employee2?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type EmployeeChemistryOrderByWithRelationInput = {
    id?: SortOrder
    employee1Id?: SortOrder
    employee2Id?: SortOrder
    score?: SortOrder
    employee1?: EmployeeOrderByWithRelationInput
    employee2?: EmployeeOrderByWithRelationInput
  }

  export type EmployeeChemistryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employee1Id_employee2Id?: EmployeeChemistryEmployee1IdEmployee2IdCompoundUniqueInput
    AND?: EmployeeChemistryWhereInput | EmployeeChemistryWhereInput[]
    OR?: EmployeeChemistryWhereInput[]
    NOT?: EmployeeChemistryWhereInput | EmployeeChemistryWhereInput[]
    employee1Id?: IntFilter<"EmployeeChemistry"> | number
    employee2Id?: IntFilter<"EmployeeChemistry"> | number
    score?: IntFilter<"EmployeeChemistry"> | number
    employee1?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    employee2?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id" | "employee1Id_employee2Id">

  export type EmployeeChemistryOrderByWithAggregationInput = {
    id?: SortOrder
    employee1Id?: SortOrder
    employee2Id?: SortOrder
    score?: SortOrder
    _count?: EmployeeChemistryCountOrderByAggregateInput
    _avg?: EmployeeChemistryAvgOrderByAggregateInput
    _max?: EmployeeChemistryMaxOrderByAggregateInput
    _min?: EmployeeChemistryMinOrderByAggregateInput
    _sum?: EmployeeChemistrySumOrderByAggregateInput
  }

  export type EmployeeChemistryScalarWhereWithAggregatesInput = {
    AND?: EmployeeChemistryScalarWhereWithAggregatesInput | EmployeeChemistryScalarWhereWithAggregatesInput[]
    OR?: EmployeeChemistryScalarWhereWithAggregatesInput[]
    NOT?: EmployeeChemistryScalarWhereWithAggregatesInput | EmployeeChemistryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmployeeChemistry"> | number
    employee1Id?: IntWithAggregatesFilter<"EmployeeChemistry"> | number
    employee2Id?: IntWithAggregatesFilter<"EmployeeChemistry"> | number
    score?: IntWithAggregatesFilter<"EmployeeChemistry"> | number
  }

  export type NoticeWhereInput = {
    AND?: NoticeWhereInput | NoticeWhereInput[]
    OR?: NoticeWhereInput[]
    NOT?: NoticeWhereInput | NoticeWhereInput[]
    id?: IntFilter<"Notice"> | number
    title?: StringFilter<"Notice"> | string
    content?: StringFilter<"Notice"> | string
    type?: StringFilter<"Notice"> | string
    priority?: StringFilter<"Notice"> | string
    isPinned?: BoolFilter<"Notice"> | boolean
    createdBy?: IntFilter<"Notice"> | number
    createdAt?: DateTimeFilter<"Notice"> | Date | string
    updatedAt?: DateTimeFilter<"Notice"> | Date | string
    expiresAt?: DateTimeNullableFilter<"Notice"> | Date | string | null
    readByUsers?: NoticeReadListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NoticeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isPinned?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    readByUsers?: NoticeReadOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
  }

  export type NoticeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NoticeWhereInput | NoticeWhereInput[]
    OR?: NoticeWhereInput[]
    NOT?: NoticeWhereInput | NoticeWhereInput[]
    title?: StringFilter<"Notice"> | string
    content?: StringFilter<"Notice"> | string
    type?: StringFilter<"Notice"> | string
    priority?: StringFilter<"Notice"> | string
    isPinned?: BoolFilter<"Notice"> | boolean
    createdBy?: IntFilter<"Notice"> | number
    createdAt?: DateTimeFilter<"Notice"> | Date | string
    updatedAt?: DateTimeFilter<"Notice"> | Date | string
    expiresAt?: DateTimeNullableFilter<"Notice"> | Date | string | null
    readByUsers?: NoticeReadListRelationFilter
    creator?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NoticeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isPinned?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: NoticeCountOrderByAggregateInput
    _avg?: NoticeAvgOrderByAggregateInput
    _max?: NoticeMaxOrderByAggregateInput
    _min?: NoticeMinOrderByAggregateInput
    _sum?: NoticeSumOrderByAggregateInput
  }

  export type NoticeScalarWhereWithAggregatesInput = {
    AND?: NoticeScalarWhereWithAggregatesInput | NoticeScalarWhereWithAggregatesInput[]
    OR?: NoticeScalarWhereWithAggregatesInput[]
    NOT?: NoticeScalarWhereWithAggregatesInput | NoticeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notice"> | number
    title?: StringWithAggregatesFilter<"Notice"> | string
    content?: StringWithAggregatesFilter<"Notice"> | string
    type?: StringWithAggregatesFilter<"Notice"> | string
    priority?: StringWithAggregatesFilter<"Notice"> | string
    isPinned?: BoolWithAggregatesFilter<"Notice"> | boolean
    createdBy?: IntWithAggregatesFilter<"Notice"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Notice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notice"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Notice"> | Date | string | null
  }

  export type NoticeReadWhereInput = {
    AND?: NoticeReadWhereInput | NoticeReadWhereInput[]
    OR?: NoticeReadWhereInput[]
    NOT?: NoticeReadWhereInput | NoticeReadWhereInput[]
    id?: IntFilter<"NoticeRead"> | number
    noticeId?: IntFilter<"NoticeRead"> | number
    userId?: IntFilter<"NoticeRead"> | number
    readAt?: DateTimeFilter<"NoticeRead"> | Date | string
    notice?: XOR<NoticeRelationFilter, NoticeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NoticeReadOrderByWithRelationInput = {
    id?: SortOrder
    noticeId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
    notice?: NoticeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type NoticeReadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    noticeId_userId?: NoticeReadNoticeIdUserIdCompoundUniqueInput
    AND?: NoticeReadWhereInput | NoticeReadWhereInput[]
    OR?: NoticeReadWhereInput[]
    NOT?: NoticeReadWhereInput | NoticeReadWhereInput[]
    noticeId?: IntFilter<"NoticeRead"> | number
    userId?: IntFilter<"NoticeRead"> | number
    readAt?: DateTimeFilter<"NoticeRead"> | Date | string
    notice?: XOR<NoticeRelationFilter, NoticeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "noticeId_userId">

  export type NoticeReadOrderByWithAggregationInput = {
    id?: SortOrder
    noticeId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
    _count?: NoticeReadCountOrderByAggregateInput
    _avg?: NoticeReadAvgOrderByAggregateInput
    _max?: NoticeReadMaxOrderByAggregateInput
    _min?: NoticeReadMinOrderByAggregateInput
    _sum?: NoticeReadSumOrderByAggregateInput
  }

  export type NoticeReadScalarWhereWithAggregatesInput = {
    AND?: NoticeReadScalarWhereWithAggregatesInput | NoticeReadScalarWhereWithAggregatesInput[]
    OR?: NoticeReadScalarWhereWithAggregatesInput[]
    NOT?: NoticeReadScalarWhereWithAggregatesInput | NoticeReadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NoticeRead"> | number
    noticeId?: IntWithAggregatesFilter<"NoticeRead"> | number
    userId?: IntWithAggregatesFilter<"NoticeRead"> | number
    readAt?: DateTimeWithAggregatesFilter<"NoticeRead"> | Date | string
  }

  export type ShiftPatternWhereInput = {
    AND?: ShiftPatternWhereInput | ShiftPatternWhereInput[]
    OR?: ShiftPatternWhereInput[]
    NOT?: ShiftPatternWhereInput | ShiftPatternWhereInput[]
    id?: IntFilter<"ShiftPattern"> | number
    name?: StringFilter<"ShiftPattern"> | string
    description?: StringNullableFilter<"ShiftPattern"> | string | null
    startTime?: StringFilter<"ShiftPattern"> | string
    endTime?: StringFilter<"ShiftPattern"> | string
    duration?: IntFilter<"ShiftPattern"> | number
    breakDuration?: IntFilter<"ShiftPattern"> | number
    shiftType?: StringFilter<"ShiftPattern"> | string
    industryType?: StringNullableFilter<"ShiftPattern"> | string | null
    isTemplate?: BoolFilter<"ShiftPattern"> | boolean
    color?: StringFilter<"ShiftPattern"> | string
    createdBy?: IntFilter<"ShiftPattern"> | number
    createdAt?: DateTimeFilter<"ShiftPattern"> | Date | string
    updatedAt?: DateTimeFilter<"ShiftPattern"> | Date | string
    companyId?: IntNullableFilter<"ShiftPattern"> | number | null
    days?: JsonFilter<"ShiftPattern">
    enabled?: BoolFilter<"ShiftPattern"> | boolean
    requiredStaff?: IntFilter<"ShiftPattern"> | number
    requirements?: JsonNullableFilter<"ShiftPattern">
    schedules?: ScheduleListRelationFilter
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    schedule_templates?: ScheduleTemplateListRelationFilter
    draftItems?: ScheduleDraftItemListRelationFilter
  }

  export type ShiftPatternOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    breakDuration?: SortOrder
    shiftType?: SortOrder
    industryType?: SortOrderInput | SortOrder
    isTemplate?: SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrderInput | SortOrder
    days?: SortOrder
    enabled?: SortOrder
    requiredStaff?: SortOrder
    requirements?: SortOrderInput | SortOrder
    schedules?: ScheduleOrderByRelationAggregateInput
    company?: CompanyOrderByWithRelationInput
    schedule_templates?: ScheduleTemplateOrderByRelationAggregateInput
    draftItems?: ScheduleDraftItemOrderByRelationAggregateInput
  }

  export type ShiftPatternWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShiftPatternWhereInput | ShiftPatternWhereInput[]
    OR?: ShiftPatternWhereInput[]
    NOT?: ShiftPatternWhereInput | ShiftPatternWhereInput[]
    name?: StringFilter<"ShiftPattern"> | string
    description?: StringNullableFilter<"ShiftPattern"> | string | null
    startTime?: StringFilter<"ShiftPattern"> | string
    endTime?: StringFilter<"ShiftPattern"> | string
    duration?: IntFilter<"ShiftPattern"> | number
    breakDuration?: IntFilter<"ShiftPattern"> | number
    shiftType?: StringFilter<"ShiftPattern"> | string
    industryType?: StringNullableFilter<"ShiftPattern"> | string | null
    isTemplate?: BoolFilter<"ShiftPattern"> | boolean
    color?: StringFilter<"ShiftPattern"> | string
    createdBy?: IntFilter<"ShiftPattern"> | number
    createdAt?: DateTimeFilter<"ShiftPattern"> | Date | string
    updatedAt?: DateTimeFilter<"ShiftPattern"> | Date | string
    companyId?: IntNullableFilter<"ShiftPattern"> | number | null
    days?: JsonFilter<"ShiftPattern">
    enabled?: BoolFilter<"ShiftPattern"> | boolean
    requiredStaff?: IntFilter<"ShiftPattern"> | number
    requirements?: JsonNullableFilter<"ShiftPattern">
    schedules?: ScheduleListRelationFilter
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    schedule_templates?: ScheduleTemplateListRelationFilter
    draftItems?: ScheduleDraftItemListRelationFilter
  }, "id">

  export type ShiftPatternOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    breakDuration?: SortOrder
    shiftType?: SortOrder
    industryType?: SortOrderInput | SortOrder
    isTemplate?: SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrderInput | SortOrder
    days?: SortOrder
    enabled?: SortOrder
    requiredStaff?: SortOrder
    requirements?: SortOrderInput | SortOrder
    _count?: ShiftPatternCountOrderByAggregateInput
    _avg?: ShiftPatternAvgOrderByAggregateInput
    _max?: ShiftPatternMaxOrderByAggregateInput
    _min?: ShiftPatternMinOrderByAggregateInput
    _sum?: ShiftPatternSumOrderByAggregateInput
  }

  export type ShiftPatternScalarWhereWithAggregatesInput = {
    AND?: ShiftPatternScalarWhereWithAggregatesInput | ShiftPatternScalarWhereWithAggregatesInput[]
    OR?: ShiftPatternScalarWhereWithAggregatesInput[]
    NOT?: ShiftPatternScalarWhereWithAggregatesInput | ShiftPatternScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShiftPattern"> | number
    name?: StringWithAggregatesFilter<"ShiftPattern"> | string
    description?: StringNullableWithAggregatesFilter<"ShiftPattern"> | string | null
    startTime?: StringWithAggregatesFilter<"ShiftPattern"> | string
    endTime?: StringWithAggregatesFilter<"ShiftPattern"> | string
    duration?: IntWithAggregatesFilter<"ShiftPattern"> | number
    breakDuration?: IntWithAggregatesFilter<"ShiftPattern"> | number
    shiftType?: StringWithAggregatesFilter<"ShiftPattern"> | string
    industryType?: StringNullableWithAggregatesFilter<"ShiftPattern"> | string | null
    isTemplate?: BoolWithAggregatesFilter<"ShiftPattern"> | boolean
    color?: StringWithAggregatesFilter<"ShiftPattern"> | string
    createdBy?: IntWithAggregatesFilter<"ShiftPattern"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ShiftPattern"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShiftPattern"> | Date | string
    companyId?: IntNullableWithAggregatesFilter<"ShiftPattern"> | number | null
    days?: JsonWithAggregatesFilter<"ShiftPattern">
    enabled?: BoolWithAggregatesFilter<"ShiftPattern"> | boolean
    requiredStaff?: IntWithAggregatesFilter<"ShiftPattern"> | number
    requirements?: JsonNullableWithAggregatesFilter<"ShiftPattern">
  }

  export type ScheduleTemplateWhereInput = {
    AND?: ScheduleTemplateWhereInput | ScheduleTemplateWhereInput[]
    OR?: ScheduleTemplateWhereInput[]
    NOT?: ScheduleTemplateWhereInput | ScheduleTemplateWhereInput[]
    id?: IntFilter<"ScheduleTemplate"> | number
    name?: StringFilter<"ScheduleTemplate"> | string
    description?: StringNullableFilter<"ScheduleTemplate"> | string | null
    industryType?: StringFilter<"ScheduleTemplate"> | string
    templateType?: StringFilter<"ScheduleTemplate"> | string
    isActive?: BoolFilter<"ScheduleTemplate"> | boolean
    metadata?: JsonNullableFilter<"ScheduleTemplate">
    workDaysPattern?: JsonFilter<"ScheduleTemplate">
    rotationPeriod?: IntNullableFilter<"ScheduleTemplate"> | number | null
    minStaffPerShift?: IntFilter<"ScheduleTemplate"> | number
    maxStaffPerShift?: IntNullableFilter<"ScheduleTemplate"> | number | null
    coverageRequirements?: JsonNullableFilter<"ScheduleTemplate">
    createdBy?: IntFilter<"ScheduleTemplate"> | number
    createdAt?: DateTimeFilter<"ScheduleTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleTemplate"> | Date | string
    generationLogs?: GenerationLogListRelationFilter
    shift_patterns?: ShiftPatternListRelationFilter
    drafts?: ScheduleDraftListRelationFilter
  }

  export type ScheduleTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    industryType?: SortOrder
    templateType?: SortOrder
    isActive?: SortOrder
    metadata?: SortOrderInput | SortOrder
    workDaysPattern?: SortOrder
    rotationPeriod?: SortOrderInput | SortOrder
    minStaffPerShift?: SortOrder
    maxStaffPerShift?: SortOrderInput | SortOrder
    coverageRequirements?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    generationLogs?: GenerationLogOrderByRelationAggregateInput
    shift_patterns?: ShiftPatternOrderByRelationAggregateInput
    drafts?: ScheduleDraftOrderByRelationAggregateInput
  }

  export type ScheduleTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleTemplateWhereInput | ScheduleTemplateWhereInput[]
    OR?: ScheduleTemplateWhereInput[]
    NOT?: ScheduleTemplateWhereInput | ScheduleTemplateWhereInput[]
    name?: StringFilter<"ScheduleTemplate"> | string
    description?: StringNullableFilter<"ScheduleTemplate"> | string | null
    industryType?: StringFilter<"ScheduleTemplate"> | string
    templateType?: StringFilter<"ScheduleTemplate"> | string
    isActive?: BoolFilter<"ScheduleTemplate"> | boolean
    metadata?: JsonNullableFilter<"ScheduleTemplate">
    workDaysPattern?: JsonFilter<"ScheduleTemplate">
    rotationPeriod?: IntNullableFilter<"ScheduleTemplate"> | number | null
    minStaffPerShift?: IntFilter<"ScheduleTemplate"> | number
    maxStaffPerShift?: IntNullableFilter<"ScheduleTemplate"> | number | null
    coverageRequirements?: JsonNullableFilter<"ScheduleTemplate">
    createdBy?: IntFilter<"ScheduleTemplate"> | number
    createdAt?: DateTimeFilter<"ScheduleTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleTemplate"> | Date | string
    generationLogs?: GenerationLogListRelationFilter
    shift_patterns?: ShiftPatternListRelationFilter
    drafts?: ScheduleDraftListRelationFilter
  }, "id">

  export type ScheduleTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    industryType?: SortOrder
    templateType?: SortOrder
    isActive?: SortOrder
    metadata?: SortOrderInput | SortOrder
    workDaysPattern?: SortOrder
    rotationPeriod?: SortOrderInput | SortOrder
    minStaffPerShift?: SortOrder
    maxStaffPerShift?: SortOrderInput | SortOrder
    coverageRequirements?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduleTemplateCountOrderByAggregateInput
    _avg?: ScheduleTemplateAvgOrderByAggregateInput
    _max?: ScheduleTemplateMaxOrderByAggregateInput
    _min?: ScheduleTemplateMinOrderByAggregateInput
    _sum?: ScheduleTemplateSumOrderByAggregateInput
  }

  export type ScheduleTemplateScalarWhereWithAggregatesInput = {
    AND?: ScheduleTemplateScalarWhereWithAggregatesInput | ScheduleTemplateScalarWhereWithAggregatesInput[]
    OR?: ScheduleTemplateScalarWhereWithAggregatesInput[]
    NOT?: ScheduleTemplateScalarWhereWithAggregatesInput | ScheduleTemplateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScheduleTemplate"> | number
    name?: StringWithAggregatesFilter<"ScheduleTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"ScheduleTemplate"> | string | null
    industryType?: StringWithAggregatesFilter<"ScheduleTemplate"> | string
    templateType?: StringWithAggregatesFilter<"ScheduleTemplate"> | string
    isActive?: BoolWithAggregatesFilter<"ScheduleTemplate"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"ScheduleTemplate">
    workDaysPattern?: JsonWithAggregatesFilter<"ScheduleTemplate">
    rotationPeriod?: IntNullableWithAggregatesFilter<"ScheduleTemplate"> | number | null
    minStaffPerShift?: IntWithAggregatesFilter<"ScheduleTemplate"> | number
    maxStaffPerShift?: IntNullableWithAggregatesFilter<"ScheduleTemplate"> | number | null
    coverageRequirements?: JsonNullableWithAggregatesFilter<"ScheduleTemplate">
    createdBy?: IntWithAggregatesFilter<"ScheduleTemplate"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ScheduleTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScheduleTemplate"> | Date | string
  }

  export type EmployeeConstraintsWhereInput = {
    AND?: EmployeeConstraintsWhereInput | EmployeeConstraintsWhereInput[]
    OR?: EmployeeConstraintsWhereInput[]
    NOT?: EmployeeConstraintsWhereInput | EmployeeConstraintsWhereInput[]
    id?: IntFilter<"EmployeeConstraints"> | number
    employeeId?: IntFilter<"EmployeeConstraints"> | number
    unavailableTimeSlots?: JsonNullableFilter<"EmployeeConstraints">
    preferredTimeSlots?: JsonNullableFilter<"EmployeeConstraints">
    blackoutDates?: JsonNullableFilter<"EmployeeConstraints">
    preferredShiftTypes?: JsonNullableFilter<"EmployeeConstraints">
    avoidShiftTypes?: JsonNullableFilter<"EmployeeConstraints">
    canWorkWeekends?: BoolFilter<"EmployeeConstraints"> | boolean
    canWorkHolidays?: BoolFilter<"EmployeeConstraints"> | boolean
    canWorkNightShifts?: BoolFilter<"EmployeeConstraints"> | boolean
    maxShiftsPerWeek?: IntFilter<"EmployeeConstraints"> | number
    maxOvertimeHours?: IntFilter<"EmployeeConstraints"> | number
    requiresFixedSchedule?: BoolFilter<"EmployeeConstraints"> | boolean
    fixedShiftPattern?: StringNullableFilter<"EmployeeConstraints"> | string | null
    maxTravelTime?: IntNullableFilter<"EmployeeConstraints"> | number | null
    workLocation?: StringNullableFilter<"EmployeeConstraints"> | string | null
    hasReliableTransport?: BoolFilter<"EmployeeConstraints"> | boolean
    needsAccommodation?: BoolFilter<"EmployeeConstraints"> | boolean
    accommodationDetails?: StringNullableFilter<"EmployeeConstraints"> | string | null
    medicalRestrictions?: JsonNullableFilter<"EmployeeConstraints">
    certificationRequired?: JsonNullableFilter<"EmployeeConstraints">
    createdAt?: DateTimeFilter<"EmployeeConstraints"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeConstraints"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type EmployeeConstraintsOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    unavailableTimeSlots?: SortOrderInput | SortOrder
    preferredTimeSlots?: SortOrderInput | SortOrder
    blackoutDates?: SortOrderInput | SortOrder
    preferredShiftTypes?: SortOrderInput | SortOrder
    avoidShiftTypes?: SortOrderInput | SortOrder
    canWorkWeekends?: SortOrder
    canWorkHolidays?: SortOrder
    canWorkNightShifts?: SortOrder
    maxShiftsPerWeek?: SortOrder
    maxOvertimeHours?: SortOrder
    requiresFixedSchedule?: SortOrder
    fixedShiftPattern?: SortOrderInput | SortOrder
    maxTravelTime?: SortOrderInput | SortOrder
    workLocation?: SortOrderInput | SortOrder
    hasReliableTransport?: SortOrder
    needsAccommodation?: SortOrder
    accommodationDetails?: SortOrderInput | SortOrder
    medicalRestrictions?: SortOrderInput | SortOrder
    certificationRequired?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type EmployeeConstraintsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employeeId?: number
    AND?: EmployeeConstraintsWhereInput | EmployeeConstraintsWhereInput[]
    OR?: EmployeeConstraintsWhereInput[]
    NOT?: EmployeeConstraintsWhereInput | EmployeeConstraintsWhereInput[]
    unavailableTimeSlots?: JsonNullableFilter<"EmployeeConstraints">
    preferredTimeSlots?: JsonNullableFilter<"EmployeeConstraints">
    blackoutDates?: JsonNullableFilter<"EmployeeConstraints">
    preferredShiftTypes?: JsonNullableFilter<"EmployeeConstraints">
    avoidShiftTypes?: JsonNullableFilter<"EmployeeConstraints">
    canWorkWeekends?: BoolFilter<"EmployeeConstraints"> | boolean
    canWorkHolidays?: BoolFilter<"EmployeeConstraints"> | boolean
    canWorkNightShifts?: BoolFilter<"EmployeeConstraints"> | boolean
    maxShiftsPerWeek?: IntFilter<"EmployeeConstraints"> | number
    maxOvertimeHours?: IntFilter<"EmployeeConstraints"> | number
    requiresFixedSchedule?: BoolFilter<"EmployeeConstraints"> | boolean
    fixedShiftPattern?: StringNullableFilter<"EmployeeConstraints"> | string | null
    maxTravelTime?: IntNullableFilter<"EmployeeConstraints"> | number | null
    workLocation?: StringNullableFilter<"EmployeeConstraints"> | string | null
    hasReliableTransport?: BoolFilter<"EmployeeConstraints"> | boolean
    needsAccommodation?: BoolFilter<"EmployeeConstraints"> | boolean
    accommodationDetails?: StringNullableFilter<"EmployeeConstraints"> | string | null
    medicalRestrictions?: JsonNullableFilter<"EmployeeConstraints">
    certificationRequired?: JsonNullableFilter<"EmployeeConstraints">
    createdAt?: DateTimeFilter<"EmployeeConstraints"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeConstraints"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id" | "employeeId">

  export type EmployeeConstraintsOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    unavailableTimeSlots?: SortOrderInput | SortOrder
    preferredTimeSlots?: SortOrderInput | SortOrder
    blackoutDates?: SortOrderInput | SortOrder
    preferredShiftTypes?: SortOrderInput | SortOrder
    avoidShiftTypes?: SortOrderInput | SortOrder
    canWorkWeekends?: SortOrder
    canWorkHolidays?: SortOrder
    canWorkNightShifts?: SortOrder
    maxShiftsPerWeek?: SortOrder
    maxOvertimeHours?: SortOrder
    requiresFixedSchedule?: SortOrder
    fixedShiftPattern?: SortOrderInput | SortOrder
    maxTravelTime?: SortOrderInput | SortOrder
    workLocation?: SortOrderInput | SortOrder
    hasReliableTransport?: SortOrder
    needsAccommodation?: SortOrder
    accommodationDetails?: SortOrderInput | SortOrder
    medicalRestrictions?: SortOrderInput | SortOrder
    certificationRequired?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployeeConstraintsCountOrderByAggregateInput
    _avg?: EmployeeConstraintsAvgOrderByAggregateInput
    _max?: EmployeeConstraintsMaxOrderByAggregateInput
    _min?: EmployeeConstraintsMinOrderByAggregateInput
    _sum?: EmployeeConstraintsSumOrderByAggregateInput
  }

  export type EmployeeConstraintsScalarWhereWithAggregatesInput = {
    AND?: EmployeeConstraintsScalarWhereWithAggregatesInput | EmployeeConstraintsScalarWhereWithAggregatesInput[]
    OR?: EmployeeConstraintsScalarWhereWithAggregatesInput[]
    NOT?: EmployeeConstraintsScalarWhereWithAggregatesInput | EmployeeConstraintsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmployeeConstraints"> | number
    employeeId?: IntWithAggregatesFilter<"EmployeeConstraints"> | number
    unavailableTimeSlots?: JsonNullableWithAggregatesFilter<"EmployeeConstraints">
    preferredTimeSlots?: JsonNullableWithAggregatesFilter<"EmployeeConstraints">
    blackoutDates?: JsonNullableWithAggregatesFilter<"EmployeeConstraints">
    preferredShiftTypes?: JsonNullableWithAggregatesFilter<"EmployeeConstraints">
    avoidShiftTypes?: JsonNullableWithAggregatesFilter<"EmployeeConstraints">
    canWorkWeekends?: BoolWithAggregatesFilter<"EmployeeConstraints"> | boolean
    canWorkHolidays?: BoolWithAggregatesFilter<"EmployeeConstraints"> | boolean
    canWorkNightShifts?: BoolWithAggregatesFilter<"EmployeeConstraints"> | boolean
    maxShiftsPerWeek?: IntWithAggregatesFilter<"EmployeeConstraints"> | number
    maxOvertimeHours?: IntWithAggregatesFilter<"EmployeeConstraints"> | number
    requiresFixedSchedule?: BoolWithAggregatesFilter<"EmployeeConstraints"> | boolean
    fixedShiftPattern?: StringNullableWithAggregatesFilter<"EmployeeConstraints"> | string | null
    maxTravelTime?: IntNullableWithAggregatesFilter<"EmployeeConstraints"> | number | null
    workLocation?: StringNullableWithAggregatesFilter<"EmployeeConstraints"> | string | null
    hasReliableTransport?: BoolWithAggregatesFilter<"EmployeeConstraints"> | boolean
    needsAccommodation?: BoolWithAggregatesFilter<"EmployeeConstraints"> | boolean
    accommodationDetails?: StringNullableWithAggregatesFilter<"EmployeeConstraints"> | string | null
    medicalRestrictions?: JsonNullableWithAggregatesFilter<"EmployeeConstraints">
    certificationRequired?: JsonNullableWithAggregatesFilter<"EmployeeConstraints">
    createdAt?: DateTimeWithAggregatesFilter<"EmployeeConstraints"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmployeeConstraints"> | Date | string
  }

  export type GenerationLogWhereInput = {
    AND?: GenerationLogWhereInput | GenerationLogWhereInput[]
    OR?: GenerationLogWhereInput[]
    NOT?: GenerationLogWhereInput | GenerationLogWhereInput[]
    id?: IntFilter<"GenerationLog"> | number
    templateId?: IntNullableFilter<"GenerationLog"> | number | null
    generatedBy?: IntFilter<"GenerationLog"> | number
    generationType?: StringFilter<"GenerationLog"> | string
    periodStart?: DateTimeFilter<"GenerationLog"> | Date | string
    periodEnd?: DateTimeFilter<"GenerationLog"> | Date | string
    totalSchedulesCreated?: IntFilter<"GenerationLog"> | number
    totalEmployeesAffected?: IntFilter<"GenerationLog"> | number
    parameters?: JsonFilter<"GenerationLog">
    constraints?: JsonNullableFilter<"GenerationLog">
    coverageAchieved?: FloatNullableFilter<"GenerationLog"> | number | null
    employeeSatisfaction?: FloatNullableFilter<"GenerationLog"> | number | null
    constraintViolations?: JsonNullableFilter<"GenerationLog">
    warnings?: JsonNullableFilter<"GenerationLog">
    errors?: JsonNullableFilter<"GenerationLog">
    executionTime?: IntNullableFilter<"GenerationLog"> | number | null
    algorithmVersion?: StringFilter<"GenerationLog"> | string
    status?: StringFilter<"GenerationLog"> | string
    notes?: StringNullableFilter<"GenerationLog"> | string | null
    createdAt?: DateTimeFilter<"GenerationLog"> | Date | string
    template?: XOR<ScheduleTemplateNullableRelationFilter, ScheduleTemplateWhereInput> | null
    schedules?: ScheduleListRelationFilter
  }

  export type GenerationLogOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrderInput | SortOrder
    generatedBy?: SortOrder
    generationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    totalSchedulesCreated?: SortOrder
    totalEmployeesAffected?: SortOrder
    parameters?: SortOrder
    constraints?: SortOrderInput | SortOrder
    coverageAchieved?: SortOrderInput | SortOrder
    employeeSatisfaction?: SortOrderInput | SortOrder
    constraintViolations?: SortOrderInput | SortOrder
    warnings?: SortOrderInput | SortOrder
    errors?: SortOrderInput | SortOrder
    executionTime?: SortOrderInput | SortOrder
    algorithmVersion?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    template?: ScheduleTemplateOrderByWithRelationInput
    schedules?: ScheduleOrderByRelationAggregateInput
  }

  export type GenerationLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GenerationLogWhereInput | GenerationLogWhereInput[]
    OR?: GenerationLogWhereInput[]
    NOT?: GenerationLogWhereInput | GenerationLogWhereInput[]
    templateId?: IntNullableFilter<"GenerationLog"> | number | null
    generatedBy?: IntFilter<"GenerationLog"> | number
    generationType?: StringFilter<"GenerationLog"> | string
    periodStart?: DateTimeFilter<"GenerationLog"> | Date | string
    periodEnd?: DateTimeFilter<"GenerationLog"> | Date | string
    totalSchedulesCreated?: IntFilter<"GenerationLog"> | number
    totalEmployeesAffected?: IntFilter<"GenerationLog"> | number
    parameters?: JsonFilter<"GenerationLog">
    constraints?: JsonNullableFilter<"GenerationLog">
    coverageAchieved?: FloatNullableFilter<"GenerationLog"> | number | null
    employeeSatisfaction?: FloatNullableFilter<"GenerationLog"> | number | null
    constraintViolations?: JsonNullableFilter<"GenerationLog">
    warnings?: JsonNullableFilter<"GenerationLog">
    errors?: JsonNullableFilter<"GenerationLog">
    executionTime?: IntNullableFilter<"GenerationLog"> | number | null
    algorithmVersion?: StringFilter<"GenerationLog"> | string
    status?: StringFilter<"GenerationLog"> | string
    notes?: StringNullableFilter<"GenerationLog"> | string | null
    createdAt?: DateTimeFilter<"GenerationLog"> | Date | string
    template?: XOR<ScheduleTemplateNullableRelationFilter, ScheduleTemplateWhereInput> | null
    schedules?: ScheduleListRelationFilter
  }, "id">

  export type GenerationLogOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrderInput | SortOrder
    generatedBy?: SortOrder
    generationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    totalSchedulesCreated?: SortOrder
    totalEmployeesAffected?: SortOrder
    parameters?: SortOrder
    constraints?: SortOrderInput | SortOrder
    coverageAchieved?: SortOrderInput | SortOrder
    employeeSatisfaction?: SortOrderInput | SortOrder
    constraintViolations?: SortOrderInput | SortOrder
    warnings?: SortOrderInput | SortOrder
    errors?: SortOrderInput | SortOrder
    executionTime?: SortOrderInput | SortOrder
    algorithmVersion?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: GenerationLogCountOrderByAggregateInput
    _avg?: GenerationLogAvgOrderByAggregateInput
    _max?: GenerationLogMaxOrderByAggregateInput
    _min?: GenerationLogMinOrderByAggregateInput
    _sum?: GenerationLogSumOrderByAggregateInput
  }

  export type GenerationLogScalarWhereWithAggregatesInput = {
    AND?: GenerationLogScalarWhereWithAggregatesInput | GenerationLogScalarWhereWithAggregatesInput[]
    OR?: GenerationLogScalarWhereWithAggregatesInput[]
    NOT?: GenerationLogScalarWhereWithAggregatesInput | GenerationLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GenerationLog"> | number
    templateId?: IntNullableWithAggregatesFilter<"GenerationLog"> | number | null
    generatedBy?: IntWithAggregatesFilter<"GenerationLog"> | number
    generationType?: StringWithAggregatesFilter<"GenerationLog"> | string
    periodStart?: DateTimeWithAggregatesFilter<"GenerationLog"> | Date | string
    periodEnd?: DateTimeWithAggregatesFilter<"GenerationLog"> | Date | string
    totalSchedulesCreated?: IntWithAggregatesFilter<"GenerationLog"> | number
    totalEmployeesAffected?: IntWithAggregatesFilter<"GenerationLog"> | number
    parameters?: JsonWithAggregatesFilter<"GenerationLog">
    constraints?: JsonNullableWithAggregatesFilter<"GenerationLog">
    coverageAchieved?: FloatNullableWithAggregatesFilter<"GenerationLog"> | number | null
    employeeSatisfaction?: FloatNullableWithAggregatesFilter<"GenerationLog"> | number | null
    constraintViolations?: JsonNullableWithAggregatesFilter<"GenerationLog">
    warnings?: JsonNullableWithAggregatesFilter<"GenerationLog">
    errors?: JsonNullableWithAggregatesFilter<"GenerationLog">
    executionTime?: IntNullableWithAggregatesFilter<"GenerationLog"> | number | null
    algorithmVersion?: StringWithAggregatesFilter<"GenerationLog"> | string
    status?: StringWithAggregatesFilter<"GenerationLog"> | string
    notes?: StringNullableWithAggregatesFilter<"GenerationLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"GenerationLog"> | Date | string
  }

  export type EmployeeCertificationWhereInput = {
    AND?: EmployeeCertificationWhereInput | EmployeeCertificationWhereInput[]
    OR?: EmployeeCertificationWhereInput[]
    NOT?: EmployeeCertificationWhereInput | EmployeeCertificationWhereInput[]
    id?: IntFilter<"EmployeeCertification"> | number
    employeeId?: IntFilter<"EmployeeCertification"> | number
    certificationName?: StringFilter<"EmployeeCertification"> | string
    certificationBody?: StringNullableFilter<"EmployeeCertification"> | string | null
    issueDate?: DateTimeFilter<"EmployeeCertification"> | Date | string
    expiryDate?: DateTimeNullableFilter<"EmployeeCertification"> | Date | string | null
    certificateNumber?: StringNullableFilter<"EmployeeCertification"> | string | null
    isActive?: BoolFilter<"EmployeeCertification"> | boolean
    verificationStatus?: StringFilter<"EmployeeCertification"> | string
    attachmentUrl?: StringNullableFilter<"EmployeeCertification"> | string | null
    createdAt?: DateTimeFilter<"EmployeeCertification"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeCertification"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type EmployeeCertificationOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    certificationName?: SortOrder
    certificationBody?: SortOrderInput | SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    certificateNumber?: SortOrderInput | SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    attachmentUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
  }

  export type EmployeeCertificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmployeeCertificationWhereInput | EmployeeCertificationWhereInput[]
    OR?: EmployeeCertificationWhereInput[]
    NOT?: EmployeeCertificationWhereInput | EmployeeCertificationWhereInput[]
    employeeId?: IntFilter<"EmployeeCertification"> | number
    certificationName?: StringFilter<"EmployeeCertification"> | string
    certificationBody?: StringNullableFilter<"EmployeeCertification"> | string | null
    issueDate?: DateTimeFilter<"EmployeeCertification"> | Date | string
    expiryDate?: DateTimeNullableFilter<"EmployeeCertification"> | Date | string | null
    certificateNumber?: StringNullableFilter<"EmployeeCertification"> | string | null
    isActive?: BoolFilter<"EmployeeCertification"> | boolean
    verificationStatus?: StringFilter<"EmployeeCertification"> | string
    attachmentUrl?: StringNullableFilter<"EmployeeCertification"> | string | null
    createdAt?: DateTimeFilter<"EmployeeCertification"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeCertification"> | Date | string
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type EmployeeCertificationOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    certificationName?: SortOrder
    certificationBody?: SortOrderInput | SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    certificateNumber?: SortOrderInput | SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    attachmentUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployeeCertificationCountOrderByAggregateInput
    _avg?: EmployeeCertificationAvgOrderByAggregateInput
    _max?: EmployeeCertificationMaxOrderByAggregateInput
    _min?: EmployeeCertificationMinOrderByAggregateInput
    _sum?: EmployeeCertificationSumOrderByAggregateInput
  }

  export type EmployeeCertificationScalarWhereWithAggregatesInput = {
    AND?: EmployeeCertificationScalarWhereWithAggregatesInput | EmployeeCertificationScalarWhereWithAggregatesInput[]
    OR?: EmployeeCertificationScalarWhereWithAggregatesInput[]
    NOT?: EmployeeCertificationScalarWhereWithAggregatesInput | EmployeeCertificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmployeeCertification"> | number
    employeeId?: IntWithAggregatesFilter<"EmployeeCertification"> | number
    certificationName?: StringWithAggregatesFilter<"EmployeeCertification"> | string
    certificationBody?: StringNullableWithAggregatesFilter<"EmployeeCertification"> | string | null
    issueDate?: DateTimeWithAggregatesFilter<"EmployeeCertification"> | Date | string
    expiryDate?: DateTimeNullableWithAggregatesFilter<"EmployeeCertification"> | Date | string | null
    certificateNumber?: StringNullableWithAggregatesFilter<"EmployeeCertification"> | string | null
    isActive?: BoolWithAggregatesFilter<"EmployeeCertification"> | boolean
    verificationStatus?: StringWithAggregatesFilter<"EmployeeCertification"> | string
    attachmentUrl?: StringNullableWithAggregatesFilter<"EmployeeCertification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmployeeCertification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmployeeCertification"> | Date | string
  }

  export type OperatingHoursTemplateWhereInput = {
    AND?: OperatingHoursTemplateWhereInput | OperatingHoursTemplateWhereInput[]
    OR?: OperatingHoursTemplateWhereInput[]
    NOT?: OperatingHoursTemplateWhereInput | OperatingHoursTemplateWhereInput[]
    id?: IntFilter<"OperatingHoursTemplate"> | number
    companyId?: IntFilter<"OperatingHoursTemplate"> | number
    templateName?: StringFilter<"OperatingHoursTemplate"> | string
    description?: StringNullableFilter<"OperatingHoursTemplate"> | string | null
    isDefault?: BoolFilter<"OperatingHoursTemplate"> | boolean
    isActive?: BoolFilter<"OperatingHoursTemplate"> | boolean
    timezone?: StringFilter<"OperatingHoursTemplate"> | string
    createdBy?: IntFilter<"OperatingHoursTemplate"> | number
    createdAt?: DateTimeFilter<"OperatingHoursTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"OperatingHoursTemplate"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    dailyHours?: DailyOperatingHoursListRelationFilter
    staffingRules?: StaffingRuleListRelationFilter
    scheduleOverrides?: ScheduleOverrideListRelationFilter
  }

  export type OperatingHoursTemplateOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    templateName?: SortOrder
    description?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    timezone?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    dailyHours?: DailyOperatingHoursOrderByRelationAggregateInput
    staffingRules?: StaffingRuleOrderByRelationAggregateInput
    scheduleOverrides?: ScheduleOverrideOrderByRelationAggregateInput
  }

  export type OperatingHoursTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OperatingHoursTemplateWhereInput | OperatingHoursTemplateWhereInput[]
    OR?: OperatingHoursTemplateWhereInput[]
    NOT?: OperatingHoursTemplateWhereInput | OperatingHoursTemplateWhereInput[]
    companyId?: IntFilter<"OperatingHoursTemplate"> | number
    templateName?: StringFilter<"OperatingHoursTemplate"> | string
    description?: StringNullableFilter<"OperatingHoursTemplate"> | string | null
    isDefault?: BoolFilter<"OperatingHoursTemplate"> | boolean
    isActive?: BoolFilter<"OperatingHoursTemplate"> | boolean
    timezone?: StringFilter<"OperatingHoursTemplate"> | string
    createdBy?: IntFilter<"OperatingHoursTemplate"> | number
    createdAt?: DateTimeFilter<"OperatingHoursTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"OperatingHoursTemplate"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    dailyHours?: DailyOperatingHoursListRelationFilter
    staffingRules?: StaffingRuleListRelationFilter
    scheduleOverrides?: ScheduleOverrideListRelationFilter
  }, "id">

  export type OperatingHoursTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    templateName?: SortOrder
    description?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    timezone?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OperatingHoursTemplateCountOrderByAggregateInput
    _avg?: OperatingHoursTemplateAvgOrderByAggregateInput
    _max?: OperatingHoursTemplateMaxOrderByAggregateInput
    _min?: OperatingHoursTemplateMinOrderByAggregateInput
    _sum?: OperatingHoursTemplateSumOrderByAggregateInput
  }

  export type OperatingHoursTemplateScalarWhereWithAggregatesInput = {
    AND?: OperatingHoursTemplateScalarWhereWithAggregatesInput | OperatingHoursTemplateScalarWhereWithAggregatesInput[]
    OR?: OperatingHoursTemplateScalarWhereWithAggregatesInput[]
    NOT?: OperatingHoursTemplateScalarWhereWithAggregatesInput | OperatingHoursTemplateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OperatingHoursTemplate"> | number
    companyId?: IntWithAggregatesFilter<"OperatingHoursTemplate"> | number
    templateName?: StringWithAggregatesFilter<"OperatingHoursTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"OperatingHoursTemplate"> | string | null
    isDefault?: BoolWithAggregatesFilter<"OperatingHoursTemplate"> | boolean
    isActive?: BoolWithAggregatesFilter<"OperatingHoursTemplate"> | boolean
    timezone?: StringWithAggregatesFilter<"OperatingHoursTemplate"> | string
    createdBy?: IntWithAggregatesFilter<"OperatingHoursTemplate"> | number
    createdAt?: DateTimeWithAggregatesFilter<"OperatingHoursTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OperatingHoursTemplate"> | Date | string
  }

  export type DailyOperatingHoursWhereInput = {
    AND?: DailyOperatingHoursWhereInput | DailyOperatingHoursWhereInput[]
    OR?: DailyOperatingHoursWhereInput[]
    NOT?: DailyOperatingHoursWhereInput | DailyOperatingHoursWhereInput[]
    id?: IntFilter<"DailyOperatingHours"> | number
    templateId?: IntFilter<"DailyOperatingHours"> | number
    dayOfWeek?: IntFilter<"DailyOperatingHours"> | number
    isOpen?: BoolFilter<"DailyOperatingHours"> | boolean
    openTime?: StringNullableFilter<"DailyOperatingHours"> | string | null
    closeTime?: StringNullableFilter<"DailyOperatingHours"> | string | null
    breakStart?: StringNullableFilter<"DailyOperatingHours"> | string | null
    breakEnd?: StringNullableFilter<"DailyOperatingHours"> | string | null
    minStaff?: IntFilter<"DailyOperatingHours"> | number
    maxStaff?: IntNullableFilter<"DailyOperatingHours"> | number | null
    notes?: StringNullableFilter<"DailyOperatingHours"> | string | null
    template?: XOR<OperatingHoursTemplateRelationFilter, OperatingHoursTemplateWhereInput>
    timeSlots?: HourlyStaffingRuleListRelationFilter
  }

  export type DailyOperatingHoursOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrder
    dayOfWeek?: SortOrder
    isOpen?: SortOrder
    openTime?: SortOrderInput | SortOrder
    closeTime?: SortOrderInput | SortOrder
    breakStart?: SortOrderInput | SortOrder
    breakEnd?: SortOrderInput | SortOrder
    minStaff?: SortOrder
    maxStaff?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    template?: OperatingHoursTemplateOrderByWithRelationInput
    timeSlots?: HourlyStaffingRuleOrderByRelationAggregateInput
  }

  export type DailyOperatingHoursWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    templateId_dayOfWeek?: DailyOperatingHoursTemplateIdDayOfWeekCompoundUniqueInput
    AND?: DailyOperatingHoursWhereInput | DailyOperatingHoursWhereInput[]
    OR?: DailyOperatingHoursWhereInput[]
    NOT?: DailyOperatingHoursWhereInput | DailyOperatingHoursWhereInput[]
    templateId?: IntFilter<"DailyOperatingHours"> | number
    dayOfWeek?: IntFilter<"DailyOperatingHours"> | number
    isOpen?: BoolFilter<"DailyOperatingHours"> | boolean
    openTime?: StringNullableFilter<"DailyOperatingHours"> | string | null
    closeTime?: StringNullableFilter<"DailyOperatingHours"> | string | null
    breakStart?: StringNullableFilter<"DailyOperatingHours"> | string | null
    breakEnd?: StringNullableFilter<"DailyOperatingHours"> | string | null
    minStaff?: IntFilter<"DailyOperatingHours"> | number
    maxStaff?: IntNullableFilter<"DailyOperatingHours"> | number | null
    notes?: StringNullableFilter<"DailyOperatingHours"> | string | null
    template?: XOR<OperatingHoursTemplateRelationFilter, OperatingHoursTemplateWhereInput>
    timeSlots?: HourlyStaffingRuleListRelationFilter
  }, "id" | "templateId_dayOfWeek">

  export type DailyOperatingHoursOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrder
    dayOfWeek?: SortOrder
    isOpen?: SortOrder
    openTime?: SortOrderInput | SortOrder
    closeTime?: SortOrderInput | SortOrder
    breakStart?: SortOrderInput | SortOrder
    breakEnd?: SortOrderInput | SortOrder
    minStaff?: SortOrder
    maxStaff?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: DailyOperatingHoursCountOrderByAggregateInput
    _avg?: DailyOperatingHoursAvgOrderByAggregateInput
    _max?: DailyOperatingHoursMaxOrderByAggregateInput
    _min?: DailyOperatingHoursMinOrderByAggregateInput
    _sum?: DailyOperatingHoursSumOrderByAggregateInput
  }

  export type DailyOperatingHoursScalarWhereWithAggregatesInput = {
    AND?: DailyOperatingHoursScalarWhereWithAggregatesInput | DailyOperatingHoursScalarWhereWithAggregatesInput[]
    OR?: DailyOperatingHoursScalarWhereWithAggregatesInput[]
    NOT?: DailyOperatingHoursScalarWhereWithAggregatesInput | DailyOperatingHoursScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DailyOperatingHours"> | number
    templateId?: IntWithAggregatesFilter<"DailyOperatingHours"> | number
    dayOfWeek?: IntWithAggregatesFilter<"DailyOperatingHours"> | number
    isOpen?: BoolWithAggregatesFilter<"DailyOperatingHours"> | boolean
    openTime?: StringNullableWithAggregatesFilter<"DailyOperatingHours"> | string | null
    closeTime?: StringNullableWithAggregatesFilter<"DailyOperatingHours"> | string | null
    breakStart?: StringNullableWithAggregatesFilter<"DailyOperatingHours"> | string | null
    breakEnd?: StringNullableWithAggregatesFilter<"DailyOperatingHours"> | string | null
    minStaff?: IntWithAggregatesFilter<"DailyOperatingHours"> | number
    maxStaff?: IntNullableWithAggregatesFilter<"DailyOperatingHours"> | number | null
    notes?: StringNullableWithAggregatesFilter<"DailyOperatingHours"> | string | null
  }

  export type HourlyStaffingRuleWhereInput = {
    AND?: HourlyStaffingRuleWhereInput | HourlyStaffingRuleWhereInput[]
    OR?: HourlyStaffingRuleWhereInput[]
    NOT?: HourlyStaffingRuleWhereInput | HourlyStaffingRuleWhereInput[]
    id?: IntFilter<"HourlyStaffingRule"> | number
    dailyHoursId?: IntFilter<"HourlyStaffingRule"> | number
    hourSlot?: IntFilter<"HourlyStaffingRule"> | number
    requiredStaff?: IntFilter<"HourlyStaffingRule"> | number
    preferredStaff?: IntNullableFilter<"HourlyStaffingRule"> | number | null
    maxStaff?: IntNullableFilter<"HourlyStaffingRule"> | number | null
    priority?: StringFilter<"HourlyStaffingRule"> | string
    skillRequirement?: JsonNullableFilter<"HourlyStaffingRule">
    notes?: StringNullableFilter<"HourlyStaffingRule"> | string | null
    dailyHours?: XOR<DailyOperatingHoursRelationFilter, DailyOperatingHoursWhereInput>
  }

  export type HourlyStaffingRuleOrderByWithRelationInput = {
    id?: SortOrder
    dailyHoursId?: SortOrder
    hourSlot?: SortOrder
    requiredStaff?: SortOrder
    preferredStaff?: SortOrderInput | SortOrder
    maxStaff?: SortOrderInput | SortOrder
    priority?: SortOrder
    skillRequirement?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    dailyHours?: DailyOperatingHoursOrderByWithRelationInput
  }

  export type HourlyStaffingRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    dailyHoursId_hourSlot?: HourlyStaffingRuleDailyHoursIdHourSlotCompoundUniqueInput
    AND?: HourlyStaffingRuleWhereInput | HourlyStaffingRuleWhereInput[]
    OR?: HourlyStaffingRuleWhereInput[]
    NOT?: HourlyStaffingRuleWhereInput | HourlyStaffingRuleWhereInput[]
    dailyHoursId?: IntFilter<"HourlyStaffingRule"> | number
    hourSlot?: IntFilter<"HourlyStaffingRule"> | number
    requiredStaff?: IntFilter<"HourlyStaffingRule"> | number
    preferredStaff?: IntNullableFilter<"HourlyStaffingRule"> | number | null
    maxStaff?: IntNullableFilter<"HourlyStaffingRule"> | number | null
    priority?: StringFilter<"HourlyStaffingRule"> | string
    skillRequirement?: JsonNullableFilter<"HourlyStaffingRule">
    notes?: StringNullableFilter<"HourlyStaffingRule"> | string | null
    dailyHours?: XOR<DailyOperatingHoursRelationFilter, DailyOperatingHoursWhereInput>
  }, "id" | "dailyHoursId_hourSlot">

  export type HourlyStaffingRuleOrderByWithAggregationInput = {
    id?: SortOrder
    dailyHoursId?: SortOrder
    hourSlot?: SortOrder
    requiredStaff?: SortOrder
    preferredStaff?: SortOrderInput | SortOrder
    maxStaff?: SortOrderInput | SortOrder
    priority?: SortOrder
    skillRequirement?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: HourlyStaffingRuleCountOrderByAggregateInput
    _avg?: HourlyStaffingRuleAvgOrderByAggregateInput
    _max?: HourlyStaffingRuleMaxOrderByAggregateInput
    _min?: HourlyStaffingRuleMinOrderByAggregateInput
    _sum?: HourlyStaffingRuleSumOrderByAggregateInput
  }

  export type HourlyStaffingRuleScalarWhereWithAggregatesInput = {
    AND?: HourlyStaffingRuleScalarWhereWithAggregatesInput | HourlyStaffingRuleScalarWhereWithAggregatesInput[]
    OR?: HourlyStaffingRuleScalarWhereWithAggregatesInput[]
    NOT?: HourlyStaffingRuleScalarWhereWithAggregatesInput | HourlyStaffingRuleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HourlyStaffingRule"> | number
    dailyHoursId?: IntWithAggregatesFilter<"HourlyStaffingRule"> | number
    hourSlot?: IntWithAggregatesFilter<"HourlyStaffingRule"> | number
    requiredStaff?: IntWithAggregatesFilter<"HourlyStaffingRule"> | number
    preferredStaff?: IntNullableWithAggregatesFilter<"HourlyStaffingRule"> | number | null
    maxStaff?: IntNullableWithAggregatesFilter<"HourlyStaffingRule"> | number | null
    priority?: StringWithAggregatesFilter<"HourlyStaffingRule"> | string
    skillRequirement?: JsonNullableWithAggregatesFilter<"HourlyStaffingRule">
    notes?: StringNullableWithAggregatesFilter<"HourlyStaffingRule"> | string | null
  }

  export type StaffingRuleWhereInput = {
    AND?: StaffingRuleWhereInput | StaffingRuleWhereInput[]
    OR?: StaffingRuleWhereInput[]
    NOT?: StaffingRuleWhereInput | StaffingRuleWhereInput[]
    id?: IntFilter<"StaffingRule"> | number
    templateId?: IntFilter<"StaffingRule"> | number
    ruleName?: StringFilter<"StaffingRule"> | string
    ruleType?: StringFilter<"StaffingRule"> | string
    conditions?: JsonFilter<"StaffingRule">
    staffingRequirements?: JsonFilter<"StaffingRule">
    priority?: IntFilter<"StaffingRule"> | number
    isActive?: BoolFilter<"StaffingRule"> | boolean
    effectiveFrom?: DateTimeNullableFilter<"StaffingRule"> | Date | string | null
    effectiveTo?: DateTimeNullableFilter<"StaffingRule"> | Date | string | null
    createdAt?: DateTimeFilter<"StaffingRule"> | Date | string
    updatedAt?: DateTimeFilter<"StaffingRule"> | Date | string
    template?: XOR<OperatingHoursTemplateRelationFilter, OperatingHoursTemplateWhereInput>
  }

  export type StaffingRuleOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrder
    ruleName?: SortOrder
    ruleType?: SortOrder
    conditions?: SortOrder
    staffingRequirements?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrderInput | SortOrder
    effectiveTo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    template?: OperatingHoursTemplateOrderByWithRelationInput
  }

  export type StaffingRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StaffingRuleWhereInput | StaffingRuleWhereInput[]
    OR?: StaffingRuleWhereInput[]
    NOT?: StaffingRuleWhereInput | StaffingRuleWhereInput[]
    templateId?: IntFilter<"StaffingRule"> | number
    ruleName?: StringFilter<"StaffingRule"> | string
    ruleType?: StringFilter<"StaffingRule"> | string
    conditions?: JsonFilter<"StaffingRule">
    staffingRequirements?: JsonFilter<"StaffingRule">
    priority?: IntFilter<"StaffingRule"> | number
    isActive?: BoolFilter<"StaffingRule"> | boolean
    effectiveFrom?: DateTimeNullableFilter<"StaffingRule"> | Date | string | null
    effectiveTo?: DateTimeNullableFilter<"StaffingRule"> | Date | string | null
    createdAt?: DateTimeFilter<"StaffingRule"> | Date | string
    updatedAt?: DateTimeFilter<"StaffingRule"> | Date | string
    template?: XOR<OperatingHoursTemplateRelationFilter, OperatingHoursTemplateWhereInput>
  }, "id">

  export type StaffingRuleOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrder
    ruleName?: SortOrder
    ruleType?: SortOrder
    conditions?: SortOrder
    staffingRequirements?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrderInput | SortOrder
    effectiveTo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffingRuleCountOrderByAggregateInput
    _avg?: StaffingRuleAvgOrderByAggregateInput
    _max?: StaffingRuleMaxOrderByAggregateInput
    _min?: StaffingRuleMinOrderByAggregateInput
    _sum?: StaffingRuleSumOrderByAggregateInput
  }

  export type StaffingRuleScalarWhereWithAggregatesInput = {
    AND?: StaffingRuleScalarWhereWithAggregatesInput | StaffingRuleScalarWhereWithAggregatesInput[]
    OR?: StaffingRuleScalarWhereWithAggregatesInput[]
    NOT?: StaffingRuleScalarWhereWithAggregatesInput | StaffingRuleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StaffingRule"> | number
    templateId?: IntWithAggregatesFilter<"StaffingRule"> | number
    ruleName?: StringWithAggregatesFilter<"StaffingRule"> | string
    ruleType?: StringWithAggregatesFilter<"StaffingRule"> | string
    conditions?: JsonWithAggregatesFilter<"StaffingRule">
    staffingRequirements?: JsonWithAggregatesFilter<"StaffingRule">
    priority?: IntWithAggregatesFilter<"StaffingRule"> | number
    isActive?: BoolWithAggregatesFilter<"StaffingRule"> | boolean
    effectiveFrom?: DateTimeNullableWithAggregatesFilter<"StaffingRule"> | Date | string | null
    effectiveTo?: DateTimeNullableWithAggregatesFilter<"StaffingRule"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StaffingRule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StaffingRule"> | Date | string
  }

  export type ScheduleOverrideWhereInput = {
    AND?: ScheduleOverrideWhereInput | ScheduleOverrideWhereInput[]
    OR?: ScheduleOverrideWhereInput[]
    NOT?: ScheduleOverrideWhereInput | ScheduleOverrideWhereInput[]
    id?: IntFilter<"ScheduleOverride"> | number
    templateId?: IntFilter<"ScheduleOverride"> | number
    overrideDate?: DateTimeFilter<"ScheduleOverride"> | Date | string
    overrideType?: StringFilter<"ScheduleOverride"> | string
    customHours?: JsonNullableFilter<"ScheduleOverride">
    staffingOverride?: JsonNullableFilter<"ScheduleOverride">
    reason?: StringNullableFilter<"ScheduleOverride"> | string | null
    isActive?: BoolFilter<"ScheduleOverride"> | boolean
    createdBy?: IntFilter<"ScheduleOverride"> | number
    createdAt?: DateTimeFilter<"ScheduleOverride"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleOverride"> | Date | string
    template?: XOR<OperatingHoursTemplateRelationFilter, OperatingHoursTemplateWhereInput>
  }

  export type ScheduleOverrideOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrder
    overrideDate?: SortOrder
    overrideType?: SortOrder
    customHours?: SortOrderInput | SortOrder
    staffingOverride?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    template?: OperatingHoursTemplateOrderByWithRelationInput
  }

  export type ScheduleOverrideWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    templateId_overrideDate?: ScheduleOverrideTemplateIdOverrideDateCompoundUniqueInput
    AND?: ScheduleOverrideWhereInput | ScheduleOverrideWhereInput[]
    OR?: ScheduleOverrideWhereInput[]
    NOT?: ScheduleOverrideWhereInput | ScheduleOverrideWhereInput[]
    templateId?: IntFilter<"ScheduleOverride"> | number
    overrideDate?: DateTimeFilter<"ScheduleOverride"> | Date | string
    overrideType?: StringFilter<"ScheduleOverride"> | string
    customHours?: JsonNullableFilter<"ScheduleOverride">
    staffingOverride?: JsonNullableFilter<"ScheduleOverride">
    reason?: StringNullableFilter<"ScheduleOverride"> | string | null
    isActive?: BoolFilter<"ScheduleOverride"> | boolean
    createdBy?: IntFilter<"ScheduleOverride"> | number
    createdAt?: DateTimeFilter<"ScheduleOverride"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleOverride"> | Date | string
    template?: XOR<OperatingHoursTemplateRelationFilter, OperatingHoursTemplateWhereInput>
  }, "id" | "templateId_overrideDate">

  export type ScheduleOverrideOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrder
    overrideDate?: SortOrder
    overrideType?: SortOrder
    customHours?: SortOrderInput | SortOrder
    staffingOverride?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduleOverrideCountOrderByAggregateInput
    _avg?: ScheduleOverrideAvgOrderByAggregateInput
    _max?: ScheduleOverrideMaxOrderByAggregateInput
    _min?: ScheduleOverrideMinOrderByAggregateInput
    _sum?: ScheduleOverrideSumOrderByAggregateInput
  }

  export type ScheduleOverrideScalarWhereWithAggregatesInput = {
    AND?: ScheduleOverrideScalarWhereWithAggregatesInput | ScheduleOverrideScalarWhereWithAggregatesInput[]
    OR?: ScheduleOverrideScalarWhereWithAggregatesInput[]
    NOT?: ScheduleOverrideScalarWhereWithAggregatesInput | ScheduleOverrideScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScheduleOverride"> | number
    templateId?: IntWithAggregatesFilter<"ScheduleOverride"> | number
    overrideDate?: DateTimeWithAggregatesFilter<"ScheduleOverride"> | Date | string
    overrideType?: StringWithAggregatesFilter<"ScheduleOverride"> | string
    customHours?: JsonNullableWithAggregatesFilter<"ScheduleOverride">
    staffingOverride?: JsonNullableWithAggregatesFilter<"ScheduleOverride">
    reason?: StringNullableWithAggregatesFilter<"ScheduleOverride"> | string | null
    isActive?: BoolWithAggregatesFilter<"ScheduleOverride"> | boolean
    createdBy?: IntWithAggregatesFilter<"ScheduleOverride"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ScheduleOverride"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScheduleOverride"> | Date | string
  }

  export type StaffingAnalyticsWhereInput = {
    AND?: StaffingAnalyticsWhereInput | StaffingAnalyticsWhereInput[]
    OR?: StaffingAnalyticsWhereInput[]
    NOT?: StaffingAnalyticsWhereInput | StaffingAnalyticsWhereInput[]
    id?: IntFilter<"StaffingAnalytics"> | number
    companyId?: IntFilter<"StaffingAnalytics"> | number
    analysisDate?: DateTimeFilter<"StaffingAnalytics"> | Date | string
    dayOfWeek?: IntFilter<"StaffingAnalytics"> | number
    totalScheduledHours?: FloatFilter<"StaffingAnalytics"> | number
    totalRequiredHours?: FloatFilter<"StaffingAnalytics"> | number
    coverageRate?: FloatFilter<"StaffingAnalytics"> | number
    utilizationRate?: FloatFilter<"StaffingAnalytics"> | number
    shortfallHours?: FloatFilter<"StaffingAnalytics"> | number
    overstaffingHours?: FloatFilter<"StaffingAnalytics"> | number
    averageStaffPerHour?: FloatFilter<"StaffingAnalytics"> | number
    peakStaffingHour?: IntNullableFilter<"StaffingAnalytics"> | number | null
    lowStaffingHour?: IntNullableFilter<"StaffingAnalytics"> | number | null
    hourlyBreakdown?: JsonFilter<"StaffingAnalytics">
    departmentBreakdown?: JsonNullableFilter<"StaffingAnalytics">
    skillGaps?: JsonNullableFilter<"StaffingAnalytics">
    costAnalysis?: JsonNullableFilter<"StaffingAnalytics">
    recommendations?: JsonNullableFilter<"StaffingAnalytics">
    createdAt?: DateTimeFilter<"StaffingAnalytics"> | Date | string
  }

  export type StaffingAnalyticsOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    analysisDate?: SortOrder
    dayOfWeek?: SortOrder
    totalScheduledHours?: SortOrder
    totalRequiredHours?: SortOrder
    coverageRate?: SortOrder
    utilizationRate?: SortOrder
    shortfallHours?: SortOrder
    overstaffingHours?: SortOrder
    averageStaffPerHour?: SortOrder
    peakStaffingHour?: SortOrderInput | SortOrder
    lowStaffingHour?: SortOrderInput | SortOrder
    hourlyBreakdown?: SortOrder
    departmentBreakdown?: SortOrderInput | SortOrder
    skillGaps?: SortOrderInput | SortOrder
    costAnalysis?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type StaffingAnalyticsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    companyId_analysisDate?: StaffingAnalyticsCompanyIdAnalysisDateCompoundUniqueInput
    AND?: StaffingAnalyticsWhereInput | StaffingAnalyticsWhereInput[]
    OR?: StaffingAnalyticsWhereInput[]
    NOT?: StaffingAnalyticsWhereInput | StaffingAnalyticsWhereInput[]
    companyId?: IntFilter<"StaffingAnalytics"> | number
    analysisDate?: DateTimeFilter<"StaffingAnalytics"> | Date | string
    dayOfWeek?: IntFilter<"StaffingAnalytics"> | number
    totalScheduledHours?: FloatFilter<"StaffingAnalytics"> | number
    totalRequiredHours?: FloatFilter<"StaffingAnalytics"> | number
    coverageRate?: FloatFilter<"StaffingAnalytics"> | number
    utilizationRate?: FloatFilter<"StaffingAnalytics"> | number
    shortfallHours?: FloatFilter<"StaffingAnalytics"> | number
    overstaffingHours?: FloatFilter<"StaffingAnalytics"> | number
    averageStaffPerHour?: FloatFilter<"StaffingAnalytics"> | number
    peakStaffingHour?: IntNullableFilter<"StaffingAnalytics"> | number | null
    lowStaffingHour?: IntNullableFilter<"StaffingAnalytics"> | number | null
    hourlyBreakdown?: JsonFilter<"StaffingAnalytics">
    departmentBreakdown?: JsonNullableFilter<"StaffingAnalytics">
    skillGaps?: JsonNullableFilter<"StaffingAnalytics">
    costAnalysis?: JsonNullableFilter<"StaffingAnalytics">
    recommendations?: JsonNullableFilter<"StaffingAnalytics">
    createdAt?: DateTimeFilter<"StaffingAnalytics"> | Date | string
  }, "id" | "companyId_analysisDate">

  export type StaffingAnalyticsOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    analysisDate?: SortOrder
    dayOfWeek?: SortOrder
    totalScheduledHours?: SortOrder
    totalRequiredHours?: SortOrder
    coverageRate?: SortOrder
    utilizationRate?: SortOrder
    shortfallHours?: SortOrder
    overstaffingHours?: SortOrder
    averageStaffPerHour?: SortOrder
    peakStaffingHour?: SortOrderInput | SortOrder
    lowStaffingHour?: SortOrderInput | SortOrder
    hourlyBreakdown?: SortOrder
    departmentBreakdown?: SortOrderInput | SortOrder
    skillGaps?: SortOrderInput | SortOrder
    costAnalysis?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StaffingAnalyticsCountOrderByAggregateInput
    _avg?: StaffingAnalyticsAvgOrderByAggregateInput
    _max?: StaffingAnalyticsMaxOrderByAggregateInput
    _min?: StaffingAnalyticsMinOrderByAggregateInput
    _sum?: StaffingAnalyticsSumOrderByAggregateInput
  }

  export type StaffingAnalyticsScalarWhereWithAggregatesInput = {
    AND?: StaffingAnalyticsScalarWhereWithAggregatesInput | StaffingAnalyticsScalarWhereWithAggregatesInput[]
    OR?: StaffingAnalyticsScalarWhereWithAggregatesInput[]
    NOT?: StaffingAnalyticsScalarWhereWithAggregatesInput | StaffingAnalyticsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StaffingAnalytics"> | number
    companyId?: IntWithAggregatesFilter<"StaffingAnalytics"> | number
    analysisDate?: DateTimeWithAggregatesFilter<"StaffingAnalytics"> | Date | string
    dayOfWeek?: IntWithAggregatesFilter<"StaffingAnalytics"> | number
    totalScheduledHours?: FloatWithAggregatesFilter<"StaffingAnalytics"> | number
    totalRequiredHours?: FloatWithAggregatesFilter<"StaffingAnalytics"> | number
    coverageRate?: FloatWithAggregatesFilter<"StaffingAnalytics"> | number
    utilizationRate?: FloatWithAggregatesFilter<"StaffingAnalytics"> | number
    shortfallHours?: FloatWithAggregatesFilter<"StaffingAnalytics"> | number
    overstaffingHours?: FloatWithAggregatesFilter<"StaffingAnalytics"> | number
    averageStaffPerHour?: FloatWithAggregatesFilter<"StaffingAnalytics"> | number
    peakStaffingHour?: IntNullableWithAggregatesFilter<"StaffingAnalytics"> | number | null
    lowStaffingHour?: IntNullableWithAggregatesFilter<"StaffingAnalytics"> | number | null
    hourlyBreakdown?: JsonWithAggregatesFilter<"StaffingAnalytics">
    departmentBreakdown?: JsonNullableWithAggregatesFilter<"StaffingAnalytics">
    skillGaps?: JsonNullableWithAggregatesFilter<"StaffingAnalytics">
    costAnalysis?: JsonNullableWithAggregatesFilter<"StaffingAnalytics">
    recommendations?: JsonNullableWithAggregatesFilter<"StaffingAnalytics">
    createdAt?: DateTimeWithAggregatesFilter<"StaffingAnalytics"> | Date | string
  }

  export type ScheduleDraftWhereInput = {
    AND?: ScheduleDraftWhereInput | ScheduleDraftWhereInput[]
    OR?: ScheduleDraftWhereInput[]
    NOT?: ScheduleDraftWhereInput | ScheduleDraftWhereInput[]
    id?: IntFilter<"ScheduleDraft"> | number
    companyId?: IntFilter<"ScheduleDraft"> | number
    name?: StringFilter<"ScheduleDraft"> | string
    description?: StringNullableFilter<"ScheduleDraft"> | string | null
    version?: StringFilter<"ScheduleDraft"> | string
    status?: StringFilter<"ScheduleDraft"> | string
    periodStart?: DateTimeFilter<"ScheduleDraft"> | Date | string
    periodEnd?: DateTimeFilter<"ScheduleDraft"> | Date | string
    basedOnTemplateId?: IntNullableFilter<"ScheduleDraft"> | number | null
    basedOnDraftId?: IntNullableFilter<"ScheduleDraft"> | number | null
    createdBy?: IntFilter<"ScheduleDraft"> | number
    createdAt?: DateTimeFilter<"ScheduleDraft"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleDraft"> | Date | string
    approvedBy?: IntNullableFilter<"ScheduleDraft"> | number | null
    approvedAt?: DateTimeNullableFilter<"ScheduleDraft"> | Date | string | null
    activatedAt?: DateTimeNullableFilter<"ScheduleDraft"> | Date | string | null
    archivedAt?: DateTimeNullableFilter<"ScheduleDraft"> | Date | string | null
    metadata?: JsonNullableFilter<"ScheduleDraft">
    notes?: StringNullableFilter<"ScheduleDraft"> | string | null
    items?: ScheduleDraftItemListRelationFilter
    scheduleTemplate?: XOR<ScheduleTemplateNullableRelationFilter, ScheduleTemplateWhereInput> | null
    parentDraft?: XOR<ScheduleDraftNullableRelationFilter, ScheduleDraftWhereInput> | null
    versionDrafts?: ScheduleDraftListRelationFilter
  }

  export type ScheduleDraftOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    version?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    basedOnTemplateId?: SortOrderInput | SortOrder
    basedOnDraftId?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    activatedAt?: SortOrderInput | SortOrder
    archivedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    items?: ScheduleDraftItemOrderByRelationAggregateInput
    scheduleTemplate?: ScheduleTemplateOrderByWithRelationInput
    parentDraft?: ScheduleDraftOrderByWithRelationInput
    versionDrafts?: ScheduleDraftOrderByRelationAggregateInput
  }

  export type ScheduleDraftWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleDraftWhereInput | ScheduleDraftWhereInput[]
    OR?: ScheduleDraftWhereInput[]
    NOT?: ScheduleDraftWhereInput | ScheduleDraftWhereInput[]
    companyId?: IntFilter<"ScheduleDraft"> | number
    name?: StringFilter<"ScheduleDraft"> | string
    description?: StringNullableFilter<"ScheduleDraft"> | string | null
    version?: StringFilter<"ScheduleDraft"> | string
    status?: StringFilter<"ScheduleDraft"> | string
    periodStart?: DateTimeFilter<"ScheduleDraft"> | Date | string
    periodEnd?: DateTimeFilter<"ScheduleDraft"> | Date | string
    basedOnTemplateId?: IntNullableFilter<"ScheduleDraft"> | number | null
    basedOnDraftId?: IntNullableFilter<"ScheduleDraft"> | number | null
    createdBy?: IntFilter<"ScheduleDraft"> | number
    createdAt?: DateTimeFilter<"ScheduleDraft"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleDraft"> | Date | string
    approvedBy?: IntNullableFilter<"ScheduleDraft"> | number | null
    approvedAt?: DateTimeNullableFilter<"ScheduleDraft"> | Date | string | null
    activatedAt?: DateTimeNullableFilter<"ScheduleDraft"> | Date | string | null
    archivedAt?: DateTimeNullableFilter<"ScheduleDraft"> | Date | string | null
    metadata?: JsonNullableFilter<"ScheduleDraft">
    notes?: StringNullableFilter<"ScheduleDraft"> | string | null
    items?: ScheduleDraftItemListRelationFilter
    scheduleTemplate?: XOR<ScheduleTemplateNullableRelationFilter, ScheduleTemplateWhereInput> | null
    parentDraft?: XOR<ScheduleDraftNullableRelationFilter, ScheduleDraftWhereInput> | null
    versionDrafts?: ScheduleDraftListRelationFilter
  }, "id">

  export type ScheduleDraftOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    version?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    basedOnTemplateId?: SortOrderInput | SortOrder
    basedOnDraftId?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedAt?: SortOrderInput | SortOrder
    activatedAt?: SortOrderInput | SortOrder
    archivedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: ScheduleDraftCountOrderByAggregateInput
    _avg?: ScheduleDraftAvgOrderByAggregateInput
    _max?: ScheduleDraftMaxOrderByAggregateInput
    _min?: ScheduleDraftMinOrderByAggregateInput
    _sum?: ScheduleDraftSumOrderByAggregateInput
  }

  export type ScheduleDraftScalarWhereWithAggregatesInput = {
    AND?: ScheduleDraftScalarWhereWithAggregatesInput | ScheduleDraftScalarWhereWithAggregatesInput[]
    OR?: ScheduleDraftScalarWhereWithAggregatesInput[]
    NOT?: ScheduleDraftScalarWhereWithAggregatesInput | ScheduleDraftScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScheduleDraft"> | number
    companyId?: IntWithAggregatesFilter<"ScheduleDraft"> | number
    name?: StringWithAggregatesFilter<"ScheduleDraft"> | string
    description?: StringNullableWithAggregatesFilter<"ScheduleDraft"> | string | null
    version?: StringWithAggregatesFilter<"ScheduleDraft"> | string
    status?: StringWithAggregatesFilter<"ScheduleDraft"> | string
    periodStart?: DateTimeWithAggregatesFilter<"ScheduleDraft"> | Date | string
    periodEnd?: DateTimeWithAggregatesFilter<"ScheduleDraft"> | Date | string
    basedOnTemplateId?: IntNullableWithAggregatesFilter<"ScheduleDraft"> | number | null
    basedOnDraftId?: IntNullableWithAggregatesFilter<"ScheduleDraft"> | number | null
    createdBy?: IntWithAggregatesFilter<"ScheduleDraft"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ScheduleDraft"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScheduleDraft"> | Date | string
    approvedBy?: IntNullableWithAggregatesFilter<"ScheduleDraft"> | number | null
    approvedAt?: DateTimeNullableWithAggregatesFilter<"ScheduleDraft"> | Date | string | null
    activatedAt?: DateTimeNullableWithAggregatesFilter<"ScheduleDraft"> | Date | string | null
    archivedAt?: DateTimeNullableWithAggregatesFilter<"ScheduleDraft"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"ScheduleDraft">
    notes?: StringNullableWithAggregatesFilter<"ScheduleDraft"> | string | null
  }

  export type ScheduleDraftItemWhereInput = {
    AND?: ScheduleDraftItemWhereInput | ScheduleDraftItemWhereInput[]
    OR?: ScheduleDraftItemWhereInput[]
    NOT?: ScheduleDraftItemWhereInput | ScheduleDraftItemWhereInput[]
    id?: IntFilter<"ScheduleDraftItem"> | number
    draftId?: IntFilter<"ScheduleDraftItem"> | number
    employeeId?: IntFilter<"ScheduleDraftItem"> | number
    date?: DateTimeFilter<"ScheduleDraftItem"> | Date | string
    startTime?: StringFilter<"ScheduleDraftItem"> | string
    endTime?: StringFilter<"ScheduleDraftItem"> | string
    shiftType?: StringFilter<"ScheduleDraftItem"> | string
    shiftPatternId?: IntNullableFilter<"ScheduleDraftItem"> | number | null
    notes?: StringNullableFilter<"ScheduleDraftItem"> | string | null
    status?: StringFilter<"ScheduleDraftItem"> | string
    priority?: StringFilter<"ScheduleDraftItem"> | string
    breakTime?: StringNullableFilter<"ScheduleDraftItem"> | string | null
    estimatedWorkload?: StringNullableFilter<"ScheduleDraftItem"> | string | null
    requirements?: JsonNullableFilter<"ScheduleDraftItem">
    constraints?: JsonNullableFilter<"ScheduleDraftItem">
    createdAt?: DateTimeFilter<"ScheduleDraftItem"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleDraftItem"> | Date | string
    draft?: XOR<ScheduleDraftRelationFilter, ScheduleDraftWhereInput>
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    shiftPattern?: XOR<ShiftPatternNullableRelationFilter, ShiftPatternWhereInput> | null
  }

  export type ScheduleDraftItemOrderByWithRelationInput = {
    id?: SortOrder
    draftId?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    shiftPatternId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    breakTime?: SortOrderInput | SortOrder
    estimatedWorkload?: SortOrderInput | SortOrder
    requirements?: SortOrderInput | SortOrder
    constraints?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    draft?: ScheduleDraftOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    shiftPattern?: ShiftPatternOrderByWithRelationInput
  }

  export type ScheduleDraftItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleDraftItemWhereInput | ScheduleDraftItemWhereInput[]
    OR?: ScheduleDraftItemWhereInput[]
    NOT?: ScheduleDraftItemWhereInput | ScheduleDraftItemWhereInput[]
    draftId?: IntFilter<"ScheduleDraftItem"> | number
    employeeId?: IntFilter<"ScheduleDraftItem"> | number
    date?: DateTimeFilter<"ScheduleDraftItem"> | Date | string
    startTime?: StringFilter<"ScheduleDraftItem"> | string
    endTime?: StringFilter<"ScheduleDraftItem"> | string
    shiftType?: StringFilter<"ScheduleDraftItem"> | string
    shiftPatternId?: IntNullableFilter<"ScheduleDraftItem"> | number | null
    notes?: StringNullableFilter<"ScheduleDraftItem"> | string | null
    status?: StringFilter<"ScheduleDraftItem"> | string
    priority?: StringFilter<"ScheduleDraftItem"> | string
    breakTime?: StringNullableFilter<"ScheduleDraftItem"> | string | null
    estimatedWorkload?: StringNullableFilter<"ScheduleDraftItem"> | string | null
    requirements?: JsonNullableFilter<"ScheduleDraftItem">
    constraints?: JsonNullableFilter<"ScheduleDraftItem">
    createdAt?: DateTimeFilter<"ScheduleDraftItem"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleDraftItem"> | Date | string
    draft?: XOR<ScheduleDraftRelationFilter, ScheduleDraftWhereInput>
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    shiftPattern?: XOR<ShiftPatternNullableRelationFilter, ShiftPatternWhereInput> | null
  }, "id">

  export type ScheduleDraftItemOrderByWithAggregationInput = {
    id?: SortOrder
    draftId?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    shiftPatternId?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    breakTime?: SortOrderInput | SortOrder
    estimatedWorkload?: SortOrderInput | SortOrder
    requirements?: SortOrderInput | SortOrder
    constraints?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduleDraftItemCountOrderByAggregateInput
    _avg?: ScheduleDraftItemAvgOrderByAggregateInput
    _max?: ScheduleDraftItemMaxOrderByAggregateInput
    _min?: ScheduleDraftItemMinOrderByAggregateInput
    _sum?: ScheduleDraftItemSumOrderByAggregateInput
  }

  export type ScheduleDraftItemScalarWhereWithAggregatesInput = {
    AND?: ScheduleDraftItemScalarWhereWithAggregatesInput | ScheduleDraftItemScalarWhereWithAggregatesInput[]
    OR?: ScheduleDraftItemScalarWhereWithAggregatesInput[]
    NOT?: ScheduleDraftItemScalarWhereWithAggregatesInput | ScheduleDraftItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScheduleDraftItem"> | number
    draftId?: IntWithAggregatesFilter<"ScheduleDraftItem"> | number
    employeeId?: IntWithAggregatesFilter<"ScheduleDraftItem"> | number
    date?: DateTimeWithAggregatesFilter<"ScheduleDraftItem"> | Date | string
    startTime?: StringWithAggregatesFilter<"ScheduleDraftItem"> | string
    endTime?: StringWithAggregatesFilter<"ScheduleDraftItem"> | string
    shiftType?: StringWithAggregatesFilter<"ScheduleDraftItem"> | string
    shiftPatternId?: IntNullableWithAggregatesFilter<"ScheduleDraftItem"> | number | null
    notes?: StringNullableWithAggregatesFilter<"ScheduleDraftItem"> | string | null
    status?: StringWithAggregatesFilter<"ScheduleDraftItem"> | string
    priority?: StringWithAggregatesFilter<"ScheduleDraftItem"> | string
    breakTime?: StringNullableWithAggregatesFilter<"ScheduleDraftItem"> | string | null
    estimatedWorkload?: StringNullableWithAggregatesFilter<"ScheduleDraftItem"> | string | null
    requirements?: JsonNullableWithAggregatesFilter<"ScheduleDraftItem">
    constraints?: JsonNullableWithAggregatesFilter<"ScheduleDraftItem">
    createdAt?: DateTimeWithAggregatesFilter<"ScheduleDraftItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScheduleDraftItem"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateNestedOneWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveCreateNestedManyWithoutReviewerInput
    readNotices?: NoticeReadCreateNestedManyWithoutUserInput
    createdNotices?: NoticeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveUncheckedCreateNestedManyWithoutReviewerInput
    readNotices?: NoticeReadUncheckedCreateNestedManyWithoutUserInput
    createdNotices?: NoticeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUpdateManyWithoutReviewerNestedInput
    readNotices?: NoticeReadUpdateManyWithoutUserNestedInput
    createdNotices?: NoticeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUncheckedUpdateManyWithoutReviewerNestedInput
    readNotices?: NoticeReadUncheckedUpdateManyWithoutUserNestedInput
    createdNotices?: NoticeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    companyName: string
    industry: string
    companySize: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    defaultEndTime?: string | null
    defaultStartTime?: string | null
    minStaffRequired?: number | null
    showLeaveInSchedule?: boolean
    updatedAt?: Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: string
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: number
    minimumStaffCoverage?: number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: number
    timezone?: string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutCompanyInput
    shiftPatterns?: ShiftPatternCreateNestedManyWithoutCompanyInput
    operatingHoursTemplates?: OperatingHoursTemplateCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    userId: number
    companyName: string
    industry: string
    companySize: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    defaultEndTime?: string | null
    defaultStartTime?: string | null
    minStaffRequired?: number | null
    showLeaveInSchedule?: boolean
    updatedAt?: Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: string
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: number
    minimumStaffCoverage?: number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: number
    timezone?: string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    shiftPatterns?: ShiftPatternUncheckedCreateNestedManyWithoutCompanyInput
    operatingHoursTemplates?: OperatingHoursTemplateUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutCompanyNestedInput
    shiftPatterns?: ShiftPatternUpdateManyWithoutCompanyNestedInput
    operatingHoursTemplates?: OperatingHoursTemplateUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    shiftPatterns?: ShiftPatternUncheckedUpdateManyWithoutCompanyNestedInput
    operatingHoursTemplates?: OperatingHoursTemplateUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: number
    userId: number
    companyName: string
    industry: string
    companySize: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    defaultEndTime?: string | null
    defaultStartTime?: string | null
    minStaffRequired?: number | null
    showLeaveInSchedule?: boolean
    updatedAt?: Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: string
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: number
    minimumStaffCoverage?: number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: number
    timezone?: string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CompanyUpdateManyMutationInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EmployeeCreateInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
  }

  export type EmployeeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
  }

  export type AbilityCreateInput = {
    customerService?: number
    experience?: number
    flexibility?: number
    rank?: string | null
    teamChemistry?: number
    totalScore?: number | null
    workSkill?: number
    employee: EmployeeCreateNestedOneWithoutAbilitiesInput
  }

  export type AbilityUncheckedCreateInput = {
    id?: number
    employeeId: number
    customerService?: number
    experience?: number
    flexibility?: number
    rank?: string | null
    teamChemistry?: number
    totalScore?: number | null
    workSkill?: number
  }

  export type AbilityUpdateInput = {
    customerService?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    flexibility?: IntFieldUpdateOperationsInput | number
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    teamChemistry?: IntFieldUpdateOperationsInput | number
    totalScore?: NullableIntFieldUpdateOperationsInput | number | null
    workSkill?: IntFieldUpdateOperationsInput | number
    employee?: EmployeeUpdateOneRequiredWithoutAbilitiesNestedInput
  }

  export type AbilityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    customerService?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    flexibility?: IntFieldUpdateOperationsInput | number
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    teamChemistry?: IntFieldUpdateOperationsInput | number
    totalScore?: NullableIntFieldUpdateOperationsInput | number | null
    workSkill?: IntFieldUpdateOperationsInput | number
  }

  export type AbilityCreateManyInput = {
    id?: number
    employeeId: number
    customerService?: number
    experience?: number
    flexibility?: number
    rank?: string | null
    teamChemistry?: number
    totalScore?: number | null
    workSkill?: number
  }

  export type AbilityUpdateManyMutationInput = {
    customerService?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    flexibility?: IntFieldUpdateOperationsInput | number
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    teamChemistry?: IntFieldUpdateOperationsInput | number
    totalScore?: NullableIntFieldUpdateOperationsInput | number | null
    workSkill?: IntFieldUpdateOperationsInput | number
  }

  export type AbilityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    customerService?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    flexibility?: IntFieldUpdateOperationsInput | number
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    teamChemistry?: IntFieldUpdateOperationsInput | number
    totalScore?: NullableIntFieldUpdateOperationsInput | number | null
    workSkill?: IntFieldUpdateOperationsInput | number
  }

  export type PreferenceCreateInput = {
    preferDays: JsonNullValueInput | InputJsonValue
    avoidDays: JsonNullValueInput | InputJsonValue
    fixedOffDays: JsonNullValueInput | InputJsonValue
    employee: EmployeeCreateNestedOneWithoutPreferencesInput
  }

  export type PreferenceUncheckedCreateInput = {
    id?: number
    employeeId: number
    preferDays: JsonNullValueInput | InputJsonValue
    avoidDays: JsonNullValueInput | InputJsonValue
    fixedOffDays: JsonNullValueInput | InputJsonValue
  }

  export type PreferenceUpdateInput = {
    preferDays?: JsonNullValueInput | InputJsonValue
    avoidDays?: JsonNullValueInput | InputJsonValue
    fixedOffDays?: JsonNullValueInput | InputJsonValue
    employee?: EmployeeUpdateOneRequiredWithoutPreferencesNestedInput
  }

  export type PreferenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    preferDays?: JsonNullValueInput | InputJsonValue
    avoidDays?: JsonNullValueInput | InputJsonValue
    fixedOffDays?: JsonNullValueInput | InputJsonValue
  }

  export type PreferenceCreateManyInput = {
    id?: number
    employeeId: number
    preferDays: JsonNullValueInput | InputJsonValue
    avoidDays: JsonNullValueInput | InputJsonValue
    fixedOffDays: JsonNullValueInput | InputJsonValue
  }

  export type PreferenceUpdateManyMutationInput = {
    preferDays?: JsonNullValueInput | InputJsonValue
    avoidDays?: JsonNullValueInput | InputJsonValue
    fixedOffDays?: JsonNullValueInput | InputJsonValue
  }

  export type PreferenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    preferDays?: JsonNullValueInput | InputJsonValue
    avoidDays?: JsonNullValueInput | InputJsonValue
    fixedOffDays?: JsonNullValueInput | InputJsonValue
  }

  export type ScheduleCreateInput = {
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    swapRequested?: boolean
    employee: EmployeeCreateNestedOneWithoutSchedulesInput
    generationLog?: GenerationLogCreateNestedOneWithoutSchedulesInput
    shiftPattern?: ShiftPatternCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    generationLogId?: number | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    shiftPatternId?: number | null
    swapRequested?: boolean
  }

  export type ScheduleUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUpdateOneRequiredWithoutSchedulesNestedInput
    generationLog?: GenerationLogUpdateOneWithoutSchedulesNestedInput
    shiftPattern?: ShiftPatternUpdateOneWithoutSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    generationLogId?: NullableIntFieldUpdateOperationsInput | number | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ScheduleCreateManyInput = {
    id?: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    generationLogId?: number | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    shiftPatternId?: number | null
    swapRequested?: boolean
  }

  export type ScheduleUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    generationLogId?: NullableIntFieldUpdateOperationsInput | number | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LeaveCreateInput = {
    startDate: Date | string
    endDate: Date | string
    type: string
    reason?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    reviewedAt?: Date | string | null
    employee: EmployeeCreateNestedOneWithoutLeavesInput
    reviewer?: UserCreateNestedOneWithoutReviewedLeavesInput
  }

  export type LeaveUncheckedCreateInput = {
    id?: number
    employeeId: number
    startDate: Date | string
    endDate: Date | string
    type: string
    reason?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
  }

  export type LeaveUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUpdateOneRequiredWithoutLeavesNestedInput
    reviewer?: UserUpdateOneWithoutReviewedLeavesNestedInput
  }

  export type LeaveUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeaveCreateManyInput = {
    id?: number
    employeeId: number
    startDate: Date | string
    endDate: Date | string
    type: string
    reason?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
  }

  export type LeaveUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeaveUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EmployeeNoteCreateInput = {
    type: string
    content: string
    priority: string
    createdBy: number
    createdAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutNotesInput
  }

  export type EmployeeNoteUncheckedCreateInput = {
    id?: number
    employeeId: number
    type: string
    content: string
    priority: string
    createdBy: number
    createdAt?: Date | string
  }

  export type EmployeeNoteUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutNotesNestedInput
  }

  export type EmployeeNoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeNoteCreateManyInput = {
    id?: number
    employeeId: number
    type: string
    content: string
    priority: string
    createdBy: number
    createdAt?: Date | string
  }

  export type EmployeeNoteUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeNoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeChemistryCreateInput = {
    score?: number
    employee1: EmployeeCreateNestedOneWithoutChemistry1Input
    employee2: EmployeeCreateNestedOneWithoutChemistry2Input
  }

  export type EmployeeChemistryUncheckedCreateInput = {
    id?: number
    employee1Id: number
    employee2Id: number
    score?: number
  }

  export type EmployeeChemistryUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    employee1?: EmployeeUpdateOneRequiredWithoutChemistry1NestedInput
    employee2?: EmployeeUpdateOneRequiredWithoutChemistry2NestedInput
  }

  export type EmployeeChemistryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee1Id?: IntFieldUpdateOperationsInput | number
    employee2Id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeChemistryCreateManyInput = {
    id?: number
    employee1Id: number
    employee2Id: number
    score?: number
  }

  export type EmployeeChemistryUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeChemistryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee1Id?: IntFieldUpdateOperationsInput | number
    employee2Id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
  }

  export type NoticeCreateInput = {
    title: string
    content: string
    type: string
    priority: string
    isPinned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt?: Date | string | null
    readByUsers?: NoticeReadCreateNestedManyWithoutNoticeInput
    creator: UserCreateNestedOneWithoutCreatedNoticesInput
  }

  export type NoticeUncheckedCreateInput = {
    id?: number
    title: string
    content: string
    type: string
    priority: string
    isPinned?: boolean
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt?: Date | string | null
    readByUsers?: NoticeReadUncheckedCreateNestedManyWithoutNoticeInput
  }

  export type NoticeUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readByUsers?: NoticeReadUpdateManyWithoutNoticeNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedNoticesNestedInput
  }

  export type NoticeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readByUsers?: NoticeReadUncheckedUpdateManyWithoutNoticeNestedInput
  }

  export type NoticeCreateManyInput = {
    id?: number
    title: string
    content: string
    type: string
    priority: string
    isPinned?: boolean
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NoticeUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NoticeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NoticeReadCreateInput = {
    readAt?: Date | string
    notice: NoticeCreateNestedOneWithoutReadByUsersInput
    user: UserCreateNestedOneWithoutReadNoticesInput
  }

  export type NoticeReadUncheckedCreateInput = {
    id?: number
    noticeId: number
    userId: number
    readAt?: Date | string
  }

  export type NoticeReadUpdateInput = {
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notice?: NoticeUpdateOneRequiredWithoutReadByUsersNestedInput
    user?: UserUpdateOneRequiredWithoutReadNoticesNestedInput
  }

  export type NoticeReadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    noticeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticeReadCreateManyInput = {
    id?: number
    noticeId: number
    userId: number
    readAt?: Date | string
  }

  export type NoticeReadUpdateManyMutationInput = {
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticeReadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    noticeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftPatternCreateInput = {
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleCreateNestedManyWithoutShiftPatternInput
    company?: CompanyCreateNestedOneWithoutShiftPatternsInput
    schedule_templates?: ScheduleTemplateCreateNestedManyWithoutShift_patternsInput
    draftItems?: ScheduleDraftItemCreateNestedManyWithoutShiftPatternInput
  }

  export type ShiftPatternUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUncheckedCreateNestedManyWithoutShiftPatternInput
    schedule_templates?: ScheduleTemplateUncheckedCreateNestedManyWithoutShift_patternsInput
    draftItems?: ScheduleDraftItemUncheckedCreateNestedManyWithoutShiftPatternInput
  }

  export type ShiftPatternUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUpdateManyWithoutShiftPatternNestedInput
    company?: CompanyUpdateOneWithoutShiftPatternsNestedInput
    schedule_templates?: ScheduleTemplateUpdateManyWithoutShift_patternsNestedInput
    draftItems?: ScheduleDraftItemUpdateManyWithoutShiftPatternNestedInput
  }

  export type ShiftPatternUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUncheckedUpdateManyWithoutShiftPatternNestedInput
    schedule_templates?: ScheduleTemplateUncheckedUpdateManyWithoutShift_patternsNestedInput
    draftItems?: ScheduleDraftItemUncheckedUpdateManyWithoutShiftPatternNestedInput
  }

  export type ShiftPatternCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ShiftPatternUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ShiftPatternUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScheduleTemplateCreateInput = {
    name: string
    description?: string | null
    industryType: string
    templateType: string
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern: JsonNullValueInput | InputJsonValue
    rotationPeriod?: number | null
    minStaffPerShift?: number
    maxStaffPerShift?: number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    generationLogs?: GenerationLogCreateNestedManyWithoutTemplateInput
    shift_patterns?: ShiftPatternCreateNestedManyWithoutSchedule_templatesInput
    drafts?: ScheduleDraftCreateNestedManyWithoutScheduleTemplateInput
  }

  export type ScheduleTemplateUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    industryType: string
    templateType: string
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern: JsonNullValueInput | InputJsonValue
    rotationPeriod?: number | null
    minStaffPerShift?: number
    maxStaffPerShift?: number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    generationLogs?: GenerationLogUncheckedCreateNestedManyWithoutTemplateInput
    shift_patterns?: ShiftPatternUncheckedCreateNestedManyWithoutSchedule_templatesInput
    drafts?: ScheduleDraftUncheckedCreateNestedManyWithoutScheduleTemplateInput
  }

  export type ScheduleTemplateUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generationLogs?: GenerationLogUpdateManyWithoutTemplateNestedInput
    shift_patterns?: ShiftPatternUpdateManyWithoutSchedule_templatesNestedInput
    drafts?: ScheduleDraftUpdateManyWithoutScheduleTemplateNestedInput
  }

  export type ScheduleTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generationLogs?: GenerationLogUncheckedUpdateManyWithoutTemplateNestedInput
    shift_patterns?: ShiftPatternUncheckedUpdateManyWithoutSchedule_templatesNestedInput
    drafts?: ScheduleDraftUncheckedUpdateManyWithoutScheduleTemplateNestedInput
  }

  export type ScheduleTemplateCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    industryType: string
    templateType: string
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern: JsonNullValueInput | InputJsonValue
    rotationPeriod?: number | null
    minStaffPerShift?: number
    maxStaffPerShift?: number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleTemplateUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeConstraintsCreateInput = {
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: boolean
    canWorkHolidays?: boolean
    canWorkNightShifts?: boolean
    maxShiftsPerWeek?: number
    maxOvertimeHours?: number
    requiresFixedSchedule?: boolean
    fixedShiftPattern?: string | null
    maxTravelTime?: number | null
    workLocation?: string | null
    hasReliableTransport?: boolean
    needsAccommodation?: boolean
    accommodationDetails?: string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutConstraintsInput
  }

  export type EmployeeConstraintsUncheckedCreateInput = {
    id?: number
    employeeId: number
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: boolean
    canWorkHolidays?: boolean
    canWorkNightShifts?: boolean
    maxShiftsPerWeek?: number
    maxOvertimeHours?: number
    requiresFixedSchedule?: boolean
    fixedShiftPattern?: string | null
    maxTravelTime?: number | null
    workLocation?: string | null
    hasReliableTransport?: boolean
    needsAccommodation?: boolean
    accommodationDetails?: string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeConstraintsUpdateInput = {
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: BoolFieldUpdateOperationsInput | boolean
    canWorkHolidays?: BoolFieldUpdateOperationsInput | boolean
    canWorkNightShifts?: BoolFieldUpdateOperationsInput | boolean
    maxShiftsPerWeek?: IntFieldUpdateOperationsInput | number
    maxOvertimeHours?: IntFieldUpdateOperationsInput | number
    requiresFixedSchedule?: BoolFieldUpdateOperationsInput | boolean
    fixedShiftPattern?: NullableStringFieldUpdateOperationsInput | string | null
    maxTravelTime?: NullableIntFieldUpdateOperationsInput | number | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    hasReliableTransport?: BoolFieldUpdateOperationsInput | boolean
    needsAccommodation?: BoolFieldUpdateOperationsInput | boolean
    accommodationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutConstraintsNestedInput
  }

  export type EmployeeConstraintsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: BoolFieldUpdateOperationsInput | boolean
    canWorkHolidays?: BoolFieldUpdateOperationsInput | boolean
    canWorkNightShifts?: BoolFieldUpdateOperationsInput | boolean
    maxShiftsPerWeek?: IntFieldUpdateOperationsInput | number
    maxOvertimeHours?: IntFieldUpdateOperationsInput | number
    requiresFixedSchedule?: BoolFieldUpdateOperationsInput | boolean
    fixedShiftPattern?: NullableStringFieldUpdateOperationsInput | string | null
    maxTravelTime?: NullableIntFieldUpdateOperationsInput | number | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    hasReliableTransport?: BoolFieldUpdateOperationsInput | boolean
    needsAccommodation?: BoolFieldUpdateOperationsInput | boolean
    accommodationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeConstraintsCreateManyInput = {
    id?: number
    employeeId: number
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: boolean
    canWorkHolidays?: boolean
    canWorkNightShifts?: boolean
    maxShiftsPerWeek?: number
    maxOvertimeHours?: number
    requiresFixedSchedule?: boolean
    fixedShiftPattern?: string | null
    maxTravelTime?: number | null
    workLocation?: string | null
    hasReliableTransport?: boolean
    needsAccommodation?: boolean
    accommodationDetails?: string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeConstraintsUpdateManyMutationInput = {
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: BoolFieldUpdateOperationsInput | boolean
    canWorkHolidays?: BoolFieldUpdateOperationsInput | boolean
    canWorkNightShifts?: BoolFieldUpdateOperationsInput | boolean
    maxShiftsPerWeek?: IntFieldUpdateOperationsInput | number
    maxOvertimeHours?: IntFieldUpdateOperationsInput | number
    requiresFixedSchedule?: BoolFieldUpdateOperationsInput | boolean
    fixedShiftPattern?: NullableStringFieldUpdateOperationsInput | string | null
    maxTravelTime?: NullableIntFieldUpdateOperationsInput | number | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    hasReliableTransport?: BoolFieldUpdateOperationsInput | boolean
    needsAccommodation?: BoolFieldUpdateOperationsInput | boolean
    accommodationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeConstraintsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: BoolFieldUpdateOperationsInput | boolean
    canWorkHolidays?: BoolFieldUpdateOperationsInput | boolean
    canWorkNightShifts?: BoolFieldUpdateOperationsInput | boolean
    maxShiftsPerWeek?: IntFieldUpdateOperationsInput | number
    maxOvertimeHours?: IntFieldUpdateOperationsInput | number
    requiresFixedSchedule?: BoolFieldUpdateOperationsInput | boolean
    fixedShiftPattern?: NullableStringFieldUpdateOperationsInput | string | null
    maxTravelTime?: NullableIntFieldUpdateOperationsInput | number | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    hasReliableTransport?: BoolFieldUpdateOperationsInput | boolean
    needsAccommodation?: BoolFieldUpdateOperationsInput | boolean
    accommodationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GenerationLogCreateInput = {
    generatedBy: number
    generationType: string
    periodStart: Date | string
    periodEnd: Date | string
    totalSchedulesCreated?: number
    totalEmployeesAffected?: number
    parameters: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: number | null
    employeeSatisfaction?: number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: number | null
    algorithmVersion?: string
    status?: string
    notes?: string | null
    createdAt?: Date | string
    template?: ScheduleTemplateCreateNestedOneWithoutGenerationLogsInput
    schedules?: ScheduleCreateNestedManyWithoutGenerationLogInput
  }

  export type GenerationLogUncheckedCreateInput = {
    id?: number
    templateId?: number | null
    generatedBy: number
    generationType: string
    periodStart: Date | string
    periodEnd: Date | string
    totalSchedulesCreated?: number
    totalEmployeesAffected?: number
    parameters: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: number | null
    employeeSatisfaction?: number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: number | null
    algorithmVersion?: string
    status?: string
    notes?: string | null
    createdAt?: Date | string
    schedules?: ScheduleUncheckedCreateNestedManyWithoutGenerationLogInput
  }

  export type GenerationLogUpdateInput = {
    generatedBy?: IntFieldUpdateOperationsInput | number
    generationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSchedulesCreated?: IntFieldUpdateOperationsInput | number
    totalEmployeesAffected?: IntFieldUpdateOperationsInput | number
    parameters?: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    algorithmVersion?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: ScheduleTemplateUpdateOneWithoutGenerationLogsNestedInput
    schedules?: ScheduleUpdateManyWithoutGenerationLogNestedInput
  }

  export type GenerationLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: IntFieldUpdateOperationsInput | number
    generationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSchedulesCreated?: IntFieldUpdateOperationsInput | number
    totalEmployeesAffected?: IntFieldUpdateOperationsInput | number
    parameters?: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    algorithmVersion?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ScheduleUncheckedUpdateManyWithoutGenerationLogNestedInput
  }

  export type GenerationLogCreateManyInput = {
    id?: number
    templateId?: number | null
    generatedBy: number
    generationType: string
    periodStart: Date | string
    periodEnd: Date | string
    totalSchedulesCreated?: number
    totalEmployeesAffected?: number
    parameters: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: number | null
    employeeSatisfaction?: number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: number | null
    algorithmVersion?: string
    status?: string
    notes?: string | null
    createdAt?: Date | string
  }

  export type GenerationLogUpdateManyMutationInput = {
    generatedBy?: IntFieldUpdateOperationsInput | number
    generationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSchedulesCreated?: IntFieldUpdateOperationsInput | number
    totalEmployeesAffected?: IntFieldUpdateOperationsInput | number
    parameters?: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    algorithmVersion?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GenerationLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: IntFieldUpdateOperationsInput | number
    generationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSchedulesCreated?: IntFieldUpdateOperationsInput | number
    totalEmployeesAffected?: IntFieldUpdateOperationsInput | number
    parameters?: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    algorithmVersion?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCertificationCreateInput = {
    certificationName: string
    certificationBody?: string | null
    issueDate: Date | string
    expiryDate?: Date | string | null
    certificateNumber?: string | null
    isActive?: boolean
    verificationStatus?: string
    attachmentUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutCertificationsInput
  }

  export type EmployeeCertificationUncheckedCreateInput = {
    id?: number
    employeeId: number
    certificationName: string
    certificationBody?: string | null
    issueDate: Date | string
    expiryDate?: Date | string | null
    certificateNumber?: string | null
    isActive?: boolean
    verificationStatus?: string
    attachmentUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCertificationUpdateInput = {
    certificationName?: StringFieldUpdateOperationsInput | string
    certificationBody?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutCertificationsNestedInput
  }

  export type EmployeeCertificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    certificationName?: StringFieldUpdateOperationsInput | string
    certificationBody?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCertificationCreateManyInput = {
    id?: number
    employeeId: number
    certificationName: string
    certificationBody?: string | null
    issueDate: Date | string
    expiryDate?: Date | string | null
    certificateNumber?: string | null
    isActive?: boolean
    verificationStatus?: string
    attachmentUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCertificationUpdateManyMutationInput = {
    certificationName?: StringFieldUpdateOperationsInput | string
    certificationBody?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCertificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    certificationName?: StringFieldUpdateOperationsInput | string
    certificationBody?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperatingHoursTemplateCreateInput = {
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutOperatingHoursTemplatesInput
    dailyHours?: DailyOperatingHoursCreateNestedManyWithoutTemplateInput
    staffingRules?: StaffingRuleCreateNestedManyWithoutTemplateInput
    scheduleOverrides?: ScheduleOverrideCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateUncheckedCreateInput = {
    id?: number
    companyId: number
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyHours?: DailyOperatingHoursUncheckedCreateNestedManyWithoutTemplateInput
    staffingRules?: StaffingRuleUncheckedCreateNestedManyWithoutTemplateInput
    scheduleOverrides?: ScheduleOverrideUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateUpdateInput = {
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutOperatingHoursTemplatesNestedInput
    dailyHours?: DailyOperatingHoursUpdateManyWithoutTemplateNestedInput
    staffingRules?: StaffingRuleUpdateManyWithoutTemplateNestedInput
    scheduleOverrides?: ScheduleOverrideUpdateManyWithoutTemplateNestedInput
  }

  export type OperatingHoursTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyHours?: DailyOperatingHoursUncheckedUpdateManyWithoutTemplateNestedInput
    staffingRules?: StaffingRuleUncheckedUpdateManyWithoutTemplateNestedInput
    scheduleOverrides?: ScheduleOverrideUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type OperatingHoursTemplateCreateManyInput = {
    id?: number
    companyId: number
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OperatingHoursTemplateUpdateManyMutationInput = {
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OperatingHoursTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DailyOperatingHoursCreateInput = {
    dayOfWeek: number
    isOpen?: boolean
    openTime?: string | null
    closeTime?: string | null
    breakStart?: string | null
    breakEnd?: string | null
    minStaff?: number
    maxStaff?: number | null
    notes?: string | null
    template: OperatingHoursTemplateCreateNestedOneWithoutDailyHoursInput
    timeSlots?: HourlyStaffingRuleCreateNestedManyWithoutDailyHoursInput
  }

  export type DailyOperatingHoursUncheckedCreateInput = {
    id?: number
    templateId: number
    dayOfWeek: number
    isOpen?: boolean
    openTime?: string | null
    closeTime?: string | null
    breakStart?: string | null
    breakEnd?: string | null
    minStaff?: number
    maxStaff?: number | null
    notes?: string | null
    timeSlots?: HourlyStaffingRuleUncheckedCreateNestedManyWithoutDailyHoursInput
  }

  export type DailyOperatingHoursUpdateInput = {
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    isOpen?: BoolFieldUpdateOperationsInput | boolean
    openTime?: NullableStringFieldUpdateOperationsInput | string | null
    closeTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakStart?: NullableStringFieldUpdateOperationsInput | string | null
    breakEnd?: NullableStringFieldUpdateOperationsInput | string | null
    minStaff?: IntFieldUpdateOperationsInput | number
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    template?: OperatingHoursTemplateUpdateOneRequiredWithoutDailyHoursNestedInput
    timeSlots?: HourlyStaffingRuleUpdateManyWithoutDailyHoursNestedInput
  }

  export type DailyOperatingHoursUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    isOpen?: BoolFieldUpdateOperationsInput | boolean
    openTime?: NullableStringFieldUpdateOperationsInput | string | null
    closeTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakStart?: NullableStringFieldUpdateOperationsInput | string | null
    breakEnd?: NullableStringFieldUpdateOperationsInput | string | null
    minStaff?: IntFieldUpdateOperationsInput | number
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSlots?: HourlyStaffingRuleUncheckedUpdateManyWithoutDailyHoursNestedInput
  }

  export type DailyOperatingHoursCreateManyInput = {
    id?: number
    templateId: number
    dayOfWeek: number
    isOpen?: boolean
    openTime?: string | null
    closeTime?: string | null
    breakStart?: string | null
    breakEnd?: string | null
    minStaff?: number
    maxStaff?: number | null
    notes?: string | null
  }

  export type DailyOperatingHoursUpdateManyMutationInput = {
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    isOpen?: BoolFieldUpdateOperationsInput | boolean
    openTime?: NullableStringFieldUpdateOperationsInput | string | null
    closeTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakStart?: NullableStringFieldUpdateOperationsInput | string | null
    breakEnd?: NullableStringFieldUpdateOperationsInput | string | null
    minStaff?: IntFieldUpdateOperationsInput | number
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DailyOperatingHoursUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    isOpen?: BoolFieldUpdateOperationsInput | boolean
    openTime?: NullableStringFieldUpdateOperationsInput | string | null
    closeTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakStart?: NullableStringFieldUpdateOperationsInput | string | null
    breakEnd?: NullableStringFieldUpdateOperationsInput | string | null
    minStaff?: IntFieldUpdateOperationsInput | number
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HourlyStaffingRuleCreateInput = {
    hourSlot: number
    requiredStaff?: number
    preferredStaff?: number | null
    maxStaff?: number | null
    priority?: string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    dailyHours: DailyOperatingHoursCreateNestedOneWithoutTimeSlotsInput
  }

  export type HourlyStaffingRuleUncheckedCreateInput = {
    id?: number
    dailyHoursId: number
    hourSlot: number
    requiredStaff?: number
    preferredStaff?: number | null
    maxStaff?: number | null
    priority?: string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type HourlyStaffingRuleUpdateInput = {
    hourSlot?: IntFieldUpdateOperationsInput | number
    requiredStaff?: IntFieldUpdateOperationsInput | number
    preferredStaff?: NullableIntFieldUpdateOperationsInput | number | null
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: StringFieldUpdateOperationsInput | string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    dailyHours?: DailyOperatingHoursUpdateOneRequiredWithoutTimeSlotsNestedInput
  }

  export type HourlyStaffingRuleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dailyHoursId?: IntFieldUpdateOperationsInput | number
    hourSlot?: IntFieldUpdateOperationsInput | number
    requiredStaff?: IntFieldUpdateOperationsInput | number
    preferredStaff?: NullableIntFieldUpdateOperationsInput | number | null
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: StringFieldUpdateOperationsInput | string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HourlyStaffingRuleCreateManyInput = {
    id?: number
    dailyHoursId: number
    hourSlot: number
    requiredStaff?: number
    preferredStaff?: number | null
    maxStaff?: number | null
    priority?: string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type HourlyStaffingRuleUpdateManyMutationInput = {
    hourSlot?: IntFieldUpdateOperationsInput | number
    requiredStaff?: IntFieldUpdateOperationsInput | number
    preferredStaff?: NullableIntFieldUpdateOperationsInput | number | null
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: StringFieldUpdateOperationsInput | string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HourlyStaffingRuleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dailyHoursId?: IntFieldUpdateOperationsInput | number
    hourSlot?: IntFieldUpdateOperationsInput | number
    requiredStaff?: IntFieldUpdateOperationsInput | number
    preferredStaff?: NullableIntFieldUpdateOperationsInput | number | null
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: StringFieldUpdateOperationsInput | string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffingRuleCreateInput = {
    ruleName: string
    ruleType: string
    conditions: JsonNullValueInput | InputJsonValue
    staffingRequirements: JsonNullValueInput | InputJsonValue
    priority?: number
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    template: OperatingHoursTemplateCreateNestedOneWithoutStaffingRulesInput
  }

  export type StaffingRuleUncheckedCreateInput = {
    id?: number
    templateId: number
    ruleName: string
    ruleType: string
    conditions: JsonNullValueInput | InputJsonValue
    staffingRequirements: JsonNullValueInput | InputJsonValue
    priority?: number
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffingRuleUpdateInput = {
    ruleName?: StringFieldUpdateOperationsInput | string
    ruleType?: StringFieldUpdateOperationsInput | string
    conditions?: JsonNullValueInput | InputJsonValue
    staffingRequirements?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: OperatingHoursTemplateUpdateOneRequiredWithoutStaffingRulesNestedInput
  }

  export type StaffingRuleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    ruleName?: StringFieldUpdateOperationsInput | string
    ruleType?: StringFieldUpdateOperationsInput | string
    conditions?: JsonNullValueInput | InputJsonValue
    staffingRequirements?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffingRuleCreateManyInput = {
    id?: number
    templateId: number
    ruleName: string
    ruleType: string
    conditions: JsonNullValueInput | InputJsonValue
    staffingRequirements: JsonNullValueInput | InputJsonValue
    priority?: number
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffingRuleUpdateManyMutationInput = {
    ruleName?: StringFieldUpdateOperationsInput | string
    ruleType?: StringFieldUpdateOperationsInput | string
    conditions?: JsonNullValueInput | InputJsonValue
    staffingRequirements?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffingRuleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    ruleName?: StringFieldUpdateOperationsInput | string
    ruleType?: StringFieldUpdateOperationsInput | string
    conditions?: JsonNullValueInput | InputJsonValue
    staffingRequirements?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleOverrideCreateInput = {
    overrideDate: Date | string
    overrideType: string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    isActive?: boolean
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    template: OperatingHoursTemplateCreateNestedOneWithoutScheduleOverridesInput
  }

  export type ScheduleOverrideUncheckedCreateInput = {
    id?: number
    templateId: number
    overrideDate: Date | string
    overrideType: string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    isActive?: boolean
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleOverrideUpdateInput = {
    overrideDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overrideType?: StringFieldUpdateOperationsInput | string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: OperatingHoursTemplateUpdateOneRequiredWithoutScheduleOverridesNestedInput
  }

  export type ScheduleOverrideUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    overrideDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overrideType?: StringFieldUpdateOperationsInput | string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleOverrideCreateManyInput = {
    id?: number
    templateId: number
    overrideDate: Date | string
    overrideType: string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    isActive?: boolean
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleOverrideUpdateManyMutationInput = {
    overrideDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overrideType?: StringFieldUpdateOperationsInput | string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleOverrideUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    overrideDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overrideType?: StringFieldUpdateOperationsInput | string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffingAnalyticsCreateInput = {
    companyId: number
    analysisDate: Date | string
    dayOfWeek: number
    totalScheduledHours: number
    totalRequiredHours: number
    coverageRate: number
    utilizationRate: number
    shortfallHours?: number
    overstaffingHours?: number
    averageStaffPerHour: number
    peakStaffingHour?: number | null
    lowStaffingHour?: number | null
    hourlyBreakdown: JsonNullValueInput | InputJsonValue
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    skillGaps?: NullableJsonNullValueInput | InputJsonValue
    costAnalysis?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type StaffingAnalyticsUncheckedCreateInput = {
    id?: number
    companyId: number
    analysisDate: Date | string
    dayOfWeek: number
    totalScheduledHours: number
    totalRequiredHours: number
    coverageRate: number
    utilizationRate: number
    shortfallHours?: number
    overstaffingHours?: number
    averageStaffPerHour: number
    peakStaffingHour?: number | null
    lowStaffingHour?: number | null
    hourlyBreakdown: JsonNullValueInput | InputJsonValue
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    skillGaps?: NullableJsonNullValueInput | InputJsonValue
    costAnalysis?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type StaffingAnalyticsUpdateInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    analysisDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    totalScheduledHours?: FloatFieldUpdateOperationsInput | number
    totalRequiredHours?: FloatFieldUpdateOperationsInput | number
    coverageRate?: FloatFieldUpdateOperationsInput | number
    utilizationRate?: FloatFieldUpdateOperationsInput | number
    shortfallHours?: FloatFieldUpdateOperationsInput | number
    overstaffingHours?: FloatFieldUpdateOperationsInput | number
    averageStaffPerHour?: FloatFieldUpdateOperationsInput | number
    peakStaffingHour?: NullableIntFieldUpdateOperationsInput | number | null
    lowStaffingHour?: NullableIntFieldUpdateOperationsInput | number | null
    hourlyBreakdown?: JsonNullValueInput | InputJsonValue
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    skillGaps?: NullableJsonNullValueInput | InputJsonValue
    costAnalysis?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffingAnalyticsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    analysisDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    totalScheduledHours?: FloatFieldUpdateOperationsInput | number
    totalRequiredHours?: FloatFieldUpdateOperationsInput | number
    coverageRate?: FloatFieldUpdateOperationsInput | number
    utilizationRate?: FloatFieldUpdateOperationsInput | number
    shortfallHours?: FloatFieldUpdateOperationsInput | number
    overstaffingHours?: FloatFieldUpdateOperationsInput | number
    averageStaffPerHour?: FloatFieldUpdateOperationsInput | number
    peakStaffingHour?: NullableIntFieldUpdateOperationsInput | number | null
    lowStaffingHour?: NullableIntFieldUpdateOperationsInput | number | null
    hourlyBreakdown?: JsonNullValueInput | InputJsonValue
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    skillGaps?: NullableJsonNullValueInput | InputJsonValue
    costAnalysis?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffingAnalyticsCreateManyInput = {
    id?: number
    companyId: number
    analysisDate: Date | string
    dayOfWeek: number
    totalScheduledHours: number
    totalRequiredHours: number
    coverageRate: number
    utilizationRate: number
    shortfallHours?: number
    overstaffingHours?: number
    averageStaffPerHour: number
    peakStaffingHour?: number | null
    lowStaffingHour?: number | null
    hourlyBreakdown: JsonNullValueInput | InputJsonValue
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    skillGaps?: NullableJsonNullValueInput | InputJsonValue
    costAnalysis?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type StaffingAnalyticsUpdateManyMutationInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    analysisDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    totalScheduledHours?: FloatFieldUpdateOperationsInput | number
    totalRequiredHours?: FloatFieldUpdateOperationsInput | number
    coverageRate?: FloatFieldUpdateOperationsInput | number
    utilizationRate?: FloatFieldUpdateOperationsInput | number
    shortfallHours?: FloatFieldUpdateOperationsInput | number
    overstaffingHours?: FloatFieldUpdateOperationsInput | number
    averageStaffPerHour?: FloatFieldUpdateOperationsInput | number
    peakStaffingHour?: NullableIntFieldUpdateOperationsInput | number | null
    lowStaffingHour?: NullableIntFieldUpdateOperationsInput | number | null
    hourlyBreakdown?: JsonNullValueInput | InputJsonValue
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    skillGaps?: NullableJsonNullValueInput | InputJsonValue
    costAnalysis?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffingAnalyticsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    analysisDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    totalScheduledHours?: FloatFieldUpdateOperationsInput | number
    totalRequiredHours?: FloatFieldUpdateOperationsInput | number
    coverageRate?: FloatFieldUpdateOperationsInput | number
    utilizationRate?: FloatFieldUpdateOperationsInput | number
    shortfallHours?: FloatFieldUpdateOperationsInput | number
    overstaffingHours?: FloatFieldUpdateOperationsInput | number
    averageStaffPerHour?: FloatFieldUpdateOperationsInput | number
    peakStaffingHour?: NullableIntFieldUpdateOperationsInput | number | null
    lowStaffingHour?: NullableIntFieldUpdateOperationsInput | number | null
    hourlyBreakdown?: JsonNullValueInput | InputJsonValue
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    skillGaps?: NullableJsonNullValueInput | InputJsonValue
    costAnalysis?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleDraftCreateInput = {
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    items?: ScheduleDraftItemCreateNestedManyWithoutDraftInput
    scheduleTemplate?: ScheduleTemplateCreateNestedOneWithoutDraftsInput
    parentDraft?: ScheduleDraftCreateNestedOneWithoutVersionDraftsInput
    versionDrafts?: ScheduleDraftCreateNestedManyWithoutParentDraftInput
  }

  export type ScheduleDraftUncheckedCreateInput = {
    id?: number
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    basedOnTemplateId?: number | null
    basedOnDraftId?: number | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    items?: ScheduleDraftItemUncheckedCreateNestedManyWithoutDraftInput
    versionDrafts?: ScheduleDraftUncheckedCreateNestedManyWithoutParentDraftInput
  }

  export type ScheduleDraftUpdateInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ScheduleDraftItemUpdateManyWithoutDraftNestedInput
    scheduleTemplate?: ScheduleTemplateUpdateOneWithoutDraftsNestedInput
    parentDraft?: ScheduleDraftUpdateOneWithoutVersionDraftsNestedInput
    versionDrafts?: ScheduleDraftUpdateManyWithoutParentDraftNestedInput
  }

  export type ScheduleDraftUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    basedOnTemplateId?: NullableIntFieldUpdateOperationsInput | number | null
    basedOnDraftId?: NullableIntFieldUpdateOperationsInput | number | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ScheduleDraftItemUncheckedUpdateManyWithoutDraftNestedInput
    versionDrafts?: ScheduleDraftUncheckedUpdateManyWithoutParentDraftNestedInput
  }

  export type ScheduleDraftCreateManyInput = {
    id?: number
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    basedOnTemplateId?: number | null
    basedOnDraftId?: number | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type ScheduleDraftUpdateManyMutationInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScheduleDraftUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    basedOnTemplateId?: NullableIntFieldUpdateOperationsInput | number | null
    basedOnDraftId?: NullableIntFieldUpdateOperationsInput | number | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScheduleDraftItemCreateInput = {
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    draft: ScheduleDraftCreateNestedOneWithoutItemsInput
    employee: EmployeeCreateNestedOneWithoutDraftSchedulesInput
    shiftPattern?: ShiftPatternCreateNestedOneWithoutDraftItemsInput
  }

  export type ScheduleDraftItemUncheckedCreateInput = {
    id?: number
    draftId: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    shiftPatternId?: number | null
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleDraftItemUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    draft?: ScheduleDraftUpdateOneRequiredWithoutItemsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDraftSchedulesNestedInput
    shiftPattern?: ShiftPatternUpdateOneWithoutDraftItemsNestedInput
  }

  export type ScheduleDraftItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    draftId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleDraftItemCreateManyInput = {
    id?: number
    draftId: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    shiftPatternId?: number | null
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleDraftItemUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleDraftItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    draftId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CompanyNullableRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type EmployeeNullableRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type LeaveListRelationFilter = {
    every?: LeaveWhereInput
    some?: LeaveWhereInput
    none?: LeaveWhereInput
  }

  export type NoticeReadListRelationFilter = {
    every?: NoticeReadWhereInput
    some?: NoticeReadWhereInput
    none?: NoticeReadWhereInput
  }

  export type NoticeListRelationFilter = {
    every?: NoticeWhereInput
    some?: NoticeWhereInput
    none?: NoticeWhereInput
  }

  export type LeaveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoticeReadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoticeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ShiftPatternListRelationFilter = {
    every?: ShiftPatternWhereInput
    some?: ShiftPatternWhereInput
    none?: ShiftPatternWhereInput
  }

  export type OperatingHoursTemplateListRelationFilter = {
    every?: OperatingHoursTemplateWhereInput
    some?: OperatingHoursTemplateWhereInput
    none?: OperatingHoursTemplateWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ShiftPatternOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperatingHoursTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    defaultEndTime?: SortOrder
    defaultStartTime?: SortOrder
    minStaffRequired?: SortOrder
    showLeaveInSchedule?: SortOrder
    updatedAt?: SortOrder
    workDays?: SortOrder
    workType?: SortOrder
    allowEmployeeSelfScheduling?: SortOrder
    autoSchedulingEnabled?: SortOrder
    complianceRequirements?: SortOrder
    holidaySchedule?: SortOrder
    maxAdvanceScheduleDays?: SortOrder
    minimumStaffCoverage?: SortOrder
    operatingHours?: SortOrder
    overtimePolicy?: SortOrder
    peakHours?: SortOrder
    scheduleNotificationDays?: SortOrder
    timezone?: SortOrder
    unionRules?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    minStaffRequired?: SortOrder
    maxAdvanceScheduleDays?: SortOrder
    minimumStaffCoverage?: SortOrder
    scheduleNotificationDays?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    defaultEndTime?: SortOrder
    defaultStartTime?: SortOrder
    minStaffRequired?: SortOrder
    showLeaveInSchedule?: SortOrder
    updatedAt?: SortOrder
    workType?: SortOrder
    allowEmployeeSelfScheduling?: SortOrder
    autoSchedulingEnabled?: SortOrder
    maxAdvanceScheduleDays?: SortOrder
    minimumStaffCoverage?: SortOrder
    scheduleNotificationDays?: SortOrder
    timezone?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    defaultEndTime?: SortOrder
    defaultStartTime?: SortOrder
    minStaffRequired?: SortOrder
    showLeaveInSchedule?: SortOrder
    updatedAt?: SortOrder
    workType?: SortOrder
    allowEmployeeSelfScheduling?: SortOrder
    autoSchedulingEnabled?: SortOrder
    maxAdvanceScheduleDays?: SortOrder
    minimumStaffCoverage?: SortOrder
    scheduleNotificationDays?: SortOrder
    timezone?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    minStaffRequired?: SortOrder
    maxAdvanceScheduleDays?: SortOrder
    minimumStaffCoverage?: SortOrder
    scheduleNotificationDays?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AbilityNullableRelationFilter = {
    is?: AbilityWhereInput | null
    isNot?: AbilityWhereInput | null
  }

  export type EmployeeCertificationListRelationFilter = {
    every?: EmployeeCertificationWhereInput
    some?: EmployeeCertificationWhereInput
    none?: EmployeeCertificationWhereInput
  }

  export type EmployeeChemistryListRelationFilter = {
    every?: EmployeeChemistryWhereInput
    some?: EmployeeChemistryWhereInput
    none?: EmployeeChemistryWhereInput
  }

  export type EmployeeConstraintsNullableRelationFilter = {
    is?: EmployeeConstraintsWhereInput | null
    isNot?: EmployeeConstraintsWhereInput | null
  }

  export type EmployeeNoteListRelationFilter = {
    every?: EmployeeNoteWhereInput
    some?: EmployeeNoteWhereInput
    none?: EmployeeNoteWhereInput
  }

  export type PreferenceNullableRelationFilter = {
    is?: PreferenceWhereInput | null
    isNot?: PreferenceWhereInput | null
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type ScheduleDraftItemListRelationFilter = {
    every?: ScheduleDraftItemWhereInput
    some?: ScheduleDraftItemWhereInput
    none?: ScheduleDraftItemWhereInput
  }

  export type EmployeeCertificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeChemistryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleDraftItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    department?: SortOrder
    position?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    hireDate?: SortOrder
    yearsOfExperience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeType?: SortOrder
    isActive?: SortOrder
    maxConsecutiveDays?: SortOrder
    maxDailyHours?: SortOrder
    minDailyHours?: SortOrder
    minRestHours?: SortOrder
    seniorityLevel?: SortOrder
    weeklyHoursTarget?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    yearsOfExperience?: SortOrder
    maxConsecutiveDays?: SortOrder
    maxDailyHours?: SortOrder
    minDailyHours?: SortOrder
    minRestHours?: SortOrder
    weeklyHoursTarget?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    department?: SortOrder
    position?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    hireDate?: SortOrder
    yearsOfExperience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeType?: SortOrder
    isActive?: SortOrder
    maxConsecutiveDays?: SortOrder
    maxDailyHours?: SortOrder
    minDailyHours?: SortOrder
    minRestHours?: SortOrder
    seniorityLevel?: SortOrder
    weeklyHoursTarget?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    department?: SortOrder
    position?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    hireDate?: SortOrder
    yearsOfExperience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeType?: SortOrder
    isActive?: SortOrder
    maxConsecutiveDays?: SortOrder
    maxDailyHours?: SortOrder
    minDailyHours?: SortOrder
    minRestHours?: SortOrder
    seniorityLevel?: SortOrder
    weeklyHoursTarget?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    yearsOfExperience?: SortOrder
    maxConsecutiveDays?: SortOrder
    maxDailyHours?: SortOrder
    minDailyHours?: SortOrder
    minRestHours?: SortOrder
    weeklyHoursTarget?: SortOrder
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type AbilityCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    customerService?: SortOrder
    experience?: SortOrder
    flexibility?: SortOrder
    rank?: SortOrder
    teamChemistry?: SortOrder
    totalScore?: SortOrder
    workSkill?: SortOrder
  }

  export type AbilityAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    customerService?: SortOrder
    experience?: SortOrder
    flexibility?: SortOrder
    teamChemistry?: SortOrder
    totalScore?: SortOrder
    workSkill?: SortOrder
  }

  export type AbilityMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    customerService?: SortOrder
    experience?: SortOrder
    flexibility?: SortOrder
    rank?: SortOrder
    teamChemistry?: SortOrder
    totalScore?: SortOrder
    workSkill?: SortOrder
  }

  export type AbilityMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    customerService?: SortOrder
    experience?: SortOrder
    flexibility?: SortOrder
    rank?: SortOrder
    teamChemistry?: SortOrder
    totalScore?: SortOrder
    workSkill?: SortOrder
  }

  export type AbilitySumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    customerService?: SortOrder
    experience?: SortOrder
    flexibility?: SortOrder
    teamChemistry?: SortOrder
    totalScore?: SortOrder
    workSkill?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    preferDays?: SortOrder
    avoidDays?: SortOrder
    fixedOffDays?: SortOrder
  }

  export type PreferenceAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type PreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type PreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type PreferenceSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type GenerationLogNullableRelationFilter = {
    is?: GenerationLogWhereInput | null
    isNot?: GenerationLogWhereInput | null
  }

  export type ShiftPatternNullableRelationFilter = {
    is?: ShiftPatternWhereInput | null
    isNot?: ShiftPatternWhereInput | null
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    breakTime?: SortOrder
    estimatedWorkload?: SortOrder
    generationLogId?: SortOrder
    isAutoGenerated?: SortOrder
    overtimeApproved?: SortOrder
    priority?: SortOrder
    shiftPatternId?: SortOrder
    swapRequested?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    generationLogId?: SortOrder
    shiftPatternId?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    breakTime?: SortOrder
    estimatedWorkload?: SortOrder
    generationLogId?: SortOrder
    isAutoGenerated?: SortOrder
    overtimeApproved?: SortOrder
    priority?: SortOrder
    shiftPatternId?: SortOrder
    swapRequested?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    breakTime?: SortOrder
    estimatedWorkload?: SortOrder
    generationLogId?: SortOrder
    isAutoGenerated?: SortOrder
    overtimeApproved?: SortOrder
    priority?: SortOrder
    shiftPatternId?: SortOrder
    swapRequested?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    generationLogId?: SortOrder
    shiftPatternId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type LeaveCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    type?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
  }

  export type LeaveAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewedBy?: SortOrder
  }

  export type LeaveMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    type?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
  }

  export type LeaveMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    type?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminComment?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
  }

  export type LeaveSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    reviewedBy?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EmployeeNoteCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EmployeeNoteAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    createdBy?: SortOrder
  }

  export type EmployeeNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EmployeeNoteMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    type?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
  }

  export type EmployeeNoteSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    createdBy?: SortOrder
  }

  export type EmployeeChemistryEmployee1IdEmployee2IdCompoundUniqueInput = {
    employee1Id: number
    employee2Id: number
  }

  export type EmployeeChemistryCountOrderByAggregateInput = {
    id?: SortOrder
    employee1Id?: SortOrder
    employee2Id?: SortOrder
    score?: SortOrder
  }

  export type EmployeeChemistryAvgOrderByAggregateInput = {
    id?: SortOrder
    employee1Id?: SortOrder
    employee2Id?: SortOrder
    score?: SortOrder
  }

  export type EmployeeChemistryMaxOrderByAggregateInput = {
    id?: SortOrder
    employee1Id?: SortOrder
    employee2Id?: SortOrder
    score?: SortOrder
  }

  export type EmployeeChemistryMinOrderByAggregateInput = {
    id?: SortOrder
    employee1Id?: SortOrder
    employee2Id?: SortOrder
    score?: SortOrder
  }

  export type EmployeeChemistrySumOrderByAggregateInput = {
    id?: SortOrder
    employee1Id?: SortOrder
    employee2Id?: SortOrder
    score?: SortOrder
  }

  export type NoticeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isPinned?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type NoticeAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
  }

  export type NoticeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isPinned?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type NoticeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isPinned?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type NoticeSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
  }

  export type NoticeRelationFilter = {
    is?: NoticeWhereInput
    isNot?: NoticeWhereInput
  }

  export type NoticeReadNoticeIdUserIdCompoundUniqueInput = {
    noticeId: number
    userId: number
  }

  export type NoticeReadCountOrderByAggregateInput = {
    id?: SortOrder
    noticeId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type NoticeReadAvgOrderByAggregateInput = {
    id?: SortOrder
    noticeId?: SortOrder
    userId?: SortOrder
  }

  export type NoticeReadMaxOrderByAggregateInput = {
    id?: SortOrder
    noticeId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type NoticeReadMinOrderByAggregateInput = {
    id?: SortOrder
    noticeId?: SortOrder
    userId?: SortOrder
    readAt?: SortOrder
  }

  export type NoticeReadSumOrderByAggregateInput = {
    id?: SortOrder
    noticeId?: SortOrder
    userId?: SortOrder
  }

  export type ScheduleTemplateListRelationFilter = {
    every?: ScheduleTemplateWhereInput
    some?: ScheduleTemplateWhereInput
    none?: ScheduleTemplateWhereInput
  }

  export type ScheduleTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShiftPatternCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    breakDuration?: SortOrder
    shiftType?: SortOrder
    industryType?: SortOrder
    isTemplate?: SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    days?: SortOrder
    enabled?: SortOrder
    requiredStaff?: SortOrder
    requirements?: SortOrder
  }

  export type ShiftPatternAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    breakDuration?: SortOrder
    createdBy?: SortOrder
    companyId?: SortOrder
    requiredStaff?: SortOrder
  }

  export type ShiftPatternMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    breakDuration?: SortOrder
    shiftType?: SortOrder
    industryType?: SortOrder
    isTemplate?: SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    enabled?: SortOrder
    requiredStaff?: SortOrder
  }

  export type ShiftPatternMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    breakDuration?: SortOrder
    shiftType?: SortOrder
    industryType?: SortOrder
    isTemplate?: SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    companyId?: SortOrder
    enabled?: SortOrder
    requiredStaff?: SortOrder
  }

  export type ShiftPatternSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    breakDuration?: SortOrder
    createdBy?: SortOrder
    companyId?: SortOrder
    requiredStaff?: SortOrder
  }

  export type GenerationLogListRelationFilter = {
    every?: GenerationLogWhereInput
    some?: GenerationLogWhereInput
    none?: GenerationLogWhereInput
  }

  export type ScheduleDraftListRelationFilter = {
    every?: ScheduleDraftWhereInput
    some?: ScheduleDraftWhereInput
    none?: ScheduleDraftWhereInput
  }

  export type GenerationLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleDraftOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    industryType?: SortOrder
    templateType?: SortOrder
    isActive?: SortOrder
    metadata?: SortOrder
    workDaysPattern?: SortOrder
    rotationPeriod?: SortOrder
    minStaffPerShift?: SortOrder
    maxStaffPerShift?: SortOrder
    coverageRequirements?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
    rotationPeriod?: SortOrder
    minStaffPerShift?: SortOrder
    maxStaffPerShift?: SortOrder
    createdBy?: SortOrder
  }

  export type ScheduleTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    industryType?: SortOrder
    templateType?: SortOrder
    isActive?: SortOrder
    rotationPeriod?: SortOrder
    minStaffPerShift?: SortOrder
    maxStaffPerShift?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    industryType?: SortOrder
    templateType?: SortOrder
    isActive?: SortOrder
    rotationPeriod?: SortOrder
    minStaffPerShift?: SortOrder
    maxStaffPerShift?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleTemplateSumOrderByAggregateInput = {
    id?: SortOrder
    rotationPeriod?: SortOrder
    minStaffPerShift?: SortOrder
    maxStaffPerShift?: SortOrder
    createdBy?: SortOrder
  }

  export type EmployeeConstraintsCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    unavailableTimeSlots?: SortOrder
    preferredTimeSlots?: SortOrder
    blackoutDates?: SortOrder
    preferredShiftTypes?: SortOrder
    avoidShiftTypes?: SortOrder
    canWorkWeekends?: SortOrder
    canWorkHolidays?: SortOrder
    canWorkNightShifts?: SortOrder
    maxShiftsPerWeek?: SortOrder
    maxOvertimeHours?: SortOrder
    requiresFixedSchedule?: SortOrder
    fixedShiftPattern?: SortOrder
    maxTravelTime?: SortOrder
    workLocation?: SortOrder
    hasReliableTransport?: SortOrder
    needsAccommodation?: SortOrder
    accommodationDetails?: SortOrder
    medicalRestrictions?: SortOrder
    certificationRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeConstraintsAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    maxShiftsPerWeek?: SortOrder
    maxOvertimeHours?: SortOrder
    maxTravelTime?: SortOrder
  }

  export type EmployeeConstraintsMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    canWorkWeekends?: SortOrder
    canWorkHolidays?: SortOrder
    canWorkNightShifts?: SortOrder
    maxShiftsPerWeek?: SortOrder
    maxOvertimeHours?: SortOrder
    requiresFixedSchedule?: SortOrder
    fixedShiftPattern?: SortOrder
    maxTravelTime?: SortOrder
    workLocation?: SortOrder
    hasReliableTransport?: SortOrder
    needsAccommodation?: SortOrder
    accommodationDetails?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeConstraintsMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    canWorkWeekends?: SortOrder
    canWorkHolidays?: SortOrder
    canWorkNightShifts?: SortOrder
    maxShiftsPerWeek?: SortOrder
    maxOvertimeHours?: SortOrder
    requiresFixedSchedule?: SortOrder
    fixedShiftPattern?: SortOrder
    maxTravelTime?: SortOrder
    workLocation?: SortOrder
    hasReliableTransport?: SortOrder
    needsAccommodation?: SortOrder
    accommodationDetails?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeConstraintsSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    maxShiftsPerWeek?: SortOrder
    maxOvertimeHours?: SortOrder
    maxTravelTime?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ScheduleTemplateNullableRelationFilter = {
    is?: ScheduleTemplateWhereInput | null
    isNot?: ScheduleTemplateWhereInput | null
  }

  export type GenerationLogCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    generatedBy?: SortOrder
    generationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    totalSchedulesCreated?: SortOrder
    totalEmployeesAffected?: SortOrder
    parameters?: SortOrder
    constraints?: SortOrder
    coverageAchieved?: SortOrder
    employeeSatisfaction?: SortOrder
    constraintViolations?: SortOrder
    warnings?: SortOrder
    errors?: SortOrder
    executionTime?: SortOrder
    algorithmVersion?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type GenerationLogAvgOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    generatedBy?: SortOrder
    totalSchedulesCreated?: SortOrder
    totalEmployeesAffected?: SortOrder
    coverageAchieved?: SortOrder
    employeeSatisfaction?: SortOrder
    executionTime?: SortOrder
  }

  export type GenerationLogMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    generatedBy?: SortOrder
    generationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    totalSchedulesCreated?: SortOrder
    totalEmployeesAffected?: SortOrder
    coverageAchieved?: SortOrder
    employeeSatisfaction?: SortOrder
    executionTime?: SortOrder
    algorithmVersion?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type GenerationLogMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    generatedBy?: SortOrder
    generationType?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    totalSchedulesCreated?: SortOrder
    totalEmployeesAffected?: SortOrder
    coverageAchieved?: SortOrder
    employeeSatisfaction?: SortOrder
    executionTime?: SortOrder
    algorithmVersion?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type GenerationLogSumOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    generatedBy?: SortOrder
    totalSchedulesCreated?: SortOrder
    totalEmployeesAffected?: SortOrder
    coverageAchieved?: SortOrder
    employeeSatisfaction?: SortOrder
    executionTime?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EmployeeCertificationCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    certificationName?: SortOrder
    certificationBody?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    certificateNumber?: SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    attachmentUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeCertificationAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type EmployeeCertificationMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    certificationName?: SortOrder
    certificationBody?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    certificateNumber?: SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    attachmentUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeCertificationMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    certificationName?: SortOrder
    certificationBody?: SortOrder
    issueDate?: SortOrder
    expiryDate?: SortOrder
    certificateNumber?: SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    attachmentUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeCertificationSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type DailyOperatingHoursListRelationFilter = {
    every?: DailyOperatingHoursWhereInput
    some?: DailyOperatingHoursWhereInput
    none?: DailyOperatingHoursWhereInput
  }

  export type StaffingRuleListRelationFilter = {
    every?: StaffingRuleWhereInput
    some?: StaffingRuleWhereInput
    none?: StaffingRuleWhereInput
  }

  export type ScheduleOverrideListRelationFilter = {
    every?: ScheduleOverrideWhereInput
    some?: ScheduleOverrideWhereInput
    none?: ScheduleOverrideWhereInput
  }

  export type DailyOperatingHoursOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffingRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScheduleOverrideOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OperatingHoursTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    templateName?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    timezone?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperatingHoursTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    createdBy?: SortOrder
  }

  export type OperatingHoursTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    templateName?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    timezone?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperatingHoursTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    templateName?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    timezone?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OperatingHoursTemplateSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    createdBy?: SortOrder
  }

  export type OperatingHoursTemplateRelationFilter = {
    is?: OperatingHoursTemplateWhereInput
    isNot?: OperatingHoursTemplateWhereInput
  }

  export type HourlyStaffingRuleListRelationFilter = {
    every?: HourlyStaffingRuleWhereInput
    some?: HourlyStaffingRuleWhereInput
    none?: HourlyStaffingRuleWhereInput
  }

  export type HourlyStaffingRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DailyOperatingHoursTemplateIdDayOfWeekCompoundUniqueInput = {
    templateId: number
    dayOfWeek: number
  }

  export type DailyOperatingHoursCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    dayOfWeek?: SortOrder
    isOpen?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    breakStart?: SortOrder
    breakEnd?: SortOrder
    minStaff?: SortOrder
    maxStaff?: SortOrder
    notes?: SortOrder
  }

  export type DailyOperatingHoursAvgOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    dayOfWeek?: SortOrder
    minStaff?: SortOrder
    maxStaff?: SortOrder
  }

  export type DailyOperatingHoursMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    dayOfWeek?: SortOrder
    isOpen?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    breakStart?: SortOrder
    breakEnd?: SortOrder
    minStaff?: SortOrder
    maxStaff?: SortOrder
    notes?: SortOrder
  }

  export type DailyOperatingHoursMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    dayOfWeek?: SortOrder
    isOpen?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    breakStart?: SortOrder
    breakEnd?: SortOrder
    minStaff?: SortOrder
    maxStaff?: SortOrder
    notes?: SortOrder
  }

  export type DailyOperatingHoursSumOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    dayOfWeek?: SortOrder
    minStaff?: SortOrder
    maxStaff?: SortOrder
  }

  export type DailyOperatingHoursRelationFilter = {
    is?: DailyOperatingHoursWhereInput
    isNot?: DailyOperatingHoursWhereInput
  }

  export type HourlyStaffingRuleDailyHoursIdHourSlotCompoundUniqueInput = {
    dailyHoursId: number
    hourSlot: number
  }

  export type HourlyStaffingRuleCountOrderByAggregateInput = {
    id?: SortOrder
    dailyHoursId?: SortOrder
    hourSlot?: SortOrder
    requiredStaff?: SortOrder
    preferredStaff?: SortOrder
    maxStaff?: SortOrder
    priority?: SortOrder
    skillRequirement?: SortOrder
    notes?: SortOrder
  }

  export type HourlyStaffingRuleAvgOrderByAggregateInput = {
    id?: SortOrder
    dailyHoursId?: SortOrder
    hourSlot?: SortOrder
    requiredStaff?: SortOrder
    preferredStaff?: SortOrder
    maxStaff?: SortOrder
  }

  export type HourlyStaffingRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    dailyHoursId?: SortOrder
    hourSlot?: SortOrder
    requiredStaff?: SortOrder
    preferredStaff?: SortOrder
    maxStaff?: SortOrder
    priority?: SortOrder
    notes?: SortOrder
  }

  export type HourlyStaffingRuleMinOrderByAggregateInput = {
    id?: SortOrder
    dailyHoursId?: SortOrder
    hourSlot?: SortOrder
    requiredStaff?: SortOrder
    preferredStaff?: SortOrder
    maxStaff?: SortOrder
    priority?: SortOrder
    notes?: SortOrder
  }

  export type HourlyStaffingRuleSumOrderByAggregateInput = {
    id?: SortOrder
    dailyHoursId?: SortOrder
    hourSlot?: SortOrder
    requiredStaff?: SortOrder
    preferredStaff?: SortOrder
    maxStaff?: SortOrder
  }

  export type StaffingRuleCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    ruleName?: SortOrder
    ruleType?: SortOrder
    conditions?: SortOrder
    staffingRequirements?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffingRuleAvgOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    priority?: SortOrder
  }

  export type StaffingRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    ruleName?: SortOrder
    ruleType?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffingRuleMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    ruleName?: SortOrder
    ruleType?: SortOrder
    priority?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffingRuleSumOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    priority?: SortOrder
  }

  export type ScheduleOverrideTemplateIdOverrideDateCompoundUniqueInput = {
    templateId: number
    overrideDate: Date | string
  }

  export type ScheduleOverrideCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    overrideDate?: SortOrder
    overrideType?: SortOrder
    customHours?: SortOrder
    staffingOverride?: SortOrder
    reason?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleOverrideAvgOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    createdBy?: SortOrder
  }

  export type ScheduleOverrideMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    overrideDate?: SortOrder
    overrideType?: SortOrder
    reason?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleOverrideMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    overrideDate?: SortOrder
    overrideType?: SortOrder
    reason?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleOverrideSumOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    createdBy?: SortOrder
  }

  export type StaffingAnalyticsCompanyIdAnalysisDateCompoundUniqueInput = {
    companyId: number
    analysisDate: Date | string
  }

  export type StaffingAnalyticsCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    analysisDate?: SortOrder
    dayOfWeek?: SortOrder
    totalScheduledHours?: SortOrder
    totalRequiredHours?: SortOrder
    coverageRate?: SortOrder
    utilizationRate?: SortOrder
    shortfallHours?: SortOrder
    overstaffingHours?: SortOrder
    averageStaffPerHour?: SortOrder
    peakStaffingHour?: SortOrder
    lowStaffingHour?: SortOrder
    hourlyBreakdown?: SortOrder
    departmentBreakdown?: SortOrder
    skillGaps?: SortOrder
    costAnalysis?: SortOrder
    recommendations?: SortOrder
    createdAt?: SortOrder
  }

  export type StaffingAnalyticsAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    dayOfWeek?: SortOrder
    totalScheduledHours?: SortOrder
    totalRequiredHours?: SortOrder
    coverageRate?: SortOrder
    utilizationRate?: SortOrder
    shortfallHours?: SortOrder
    overstaffingHours?: SortOrder
    averageStaffPerHour?: SortOrder
    peakStaffingHour?: SortOrder
    lowStaffingHour?: SortOrder
  }

  export type StaffingAnalyticsMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    analysisDate?: SortOrder
    dayOfWeek?: SortOrder
    totalScheduledHours?: SortOrder
    totalRequiredHours?: SortOrder
    coverageRate?: SortOrder
    utilizationRate?: SortOrder
    shortfallHours?: SortOrder
    overstaffingHours?: SortOrder
    averageStaffPerHour?: SortOrder
    peakStaffingHour?: SortOrder
    lowStaffingHour?: SortOrder
    createdAt?: SortOrder
  }

  export type StaffingAnalyticsMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    analysisDate?: SortOrder
    dayOfWeek?: SortOrder
    totalScheduledHours?: SortOrder
    totalRequiredHours?: SortOrder
    coverageRate?: SortOrder
    utilizationRate?: SortOrder
    shortfallHours?: SortOrder
    overstaffingHours?: SortOrder
    averageStaffPerHour?: SortOrder
    peakStaffingHour?: SortOrder
    lowStaffingHour?: SortOrder
    createdAt?: SortOrder
  }

  export type StaffingAnalyticsSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    dayOfWeek?: SortOrder
    totalScheduledHours?: SortOrder
    totalRequiredHours?: SortOrder
    coverageRate?: SortOrder
    utilizationRate?: SortOrder
    shortfallHours?: SortOrder
    overstaffingHours?: SortOrder
    averageStaffPerHour?: SortOrder
    peakStaffingHour?: SortOrder
    lowStaffingHour?: SortOrder
  }

  export type ScheduleDraftNullableRelationFilter = {
    is?: ScheduleDraftWhereInput | null
    isNot?: ScheduleDraftWhereInput | null
  }

  export type ScheduleDraftCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    version?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    basedOnTemplateId?: SortOrder
    basedOnDraftId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvedBy?: SortOrder
    approvedAt?: SortOrder
    activatedAt?: SortOrder
    archivedAt?: SortOrder
    metadata?: SortOrder
    notes?: SortOrder
  }

  export type ScheduleDraftAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    basedOnTemplateId?: SortOrder
    basedOnDraftId?: SortOrder
    createdBy?: SortOrder
    approvedBy?: SortOrder
  }

  export type ScheduleDraftMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    version?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    basedOnTemplateId?: SortOrder
    basedOnDraftId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvedBy?: SortOrder
    approvedAt?: SortOrder
    activatedAt?: SortOrder
    archivedAt?: SortOrder
    notes?: SortOrder
  }

  export type ScheduleDraftMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    version?: SortOrder
    status?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    basedOnTemplateId?: SortOrder
    basedOnDraftId?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    approvedBy?: SortOrder
    approvedAt?: SortOrder
    activatedAt?: SortOrder
    archivedAt?: SortOrder
    notes?: SortOrder
  }

  export type ScheduleDraftSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    basedOnTemplateId?: SortOrder
    basedOnDraftId?: SortOrder
    createdBy?: SortOrder
    approvedBy?: SortOrder
  }

  export type ScheduleDraftRelationFilter = {
    is?: ScheduleDraftWhereInput
    isNot?: ScheduleDraftWhereInput
  }

  export type ScheduleDraftItemCountOrderByAggregateInput = {
    id?: SortOrder
    draftId?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    shiftPatternId?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    breakTime?: SortOrder
    estimatedWorkload?: SortOrder
    requirements?: SortOrder
    constraints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleDraftItemAvgOrderByAggregateInput = {
    id?: SortOrder
    draftId?: SortOrder
    employeeId?: SortOrder
    shiftPatternId?: SortOrder
  }

  export type ScheduleDraftItemMaxOrderByAggregateInput = {
    id?: SortOrder
    draftId?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    shiftPatternId?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    breakTime?: SortOrder
    estimatedWorkload?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleDraftItemMinOrderByAggregateInput = {
    id?: SortOrder
    draftId?: SortOrder
    employeeId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    shiftType?: SortOrder
    shiftPatternId?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    breakTime?: SortOrder
    estimatedWorkload?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleDraftItemSumOrderByAggregateInput = {
    id?: SortOrder
    draftId?: SortOrder
    employeeId?: SortOrder
    shiftPatternId?: SortOrder
  }

  export type CompanyCreateNestedOneWithoutUserInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    connect?: CompanyWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type LeaveCreateNestedManyWithoutReviewerInput = {
    create?: XOR<LeaveCreateWithoutReviewerInput, LeaveUncheckedCreateWithoutReviewerInput> | LeaveCreateWithoutReviewerInput[] | LeaveUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutReviewerInput | LeaveCreateOrConnectWithoutReviewerInput[]
    createMany?: LeaveCreateManyReviewerInputEnvelope
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
  }

  export type NoticeReadCreateNestedManyWithoutUserInput = {
    create?: XOR<NoticeReadCreateWithoutUserInput, NoticeReadUncheckedCreateWithoutUserInput> | NoticeReadCreateWithoutUserInput[] | NoticeReadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoticeReadCreateOrConnectWithoutUserInput | NoticeReadCreateOrConnectWithoutUserInput[]
    createMany?: NoticeReadCreateManyUserInputEnvelope
    connect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
  }

  export type NoticeCreateNestedManyWithoutCreatorInput = {
    create?: XOR<NoticeCreateWithoutCreatorInput, NoticeUncheckedCreateWithoutCreatorInput> | NoticeCreateWithoutCreatorInput[] | NoticeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: NoticeCreateOrConnectWithoutCreatorInput | NoticeCreateOrConnectWithoutCreatorInput[]
    createMany?: NoticeCreateManyCreatorInputEnvelope
    connect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    connect?: CompanyWhereUniqueInput
  }

  export type EmployeeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type LeaveUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<LeaveCreateWithoutReviewerInput, LeaveUncheckedCreateWithoutReviewerInput> | LeaveCreateWithoutReviewerInput[] | LeaveUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutReviewerInput | LeaveCreateOrConnectWithoutReviewerInput[]
    createMany?: LeaveCreateManyReviewerInputEnvelope
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
  }

  export type NoticeReadUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NoticeReadCreateWithoutUserInput, NoticeReadUncheckedCreateWithoutUserInput> | NoticeReadCreateWithoutUserInput[] | NoticeReadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoticeReadCreateOrConnectWithoutUserInput | NoticeReadCreateOrConnectWithoutUserInput[]
    createMany?: NoticeReadCreateManyUserInputEnvelope
    connect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
  }

  export type NoticeUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<NoticeCreateWithoutCreatorInput, NoticeUncheckedCreateWithoutCreatorInput> | NoticeCreateWithoutCreatorInput[] | NoticeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: NoticeCreateOrConnectWithoutCreatorInput | NoticeCreateOrConnectWithoutCreatorInput[]
    createMany?: NoticeCreateManyCreatorInputEnvelope
    connect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CompanyUpdateOneWithoutUserNestedInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    upsert?: CompanyUpsertWithoutUserInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUserInput, CompanyUpdateWithoutUserInput>, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type LeaveUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<LeaveCreateWithoutReviewerInput, LeaveUncheckedCreateWithoutReviewerInput> | LeaveCreateWithoutReviewerInput[] | LeaveUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutReviewerInput | LeaveCreateOrConnectWithoutReviewerInput[]
    upsert?: LeaveUpsertWithWhereUniqueWithoutReviewerInput | LeaveUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: LeaveCreateManyReviewerInputEnvelope
    set?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    disconnect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    delete?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    update?: LeaveUpdateWithWhereUniqueWithoutReviewerInput | LeaveUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: LeaveUpdateManyWithWhereWithoutReviewerInput | LeaveUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
  }

  export type NoticeReadUpdateManyWithoutUserNestedInput = {
    create?: XOR<NoticeReadCreateWithoutUserInput, NoticeReadUncheckedCreateWithoutUserInput> | NoticeReadCreateWithoutUserInput[] | NoticeReadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoticeReadCreateOrConnectWithoutUserInput | NoticeReadCreateOrConnectWithoutUserInput[]
    upsert?: NoticeReadUpsertWithWhereUniqueWithoutUserInput | NoticeReadUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NoticeReadCreateManyUserInputEnvelope
    set?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    disconnect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    delete?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    connect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    update?: NoticeReadUpdateWithWhereUniqueWithoutUserInput | NoticeReadUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NoticeReadUpdateManyWithWhereWithoutUserInput | NoticeReadUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NoticeReadScalarWhereInput | NoticeReadScalarWhereInput[]
  }

  export type NoticeUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<NoticeCreateWithoutCreatorInput, NoticeUncheckedCreateWithoutCreatorInput> | NoticeCreateWithoutCreatorInput[] | NoticeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: NoticeCreateOrConnectWithoutCreatorInput | NoticeCreateOrConnectWithoutCreatorInput[]
    upsert?: NoticeUpsertWithWhereUniqueWithoutCreatorInput | NoticeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: NoticeCreateManyCreatorInputEnvelope
    set?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    disconnect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    delete?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    connect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    update?: NoticeUpdateWithWhereUniqueWithoutCreatorInput | NoticeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: NoticeUpdateManyWithWhereWithoutCreatorInput | NoticeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: NoticeScalarWhereInput | NoticeScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    upsert?: CompanyUpsertWithoutUserInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUserInput, CompanyUpdateWithoutUserInput>, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type LeaveUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<LeaveCreateWithoutReviewerInput, LeaveUncheckedCreateWithoutReviewerInput> | LeaveCreateWithoutReviewerInput[] | LeaveUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutReviewerInput | LeaveCreateOrConnectWithoutReviewerInput[]
    upsert?: LeaveUpsertWithWhereUniqueWithoutReviewerInput | LeaveUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: LeaveCreateManyReviewerInputEnvelope
    set?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    disconnect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    delete?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    update?: LeaveUpdateWithWhereUniqueWithoutReviewerInput | LeaveUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: LeaveUpdateManyWithWhereWithoutReviewerInput | LeaveUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
  }

  export type NoticeReadUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NoticeReadCreateWithoutUserInput, NoticeReadUncheckedCreateWithoutUserInput> | NoticeReadCreateWithoutUserInput[] | NoticeReadUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NoticeReadCreateOrConnectWithoutUserInput | NoticeReadCreateOrConnectWithoutUserInput[]
    upsert?: NoticeReadUpsertWithWhereUniqueWithoutUserInput | NoticeReadUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NoticeReadCreateManyUserInputEnvelope
    set?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    disconnect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    delete?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    connect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    update?: NoticeReadUpdateWithWhereUniqueWithoutUserInput | NoticeReadUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NoticeReadUpdateManyWithWhereWithoutUserInput | NoticeReadUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NoticeReadScalarWhereInput | NoticeReadScalarWhereInput[]
  }

  export type NoticeUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<NoticeCreateWithoutCreatorInput, NoticeUncheckedCreateWithoutCreatorInput> | NoticeCreateWithoutCreatorInput[] | NoticeUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: NoticeCreateOrConnectWithoutCreatorInput | NoticeCreateOrConnectWithoutCreatorInput[]
    upsert?: NoticeUpsertWithWhereUniqueWithoutCreatorInput | NoticeUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: NoticeCreateManyCreatorInputEnvelope
    set?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    disconnect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    delete?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    connect?: NoticeWhereUniqueInput | NoticeWhereUniqueInput[]
    update?: NoticeUpdateWithWhereUniqueWithoutCreatorInput | NoticeUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: NoticeUpdateManyWithWhereWithoutCreatorInput | NoticeUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: NoticeScalarWhereInput | NoticeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput
    connect?: UserWhereUniqueInput
  }

  export type ShiftPatternCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ShiftPatternCreateWithoutCompanyInput, ShiftPatternUncheckedCreateWithoutCompanyInput> | ShiftPatternCreateWithoutCompanyInput[] | ShiftPatternUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutCompanyInput | ShiftPatternCreateOrConnectWithoutCompanyInput[]
    createMany?: ShiftPatternCreateManyCompanyInputEnvelope
    connect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
  }

  export type OperatingHoursTemplateCreateNestedManyWithoutCompanyInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutCompanyInput, OperatingHoursTemplateUncheckedCreateWithoutCompanyInput> | OperatingHoursTemplateCreateWithoutCompanyInput[] | OperatingHoursTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutCompanyInput | OperatingHoursTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: OperatingHoursTemplateCreateManyCompanyInputEnvelope
    connect?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
  }

  export type ShiftPatternUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ShiftPatternCreateWithoutCompanyInput, ShiftPatternUncheckedCreateWithoutCompanyInput> | ShiftPatternCreateWithoutCompanyInput[] | ShiftPatternUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutCompanyInput | ShiftPatternCreateOrConnectWithoutCompanyInput[]
    createMany?: ShiftPatternCreateManyCompanyInputEnvelope
    connect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
  }

  export type OperatingHoursTemplateUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutCompanyInput, OperatingHoursTemplateUncheckedCreateWithoutCompanyInput> | OperatingHoursTemplateCreateWithoutCompanyInput[] | OperatingHoursTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutCompanyInput | OperatingHoursTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: OperatingHoursTemplateCreateManyCompanyInputEnvelope
    connect?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput
    upsert?: UserUpsertWithoutCompanyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompanyInput, UserUpdateWithoutCompanyInput>, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type ShiftPatternUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ShiftPatternCreateWithoutCompanyInput, ShiftPatternUncheckedCreateWithoutCompanyInput> | ShiftPatternCreateWithoutCompanyInput[] | ShiftPatternUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutCompanyInput | ShiftPatternCreateOrConnectWithoutCompanyInput[]
    upsert?: ShiftPatternUpsertWithWhereUniqueWithoutCompanyInput | ShiftPatternUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ShiftPatternCreateManyCompanyInputEnvelope
    set?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    disconnect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    delete?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    connect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    update?: ShiftPatternUpdateWithWhereUniqueWithoutCompanyInput | ShiftPatternUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ShiftPatternUpdateManyWithWhereWithoutCompanyInput | ShiftPatternUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ShiftPatternScalarWhereInput | ShiftPatternScalarWhereInput[]
  }

  export type OperatingHoursTemplateUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutCompanyInput, OperatingHoursTemplateUncheckedCreateWithoutCompanyInput> | OperatingHoursTemplateCreateWithoutCompanyInput[] | OperatingHoursTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutCompanyInput | OperatingHoursTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: OperatingHoursTemplateUpsertWithWhereUniqueWithoutCompanyInput | OperatingHoursTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: OperatingHoursTemplateCreateManyCompanyInputEnvelope
    set?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
    disconnect?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
    delete?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
    connect?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
    update?: OperatingHoursTemplateUpdateWithWhereUniqueWithoutCompanyInput | OperatingHoursTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: OperatingHoursTemplateUpdateManyWithWhereWithoutCompanyInput | OperatingHoursTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: OperatingHoursTemplateScalarWhereInput | OperatingHoursTemplateScalarWhereInput[]
  }

  export type ShiftPatternUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ShiftPatternCreateWithoutCompanyInput, ShiftPatternUncheckedCreateWithoutCompanyInput> | ShiftPatternCreateWithoutCompanyInput[] | ShiftPatternUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutCompanyInput | ShiftPatternCreateOrConnectWithoutCompanyInput[]
    upsert?: ShiftPatternUpsertWithWhereUniqueWithoutCompanyInput | ShiftPatternUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ShiftPatternCreateManyCompanyInputEnvelope
    set?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    disconnect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    delete?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    connect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    update?: ShiftPatternUpdateWithWhereUniqueWithoutCompanyInput | ShiftPatternUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ShiftPatternUpdateManyWithWhereWithoutCompanyInput | ShiftPatternUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ShiftPatternScalarWhereInput | ShiftPatternScalarWhereInput[]
  }

  export type OperatingHoursTemplateUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutCompanyInput, OperatingHoursTemplateUncheckedCreateWithoutCompanyInput> | OperatingHoursTemplateCreateWithoutCompanyInput[] | OperatingHoursTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutCompanyInput | OperatingHoursTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: OperatingHoursTemplateUpsertWithWhereUniqueWithoutCompanyInput | OperatingHoursTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: OperatingHoursTemplateCreateManyCompanyInputEnvelope
    set?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
    disconnect?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
    delete?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
    connect?: OperatingHoursTemplateWhereUniqueInput | OperatingHoursTemplateWhereUniqueInput[]
    update?: OperatingHoursTemplateUpdateWithWhereUniqueWithoutCompanyInput | OperatingHoursTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: OperatingHoursTemplateUpdateManyWithWhereWithoutCompanyInput | OperatingHoursTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: OperatingHoursTemplateScalarWhereInput | OperatingHoursTemplateScalarWhereInput[]
  }

  export type AbilityCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<AbilityCreateWithoutEmployeeInput, AbilityUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: AbilityCreateOrConnectWithoutEmployeeInput
    connect?: AbilityWhereUniqueInput
  }

  export type EmployeeCertificationCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeCertificationCreateWithoutEmployeeInput, EmployeeCertificationUncheckedCreateWithoutEmployeeInput> | EmployeeCertificationCreateWithoutEmployeeInput[] | EmployeeCertificationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeCertificationCreateOrConnectWithoutEmployeeInput | EmployeeCertificationCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeCertificationCreateManyEmployeeInputEnvelope
    connect?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
  }

  export type EmployeeChemistryCreateNestedManyWithoutEmployee1Input = {
    create?: XOR<EmployeeChemistryCreateWithoutEmployee1Input, EmployeeChemistryUncheckedCreateWithoutEmployee1Input> | EmployeeChemistryCreateWithoutEmployee1Input[] | EmployeeChemistryUncheckedCreateWithoutEmployee1Input[]
    connectOrCreate?: EmployeeChemistryCreateOrConnectWithoutEmployee1Input | EmployeeChemistryCreateOrConnectWithoutEmployee1Input[]
    createMany?: EmployeeChemistryCreateManyEmployee1InputEnvelope
    connect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
  }

  export type EmployeeChemistryCreateNestedManyWithoutEmployee2Input = {
    create?: XOR<EmployeeChemistryCreateWithoutEmployee2Input, EmployeeChemistryUncheckedCreateWithoutEmployee2Input> | EmployeeChemistryCreateWithoutEmployee2Input[] | EmployeeChemistryUncheckedCreateWithoutEmployee2Input[]
    connectOrCreate?: EmployeeChemistryCreateOrConnectWithoutEmployee2Input | EmployeeChemistryCreateOrConnectWithoutEmployee2Input[]
    createMany?: EmployeeChemistryCreateManyEmployee2InputEnvelope
    connect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
  }

  export type EmployeeConstraintsCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<EmployeeConstraintsCreateWithoutEmployeeInput, EmployeeConstraintsUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: EmployeeConstraintsCreateOrConnectWithoutEmployeeInput
    connect?: EmployeeConstraintsWhereUniqueInput
  }

  export type EmployeeNoteCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeNoteCreateWithoutEmployeeInput, EmployeeNoteUncheckedCreateWithoutEmployeeInput> | EmployeeNoteCreateWithoutEmployeeInput[] | EmployeeNoteUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeNoteCreateOrConnectWithoutEmployeeInput | EmployeeNoteCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeNoteCreateManyEmployeeInputEnvelope
    connect?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    connect?: UserWhereUniqueInput
  }

  export type LeaveCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput> | LeaveCreateWithoutEmployeeInput[] | LeaveUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutEmployeeInput | LeaveCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveCreateManyEmployeeInputEnvelope
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
  }

  export type PreferenceCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<PreferenceCreateWithoutEmployeeInput, PreferenceUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: PreferenceCreateOrConnectWithoutEmployeeInput
    connect?: PreferenceWhereUniqueInput
  }

  export type ScheduleCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput> | ScheduleCreateWithoutEmployeeInput[] | ScheduleUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutEmployeeInput | ScheduleCreateOrConnectWithoutEmployeeInput[]
    createMany?: ScheduleCreateManyEmployeeInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleDraftItemCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutEmployeeInput, ScheduleDraftItemUncheckedCreateWithoutEmployeeInput> | ScheduleDraftItemCreateWithoutEmployeeInput[] | ScheduleDraftItemUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutEmployeeInput | ScheduleDraftItemCreateOrConnectWithoutEmployeeInput[]
    createMany?: ScheduleDraftItemCreateManyEmployeeInputEnvelope
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
  }

  export type AbilityUncheckedCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<AbilityCreateWithoutEmployeeInput, AbilityUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: AbilityCreateOrConnectWithoutEmployeeInput
    connect?: AbilityWhereUniqueInput
  }

  export type EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeCertificationCreateWithoutEmployeeInput, EmployeeCertificationUncheckedCreateWithoutEmployeeInput> | EmployeeCertificationCreateWithoutEmployeeInput[] | EmployeeCertificationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeCertificationCreateOrConnectWithoutEmployeeInput | EmployeeCertificationCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeCertificationCreateManyEmployeeInputEnvelope
    connect?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
  }

  export type EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input = {
    create?: XOR<EmployeeChemistryCreateWithoutEmployee1Input, EmployeeChemistryUncheckedCreateWithoutEmployee1Input> | EmployeeChemistryCreateWithoutEmployee1Input[] | EmployeeChemistryUncheckedCreateWithoutEmployee1Input[]
    connectOrCreate?: EmployeeChemistryCreateOrConnectWithoutEmployee1Input | EmployeeChemistryCreateOrConnectWithoutEmployee1Input[]
    createMany?: EmployeeChemistryCreateManyEmployee1InputEnvelope
    connect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
  }

  export type EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input = {
    create?: XOR<EmployeeChemistryCreateWithoutEmployee2Input, EmployeeChemistryUncheckedCreateWithoutEmployee2Input> | EmployeeChemistryCreateWithoutEmployee2Input[] | EmployeeChemistryUncheckedCreateWithoutEmployee2Input[]
    connectOrCreate?: EmployeeChemistryCreateOrConnectWithoutEmployee2Input | EmployeeChemistryCreateOrConnectWithoutEmployee2Input[]
    createMany?: EmployeeChemistryCreateManyEmployee2InputEnvelope
    connect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
  }

  export type EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<EmployeeConstraintsCreateWithoutEmployeeInput, EmployeeConstraintsUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: EmployeeConstraintsCreateOrConnectWithoutEmployeeInput
    connect?: EmployeeConstraintsWhereUniqueInput
  }

  export type EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<EmployeeNoteCreateWithoutEmployeeInput, EmployeeNoteUncheckedCreateWithoutEmployeeInput> | EmployeeNoteCreateWithoutEmployeeInput[] | EmployeeNoteUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeNoteCreateOrConnectWithoutEmployeeInput | EmployeeNoteCreateOrConnectWithoutEmployeeInput[]
    createMany?: EmployeeNoteCreateManyEmployeeInputEnvelope
    connect?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
  }

  export type LeaveUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput> | LeaveCreateWithoutEmployeeInput[] | LeaveUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutEmployeeInput | LeaveCreateOrConnectWithoutEmployeeInput[]
    createMany?: LeaveCreateManyEmployeeInputEnvelope
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
  }

  export type PreferenceUncheckedCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<PreferenceCreateWithoutEmployeeInput, PreferenceUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: PreferenceCreateOrConnectWithoutEmployeeInput
    connect?: PreferenceWhereUniqueInput
  }

  export type ScheduleUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput> | ScheduleCreateWithoutEmployeeInput[] | ScheduleUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutEmployeeInput | ScheduleCreateOrConnectWithoutEmployeeInput[]
    createMany?: ScheduleCreateManyEmployeeInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutEmployeeInput, ScheduleDraftItemUncheckedCreateWithoutEmployeeInput> | ScheduleDraftItemCreateWithoutEmployeeInput[] | ScheduleDraftItemUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutEmployeeInput | ScheduleDraftItemCreateOrConnectWithoutEmployeeInput[]
    createMany?: ScheduleDraftItemCreateManyEmployeeInputEnvelope
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
  }

  export type AbilityUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<AbilityCreateWithoutEmployeeInput, AbilityUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: AbilityCreateOrConnectWithoutEmployeeInput
    upsert?: AbilityUpsertWithoutEmployeeInput
    disconnect?: AbilityWhereInput | boolean
    delete?: AbilityWhereInput | boolean
    connect?: AbilityWhereUniqueInput
    update?: XOR<XOR<AbilityUpdateToOneWithWhereWithoutEmployeeInput, AbilityUpdateWithoutEmployeeInput>, AbilityUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeCertificationUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeCertificationCreateWithoutEmployeeInput, EmployeeCertificationUncheckedCreateWithoutEmployeeInput> | EmployeeCertificationCreateWithoutEmployeeInput[] | EmployeeCertificationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeCertificationCreateOrConnectWithoutEmployeeInput | EmployeeCertificationCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeCertificationUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeCertificationUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeCertificationCreateManyEmployeeInputEnvelope
    set?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
    disconnect?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
    delete?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
    connect?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
    update?: EmployeeCertificationUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeCertificationUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeCertificationUpdateManyWithWhereWithoutEmployeeInput | EmployeeCertificationUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeCertificationScalarWhereInput | EmployeeCertificationScalarWhereInput[]
  }

  export type EmployeeChemistryUpdateManyWithoutEmployee1NestedInput = {
    create?: XOR<EmployeeChemistryCreateWithoutEmployee1Input, EmployeeChemistryUncheckedCreateWithoutEmployee1Input> | EmployeeChemistryCreateWithoutEmployee1Input[] | EmployeeChemistryUncheckedCreateWithoutEmployee1Input[]
    connectOrCreate?: EmployeeChemistryCreateOrConnectWithoutEmployee1Input | EmployeeChemistryCreateOrConnectWithoutEmployee1Input[]
    upsert?: EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee1Input | EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee1Input[]
    createMany?: EmployeeChemistryCreateManyEmployee1InputEnvelope
    set?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    disconnect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    delete?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    connect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    update?: EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee1Input | EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee1Input[]
    updateMany?: EmployeeChemistryUpdateManyWithWhereWithoutEmployee1Input | EmployeeChemistryUpdateManyWithWhereWithoutEmployee1Input[]
    deleteMany?: EmployeeChemistryScalarWhereInput | EmployeeChemistryScalarWhereInput[]
  }

  export type EmployeeChemistryUpdateManyWithoutEmployee2NestedInput = {
    create?: XOR<EmployeeChemistryCreateWithoutEmployee2Input, EmployeeChemistryUncheckedCreateWithoutEmployee2Input> | EmployeeChemistryCreateWithoutEmployee2Input[] | EmployeeChemistryUncheckedCreateWithoutEmployee2Input[]
    connectOrCreate?: EmployeeChemistryCreateOrConnectWithoutEmployee2Input | EmployeeChemistryCreateOrConnectWithoutEmployee2Input[]
    upsert?: EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee2Input | EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee2Input[]
    createMany?: EmployeeChemistryCreateManyEmployee2InputEnvelope
    set?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    disconnect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    delete?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    connect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    update?: EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee2Input | EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee2Input[]
    updateMany?: EmployeeChemistryUpdateManyWithWhereWithoutEmployee2Input | EmployeeChemistryUpdateManyWithWhereWithoutEmployee2Input[]
    deleteMany?: EmployeeChemistryScalarWhereInput | EmployeeChemistryScalarWhereInput[]
  }

  export type EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeConstraintsCreateWithoutEmployeeInput, EmployeeConstraintsUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: EmployeeConstraintsCreateOrConnectWithoutEmployeeInput
    upsert?: EmployeeConstraintsUpsertWithoutEmployeeInput
    disconnect?: EmployeeConstraintsWhereInput | boolean
    delete?: EmployeeConstraintsWhereInput | boolean
    connect?: EmployeeConstraintsWhereUniqueInput
    update?: XOR<XOR<EmployeeConstraintsUpdateToOneWithWhereWithoutEmployeeInput, EmployeeConstraintsUpdateWithoutEmployeeInput>, EmployeeConstraintsUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeNoteUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeNoteCreateWithoutEmployeeInput, EmployeeNoteUncheckedCreateWithoutEmployeeInput> | EmployeeNoteCreateWithoutEmployeeInput[] | EmployeeNoteUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeNoteCreateOrConnectWithoutEmployeeInput | EmployeeNoteCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeNoteUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeNoteUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeNoteCreateManyEmployeeInputEnvelope
    set?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
    disconnect?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
    delete?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
    connect?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
    update?: EmployeeNoteUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeNoteUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeNoteUpdateManyWithWhereWithoutEmployeeInput | EmployeeNoteUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeNoteScalarWhereInput | EmployeeNoteScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutEmployeeNestedInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    upsert?: UserUpsertWithoutEmployeeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeeInput, UserUpdateWithoutEmployeeInput>, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type LeaveUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput> | LeaveCreateWithoutEmployeeInput[] | LeaveUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutEmployeeInput | LeaveCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveUpsertWithWhereUniqueWithoutEmployeeInput | LeaveUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveCreateManyEmployeeInputEnvelope
    set?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    disconnect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    delete?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    update?: LeaveUpdateWithWhereUniqueWithoutEmployeeInput | LeaveUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveUpdateManyWithWhereWithoutEmployeeInput | LeaveUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
  }

  export type PreferenceUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<PreferenceCreateWithoutEmployeeInput, PreferenceUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: PreferenceCreateOrConnectWithoutEmployeeInput
    upsert?: PreferenceUpsertWithoutEmployeeInput
    disconnect?: PreferenceWhereInput | boolean
    delete?: PreferenceWhereInput | boolean
    connect?: PreferenceWhereUniqueInput
    update?: XOR<XOR<PreferenceUpdateToOneWithWhereWithoutEmployeeInput, PreferenceUpdateWithoutEmployeeInput>, PreferenceUncheckedUpdateWithoutEmployeeInput>
  }

  export type ScheduleUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput> | ScheduleCreateWithoutEmployeeInput[] | ScheduleUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutEmployeeInput | ScheduleCreateOrConnectWithoutEmployeeInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutEmployeeInput | ScheduleUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ScheduleCreateManyEmployeeInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutEmployeeInput | ScheduleUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutEmployeeInput | ScheduleUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutEmployeeInput, ScheduleDraftItemUncheckedCreateWithoutEmployeeInput> | ScheduleDraftItemCreateWithoutEmployeeInput[] | ScheduleDraftItemUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutEmployeeInput | ScheduleDraftItemCreateOrConnectWithoutEmployeeInput[]
    upsert?: ScheduleDraftItemUpsertWithWhereUniqueWithoutEmployeeInput | ScheduleDraftItemUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ScheduleDraftItemCreateManyEmployeeInputEnvelope
    set?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    disconnect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    delete?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    update?: ScheduleDraftItemUpdateWithWhereUniqueWithoutEmployeeInput | ScheduleDraftItemUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ScheduleDraftItemUpdateManyWithWhereWithoutEmployeeInput | ScheduleDraftItemUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ScheduleDraftItemScalarWhereInput | ScheduleDraftItemScalarWhereInput[]
  }

  export type AbilityUncheckedUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<AbilityCreateWithoutEmployeeInput, AbilityUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: AbilityCreateOrConnectWithoutEmployeeInput
    upsert?: AbilityUpsertWithoutEmployeeInput
    disconnect?: AbilityWhereInput | boolean
    delete?: AbilityWhereInput | boolean
    connect?: AbilityWhereUniqueInput
    update?: XOR<XOR<AbilityUpdateToOneWithWhereWithoutEmployeeInput, AbilityUpdateWithoutEmployeeInput>, AbilityUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeCertificationCreateWithoutEmployeeInput, EmployeeCertificationUncheckedCreateWithoutEmployeeInput> | EmployeeCertificationCreateWithoutEmployeeInput[] | EmployeeCertificationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeCertificationCreateOrConnectWithoutEmployeeInput | EmployeeCertificationCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeCertificationUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeCertificationUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeCertificationCreateManyEmployeeInputEnvelope
    set?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
    disconnect?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
    delete?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
    connect?: EmployeeCertificationWhereUniqueInput | EmployeeCertificationWhereUniqueInput[]
    update?: EmployeeCertificationUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeCertificationUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeCertificationUpdateManyWithWhereWithoutEmployeeInput | EmployeeCertificationUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeCertificationScalarWhereInput | EmployeeCertificationScalarWhereInput[]
  }

  export type EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput = {
    create?: XOR<EmployeeChemistryCreateWithoutEmployee1Input, EmployeeChemistryUncheckedCreateWithoutEmployee1Input> | EmployeeChemistryCreateWithoutEmployee1Input[] | EmployeeChemistryUncheckedCreateWithoutEmployee1Input[]
    connectOrCreate?: EmployeeChemistryCreateOrConnectWithoutEmployee1Input | EmployeeChemistryCreateOrConnectWithoutEmployee1Input[]
    upsert?: EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee1Input | EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee1Input[]
    createMany?: EmployeeChemistryCreateManyEmployee1InputEnvelope
    set?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    disconnect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    delete?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    connect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    update?: EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee1Input | EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee1Input[]
    updateMany?: EmployeeChemistryUpdateManyWithWhereWithoutEmployee1Input | EmployeeChemistryUpdateManyWithWhereWithoutEmployee1Input[]
    deleteMany?: EmployeeChemistryScalarWhereInput | EmployeeChemistryScalarWhereInput[]
  }

  export type EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput = {
    create?: XOR<EmployeeChemistryCreateWithoutEmployee2Input, EmployeeChemistryUncheckedCreateWithoutEmployee2Input> | EmployeeChemistryCreateWithoutEmployee2Input[] | EmployeeChemistryUncheckedCreateWithoutEmployee2Input[]
    connectOrCreate?: EmployeeChemistryCreateOrConnectWithoutEmployee2Input | EmployeeChemistryCreateOrConnectWithoutEmployee2Input[]
    upsert?: EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee2Input | EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee2Input[]
    createMany?: EmployeeChemistryCreateManyEmployee2InputEnvelope
    set?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    disconnect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    delete?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    connect?: EmployeeChemistryWhereUniqueInput | EmployeeChemistryWhereUniqueInput[]
    update?: EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee2Input | EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee2Input[]
    updateMany?: EmployeeChemistryUpdateManyWithWhereWithoutEmployee2Input | EmployeeChemistryUpdateManyWithWhereWithoutEmployee2Input[]
    deleteMany?: EmployeeChemistryScalarWhereInput | EmployeeChemistryScalarWhereInput[]
  }

  export type EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeConstraintsCreateWithoutEmployeeInput, EmployeeConstraintsUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: EmployeeConstraintsCreateOrConnectWithoutEmployeeInput
    upsert?: EmployeeConstraintsUpsertWithoutEmployeeInput
    disconnect?: EmployeeConstraintsWhereInput | boolean
    delete?: EmployeeConstraintsWhereInput | boolean
    connect?: EmployeeConstraintsWhereUniqueInput
    update?: XOR<XOR<EmployeeConstraintsUpdateToOneWithWhereWithoutEmployeeInput, EmployeeConstraintsUpdateWithoutEmployeeInput>, EmployeeConstraintsUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<EmployeeNoteCreateWithoutEmployeeInput, EmployeeNoteUncheckedCreateWithoutEmployeeInput> | EmployeeNoteCreateWithoutEmployeeInput[] | EmployeeNoteUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: EmployeeNoteCreateOrConnectWithoutEmployeeInput | EmployeeNoteCreateOrConnectWithoutEmployeeInput[]
    upsert?: EmployeeNoteUpsertWithWhereUniqueWithoutEmployeeInput | EmployeeNoteUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: EmployeeNoteCreateManyEmployeeInputEnvelope
    set?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
    disconnect?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
    delete?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
    connect?: EmployeeNoteWhereUniqueInput | EmployeeNoteWhereUniqueInput[]
    update?: EmployeeNoteUpdateWithWhereUniqueWithoutEmployeeInput | EmployeeNoteUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: EmployeeNoteUpdateManyWithWhereWithoutEmployeeInput | EmployeeNoteUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: EmployeeNoteScalarWhereInput | EmployeeNoteScalarWhereInput[]
  }

  export type LeaveUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput> | LeaveCreateWithoutEmployeeInput[] | LeaveUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutEmployeeInput | LeaveCreateOrConnectWithoutEmployeeInput[]
    upsert?: LeaveUpsertWithWhereUniqueWithoutEmployeeInput | LeaveUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: LeaveCreateManyEmployeeInputEnvelope
    set?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    disconnect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    delete?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    update?: LeaveUpdateWithWhereUniqueWithoutEmployeeInput | LeaveUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: LeaveUpdateManyWithWhereWithoutEmployeeInput | LeaveUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
  }

  export type PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<PreferenceCreateWithoutEmployeeInput, PreferenceUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: PreferenceCreateOrConnectWithoutEmployeeInput
    upsert?: PreferenceUpsertWithoutEmployeeInput
    disconnect?: PreferenceWhereInput | boolean
    delete?: PreferenceWhereInput | boolean
    connect?: PreferenceWhereUniqueInput
    update?: XOR<XOR<PreferenceUpdateToOneWithWhereWithoutEmployeeInput, PreferenceUpdateWithoutEmployeeInput>, PreferenceUncheckedUpdateWithoutEmployeeInput>
  }

  export type ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput> | ScheduleCreateWithoutEmployeeInput[] | ScheduleUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutEmployeeInput | ScheduleCreateOrConnectWithoutEmployeeInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutEmployeeInput | ScheduleUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ScheduleCreateManyEmployeeInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutEmployeeInput | ScheduleUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutEmployeeInput | ScheduleUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutEmployeeInput, ScheduleDraftItemUncheckedCreateWithoutEmployeeInput> | ScheduleDraftItemCreateWithoutEmployeeInput[] | ScheduleDraftItemUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutEmployeeInput | ScheduleDraftItemCreateOrConnectWithoutEmployeeInput[]
    upsert?: ScheduleDraftItemUpsertWithWhereUniqueWithoutEmployeeInput | ScheduleDraftItemUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ScheduleDraftItemCreateManyEmployeeInputEnvelope
    set?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    disconnect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    delete?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    update?: ScheduleDraftItemUpdateWithWhereUniqueWithoutEmployeeInput | ScheduleDraftItemUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ScheduleDraftItemUpdateManyWithWhereWithoutEmployeeInput | ScheduleDraftItemUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ScheduleDraftItemScalarWhereInput | ScheduleDraftItemScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutAbilitiesInput = {
    create?: XOR<EmployeeCreateWithoutAbilitiesInput, EmployeeUncheckedCreateWithoutAbilitiesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAbilitiesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutAbilitiesNestedInput = {
    create?: XOR<EmployeeCreateWithoutAbilitiesInput, EmployeeUncheckedCreateWithoutAbilitiesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAbilitiesInput
    upsert?: EmployeeUpsertWithoutAbilitiesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutAbilitiesInput, EmployeeUpdateWithoutAbilitiesInput>, EmployeeUncheckedUpdateWithoutAbilitiesInput>
  }

  export type EmployeeCreateNestedOneWithoutPreferencesInput = {
    create?: XOR<EmployeeCreateWithoutPreferencesInput, EmployeeUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPreferencesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutPreferencesNestedInput = {
    create?: XOR<EmployeeCreateWithoutPreferencesInput, EmployeeUncheckedCreateWithoutPreferencesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPreferencesInput
    upsert?: EmployeeUpsertWithoutPreferencesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPreferencesInput, EmployeeUpdateWithoutPreferencesInput>, EmployeeUncheckedUpdateWithoutPreferencesInput>
  }

  export type EmployeeCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<EmployeeCreateWithoutSchedulesInput, EmployeeUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSchedulesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type GenerationLogCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<GenerationLogCreateWithoutSchedulesInput, GenerationLogUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: GenerationLogCreateOrConnectWithoutSchedulesInput
    connect?: GenerationLogWhereUniqueInput
  }

  export type ShiftPatternCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<ShiftPatternCreateWithoutSchedulesInput, ShiftPatternUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutSchedulesInput
    connect?: ShiftPatternWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<EmployeeCreateWithoutSchedulesInput, EmployeeUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSchedulesInput
    upsert?: EmployeeUpsertWithoutSchedulesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutSchedulesInput, EmployeeUpdateWithoutSchedulesInput>, EmployeeUncheckedUpdateWithoutSchedulesInput>
  }

  export type GenerationLogUpdateOneWithoutSchedulesNestedInput = {
    create?: XOR<GenerationLogCreateWithoutSchedulesInput, GenerationLogUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: GenerationLogCreateOrConnectWithoutSchedulesInput
    upsert?: GenerationLogUpsertWithoutSchedulesInput
    disconnect?: GenerationLogWhereInput | boolean
    delete?: GenerationLogWhereInput | boolean
    connect?: GenerationLogWhereUniqueInput
    update?: XOR<XOR<GenerationLogUpdateToOneWithWhereWithoutSchedulesInput, GenerationLogUpdateWithoutSchedulesInput>, GenerationLogUncheckedUpdateWithoutSchedulesInput>
  }

  export type ShiftPatternUpdateOneWithoutSchedulesNestedInput = {
    create?: XOR<ShiftPatternCreateWithoutSchedulesInput, ShiftPatternUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutSchedulesInput
    upsert?: ShiftPatternUpsertWithoutSchedulesInput
    disconnect?: ShiftPatternWhereInput | boolean
    delete?: ShiftPatternWhereInput | boolean
    connect?: ShiftPatternWhereUniqueInput
    update?: XOR<XOR<ShiftPatternUpdateToOneWithWhereWithoutSchedulesInput, ShiftPatternUpdateWithoutSchedulesInput>, ShiftPatternUncheckedUpdateWithoutSchedulesInput>
  }

  export type EmployeeCreateNestedOneWithoutLeavesInput = {
    create?: XOR<EmployeeCreateWithoutLeavesInput, EmployeeUncheckedCreateWithoutLeavesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeavesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReviewedLeavesInput = {
    create?: XOR<UserCreateWithoutReviewedLeavesInput, UserUncheckedCreateWithoutReviewedLeavesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewedLeavesInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EmployeeUpdateOneRequiredWithoutLeavesNestedInput = {
    create?: XOR<EmployeeCreateWithoutLeavesInput, EmployeeUncheckedCreateWithoutLeavesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutLeavesInput
    upsert?: EmployeeUpsertWithoutLeavesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutLeavesInput, EmployeeUpdateWithoutLeavesInput>, EmployeeUncheckedUpdateWithoutLeavesInput>
  }

  export type UserUpdateOneWithoutReviewedLeavesNestedInput = {
    create?: XOR<UserCreateWithoutReviewedLeavesInput, UserUncheckedCreateWithoutReviewedLeavesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewedLeavesInput
    upsert?: UserUpsertWithoutReviewedLeavesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewedLeavesInput, UserUpdateWithoutReviewedLeavesInput>, UserUncheckedUpdateWithoutReviewedLeavesInput>
  }

  export type EmployeeCreateNestedOneWithoutNotesInput = {
    create?: XOR<EmployeeCreateWithoutNotesInput, EmployeeUncheckedCreateWithoutNotesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutNotesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<EmployeeCreateWithoutNotesInput, EmployeeUncheckedCreateWithoutNotesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutNotesInput
    upsert?: EmployeeUpsertWithoutNotesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutNotesInput, EmployeeUpdateWithoutNotesInput>, EmployeeUncheckedUpdateWithoutNotesInput>
  }

  export type EmployeeCreateNestedOneWithoutChemistry1Input = {
    create?: XOR<EmployeeCreateWithoutChemistry1Input, EmployeeUncheckedCreateWithoutChemistry1Input>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistry1Input
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutChemistry2Input = {
    create?: XOR<EmployeeCreateWithoutChemistry2Input, EmployeeUncheckedCreateWithoutChemistry2Input>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistry2Input
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutChemistry1NestedInput = {
    create?: XOR<EmployeeCreateWithoutChemistry1Input, EmployeeUncheckedCreateWithoutChemistry1Input>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistry1Input
    upsert?: EmployeeUpsertWithoutChemistry1Input
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutChemistry1Input, EmployeeUpdateWithoutChemistry1Input>, EmployeeUncheckedUpdateWithoutChemistry1Input>
  }

  export type EmployeeUpdateOneRequiredWithoutChemistry2NestedInput = {
    create?: XOR<EmployeeCreateWithoutChemistry2Input, EmployeeUncheckedCreateWithoutChemistry2Input>
    connectOrCreate?: EmployeeCreateOrConnectWithoutChemistry2Input
    upsert?: EmployeeUpsertWithoutChemistry2Input
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutChemistry2Input, EmployeeUpdateWithoutChemistry2Input>, EmployeeUncheckedUpdateWithoutChemistry2Input>
  }

  export type NoticeReadCreateNestedManyWithoutNoticeInput = {
    create?: XOR<NoticeReadCreateWithoutNoticeInput, NoticeReadUncheckedCreateWithoutNoticeInput> | NoticeReadCreateWithoutNoticeInput[] | NoticeReadUncheckedCreateWithoutNoticeInput[]
    connectOrCreate?: NoticeReadCreateOrConnectWithoutNoticeInput | NoticeReadCreateOrConnectWithoutNoticeInput[]
    createMany?: NoticeReadCreateManyNoticeInputEnvelope
    connect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedNoticesInput = {
    create?: XOR<UserCreateWithoutCreatedNoticesInput, UserUncheckedCreateWithoutCreatedNoticesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedNoticesInput
    connect?: UserWhereUniqueInput
  }

  export type NoticeReadUncheckedCreateNestedManyWithoutNoticeInput = {
    create?: XOR<NoticeReadCreateWithoutNoticeInput, NoticeReadUncheckedCreateWithoutNoticeInput> | NoticeReadCreateWithoutNoticeInput[] | NoticeReadUncheckedCreateWithoutNoticeInput[]
    connectOrCreate?: NoticeReadCreateOrConnectWithoutNoticeInput | NoticeReadCreateOrConnectWithoutNoticeInput[]
    createMany?: NoticeReadCreateManyNoticeInputEnvelope
    connect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
  }

  export type NoticeReadUpdateManyWithoutNoticeNestedInput = {
    create?: XOR<NoticeReadCreateWithoutNoticeInput, NoticeReadUncheckedCreateWithoutNoticeInput> | NoticeReadCreateWithoutNoticeInput[] | NoticeReadUncheckedCreateWithoutNoticeInput[]
    connectOrCreate?: NoticeReadCreateOrConnectWithoutNoticeInput | NoticeReadCreateOrConnectWithoutNoticeInput[]
    upsert?: NoticeReadUpsertWithWhereUniqueWithoutNoticeInput | NoticeReadUpsertWithWhereUniqueWithoutNoticeInput[]
    createMany?: NoticeReadCreateManyNoticeInputEnvelope
    set?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    disconnect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    delete?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    connect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    update?: NoticeReadUpdateWithWhereUniqueWithoutNoticeInput | NoticeReadUpdateWithWhereUniqueWithoutNoticeInput[]
    updateMany?: NoticeReadUpdateManyWithWhereWithoutNoticeInput | NoticeReadUpdateManyWithWhereWithoutNoticeInput[]
    deleteMany?: NoticeReadScalarWhereInput | NoticeReadScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedNoticesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedNoticesInput, UserUncheckedCreateWithoutCreatedNoticesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedNoticesInput
    upsert?: UserUpsertWithoutCreatedNoticesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedNoticesInput, UserUpdateWithoutCreatedNoticesInput>, UserUncheckedUpdateWithoutCreatedNoticesInput>
  }

  export type NoticeReadUncheckedUpdateManyWithoutNoticeNestedInput = {
    create?: XOR<NoticeReadCreateWithoutNoticeInput, NoticeReadUncheckedCreateWithoutNoticeInput> | NoticeReadCreateWithoutNoticeInput[] | NoticeReadUncheckedCreateWithoutNoticeInput[]
    connectOrCreate?: NoticeReadCreateOrConnectWithoutNoticeInput | NoticeReadCreateOrConnectWithoutNoticeInput[]
    upsert?: NoticeReadUpsertWithWhereUniqueWithoutNoticeInput | NoticeReadUpsertWithWhereUniqueWithoutNoticeInput[]
    createMany?: NoticeReadCreateManyNoticeInputEnvelope
    set?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    disconnect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    delete?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    connect?: NoticeReadWhereUniqueInput | NoticeReadWhereUniqueInput[]
    update?: NoticeReadUpdateWithWhereUniqueWithoutNoticeInput | NoticeReadUpdateWithWhereUniqueWithoutNoticeInput[]
    updateMany?: NoticeReadUpdateManyWithWhereWithoutNoticeInput | NoticeReadUpdateManyWithWhereWithoutNoticeInput[]
    deleteMany?: NoticeReadScalarWhereInput | NoticeReadScalarWhereInput[]
  }

  export type NoticeCreateNestedOneWithoutReadByUsersInput = {
    create?: XOR<NoticeCreateWithoutReadByUsersInput, NoticeUncheckedCreateWithoutReadByUsersInput>
    connectOrCreate?: NoticeCreateOrConnectWithoutReadByUsersInput
    connect?: NoticeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReadNoticesInput = {
    create?: XOR<UserCreateWithoutReadNoticesInput, UserUncheckedCreateWithoutReadNoticesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReadNoticesInput
    connect?: UserWhereUniqueInput
  }

  export type NoticeUpdateOneRequiredWithoutReadByUsersNestedInput = {
    create?: XOR<NoticeCreateWithoutReadByUsersInput, NoticeUncheckedCreateWithoutReadByUsersInput>
    connectOrCreate?: NoticeCreateOrConnectWithoutReadByUsersInput
    upsert?: NoticeUpsertWithoutReadByUsersInput
    connect?: NoticeWhereUniqueInput
    update?: XOR<XOR<NoticeUpdateToOneWithWhereWithoutReadByUsersInput, NoticeUpdateWithoutReadByUsersInput>, NoticeUncheckedUpdateWithoutReadByUsersInput>
  }

  export type UserUpdateOneRequiredWithoutReadNoticesNestedInput = {
    create?: XOR<UserCreateWithoutReadNoticesInput, UserUncheckedCreateWithoutReadNoticesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReadNoticesInput
    upsert?: UserUpsertWithoutReadNoticesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReadNoticesInput, UserUpdateWithoutReadNoticesInput>, UserUncheckedUpdateWithoutReadNoticesInput>
  }

  export type ScheduleCreateNestedManyWithoutShiftPatternInput = {
    create?: XOR<ScheduleCreateWithoutShiftPatternInput, ScheduleUncheckedCreateWithoutShiftPatternInput> | ScheduleCreateWithoutShiftPatternInput[] | ScheduleUncheckedCreateWithoutShiftPatternInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutShiftPatternInput | ScheduleCreateOrConnectWithoutShiftPatternInput[]
    createMany?: ScheduleCreateManyShiftPatternInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type CompanyCreateNestedOneWithoutShiftPatternsInput = {
    create?: XOR<CompanyCreateWithoutShiftPatternsInput, CompanyUncheckedCreateWithoutShiftPatternsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutShiftPatternsInput
    connect?: CompanyWhereUniqueInput
  }

  export type ScheduleTemplateCreateNestedManyWithoutShift_patternsInput = {
    create?: XOR<ScheduleTemplateCreateWithoutShift_patternsInput, ScheduleTemplateUncheckedCreateWithoutShift_patternsInput> | ScheduleTemplateCreateWithoutShift_patternsInput[] | ScheduleTemplateUncheckedCreateWithoutShift_patternsInput[]
    connectOrCreate?: ScheduleTemplateCreateOrConnectWithoutShift_patternsInput | ScheduleTemplateCreateOrConnectWithoutShift_patternsInput[]
    connect?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
  }

  export type ScheduleDraftItemCreateNestedManyWithoutShiftPatternInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutShiftPatternInput, ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput> | ScheduleDraftItemCreateWithoutShiftPatternInput[] | ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutShiftPatternInput | ScheduleDraftItemCreateOrConnectWithoutShiftPatternInput[]
    createMany?: ScheduleDraftItemCreateManyShiftPatternInputEnvelope
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutShiftPatternInput = {
    create?: XOR<ScheduleCreateWithoutShiftPatternInput, ScheduleUncheckedCreateWithoutShiftPatternInput> | ScheduleCreateWithoutShiftPatternInput[] | ScheduleUncheckedCreateWithoutShiftPatternInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutShiftPatternInput | ScheduleCreateOrConnectWithoutShiftPatternInput[]
    createMany?: ScheduleCreateManyShiftPatternInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleTemplateUncheckedCreateNestedManyWithoutShift_patternsInput = {
    create?: XOR<ScheduleTemplateCreateWithoutShift_patternsInput, ScheduleTemplateUncheckedCreateWithoutShift_patternsInput> | ScheduleTemplateCreateWithoutShift_patternsInput[] | ScheduleTemplateUncheckedCreateWithoutShift_patternsInput[]
    connectOrCreate?: ScheduleTemplateCreateOrConnectWithoutShift_patternsInput | ScheduleTemplateCreateOrConnectWithoutShift_patternsInput[]
    connect?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
  }

  export type ScheduleDraftItemUncheckedCreateNestedManyWithoutShiftPatternInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutShiftPatternInput, ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput> | ScheduleDraftItemCreateWithoutShiftPatternInput[] | ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutShiftPatternInput | ScheduleDraftItemCreateOrConnectWithoutShiftPatternInput[]
    createMany?: ScheduleDraftItemCreateManyShiftPatternInputEnvelope
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
  }

  export type ScheduleUpdateManyWithoutShiftPatternNestedInput = {
    create?: XOR<ScheduleCreateWithoutShiftPatternInput, ScheduleUncheckedCreateWithoutShiftPatternInput> | ScheduleCreateWithoutShiftPatternInput[] | ScheduleUncheckedCreateWithoutShiftPatternInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutShiftPatternInput | ScheduleCreateOrConnectWithoutShiftPatternInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutShiftPatternInput | ScheduleUpsertWithWhereUniqueWithoutShiftPatternInput[]
    createMany?: ScheduleCreateManyShiftPatternInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutShiftPatternInput | ScheduleUpdateWithWhereUniqueWithoutShiftPatternInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutShiftPatternInput | ScheduleUpdateManyWithWhereWithoutShiftPatternInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type CompanyUpdateOneWithoutShiftPatternsNestedInput = {
    create?: XOR<CompanyCreateWithoutShiftPatternsInput, CompanyUncheckedCreateWithoutShiftPatternsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutShiftPatternsInput
    upsert?: CompanyUpsertWithoutShiftPatternsInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutShiftPatternsInput, CompanyUpdateWithoutShiftPatternsInput>, CompanyUncheckedUpdateWithoutShiftPatternsInput>
  }

  export type ScheduleTemplateUpdateManyWithoutShift_patternsNestedInput = {
    create?: XOR<ScheduleTemplateCreateWithoutShift_patternsInput, ScheduleTemplateUncheckedCreateWithoutShift_patternsInput> | ScheduleTemplateCreateWithoutShift_patternsInput[] | ScheduleTemplateUncheckedCreateWithoutShift_patternsInput[]
    connectOrCreate?: ScheduleTemplateCreateOrConnectWithoutShift_patternsInput | ScheduleTemplateCreateOrConnectWithoutShift_patternsInput[]
    upsert?: ScheduleTemplateUpsertWithWhereUniqueWithoutShift_patternsInput | ScheduleTemplateUpsertWithWhereUniqueWithoutShift_patternsInput[]
    set?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
    disconnect?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
    delete?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
    connect?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
    update?: ScheduleTemplateUpdateWithWhereUniqueWithoutShift_patternsInput | ScheduleTemplateUpdateWithWhereUniqueWithoutShift_patternsInput[]
    updateMany?: ScheduleTemplateUpdateManyWithWhereWithoutShift_patternsInput | ScheduleTemplateUpdateManyWithWhereWithoutShift_patternsInput[]
    deleteMany?: ScheduleTemplateScalarWhereInput | ScheduleTemplateScalarWhereInput[]
  }

  export type ScheduleDraftItemUpdateManyWithoutShiftPatternNestedInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutShiftPatternInput, ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput> | ScheduleDraftItemCreateWithoutShiftPatternInput[] | ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutShiftPatternInput | ScheduleDraftItemCreateOrConnectWithoutShiftPatternInput[]
    upsert?: ScheduleDraftItemUpsertWithWhereUniqueWithoutShiftPatternInput | ScheduleDraftItemUpsertWithWhereUniqueWithoutShiftPatternInput[]
    createMany?: ScheduleDraftItemCreateManyShiftPatternInputEnvelope
    set?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    disconnect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    delete?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    update?: ScheduleDraftItemUpdateWithWhereUniqueWithoutShiftPatternInput | ScheduleDraftItemUpdateWithWhereUniqueWithoutShiftPatternInput[]
    updateMany?: ScheduleDraftItemUpdateManyWithWhereWithoutShiftPatternInput | ScheduleDraftItemUpdateManyWithWhereWithoutShiftPatternInput[]
    deleteMany?: ScheduleDraftItemScalarWhereInput | ScheduleDraftItemScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutShiftPatternNestedInput = {
    create?: XOR<ScheduleCreateWithoutShiftPatternInput, ScheduleUncheckedCreateWithoutShiftPatternInput> | ScheduleCreateWithoutShiftPatternInput[] | ScheduleUncheckedCreateWithoutShiftPatternInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutShiftPatternInput | ScheduleCreateOrConnectWithoutShiftPatternInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutShiftPatternInput | ScheduleUpsertWithWhereUniqueWithoutShiftPatternInput[]
    createMany?: ScheduleCreateManyShiftPatternInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutShiftPatternInput | ScheduleUpdateWithWhereUniqueWithoutShiftPatternInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutShiftPatternInput | ScheduleUpdateManyWithWhereWithoutShiftPatternInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleTemplateUncheckedUpdateManyWithoutShift_patternsNestedInput = {
    create?: XOR<ScheduleTemplateCreateWithoutShift_patternsInput, ScheduleTemplateUncheckedCreateWithoutShift_patternsInput> | ScheduleTemplateCreateWithoutShift_patternsInput[] | ScheduleTemplateUncheckedCreateWithoutShift_patternsInput[]
    connectOrCreate?: ScheduleTemplateCreateOrConnectWithoutShift_patternsInput | ScheduleTemplateCreateOrConnectWithoutShift_patternsInput[]
    upsert?: ScheduleTemplateUpsertWithWhereUniqueWithoutShift_patternsInput | ScheduleTemplateUpsertWithWhereUniqueWithoutShift_patternsInput[]
    set?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
    disconnect?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
    delete?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
    connect?: ScheduleTemplateWhereUniqueInput | ScheduleTemplateWhereUniqueInput[]
    update?: ScheduleTemplateUpdateWithWhereUniqueWithoutShift_patternsInput | ScheduleTemplateUpdateWithWhereUniqueWithoutShift_patternsInput[]
    updateMany?: ScheduleTemplateUpdateManyWithWhereWithoutShift_patternsInput | ScheduleTemplateUpdateManyWithWhereWithoutShift_patternsInput[]
    deleteMany?: ScheduleTemplateScalarWhereInput | ScheduleTemplateScalarWhereInput[]
  }

  export type ScheduleDraftItemUncheckedUpdateManyWithoutShiftPatternNestedInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutShiftPatternInput, ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput> | ScheduleDraftItemCreateWithoutShiftPatternInput[] | ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutShiftPatternInput | ScheduleDraftItemCreateOrConnectWithoutShiftPatternInput[]
    upsert?: ScheduleDraftItemUpsertWithWhereUniqueWithoutShiftPatternInput | ScheduleDraftItemUpsertWithWhereUniqueWithoutShiftPatternInput[]
    createMany?: ScheduleDraftItemCreateManyShiftPatternInputEnvelope
    set?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    disconnect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    delete?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    update?: ScheduleDraftItemUpdateWithWhereUniqueWithoutShiftPatternInput | ScheduleDraftItemUpdateWithWhereUniqueWithoutShiftPatternInput[]
    updateMany?: ScheduleDraftItemUpdateManyWithWhereWithoutShiftPatternInput | ScheduleDraftItemUpdateManyWithWhereWithoutShiftPatternInput[]
    deleteMany?: ScheduleDraftItemScalarWhereInput | ScheduleDraftItemScalarWhereInput[]
  }

  export type GenerationLogCreateNestedManyWithoutTemplateInput = {
    create?: XOR<GenerationLogCreateWithoutTemplateInput, GenerationLogUncheckedCreateWithoutTemplateInput> | GenerationLogCreateWithoutTemplateInput[] | GenerationLogUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: GenerationLogCreateOrConnectWithoutTemplateInput | GenerationLogCreateOrConnectWithoutTemplateInput[]
    createMany?: GenerationLogCreateManyTemplateInputEnvelope
    connect?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
  }

  export type ShiftPatternCreateNestedManyWithoutSchedule_templatesInput = {
    create?: XOR<ShiftPatternCreateWithoutSchedule_templatesInput, ShiftPatternUncheckedCreateWithoutSchedule_templatesInput> | ShiftPatternCreateWithoutSchedule_templatesInput[] | ShiftPatternUncheckedCreateWithoutSchedule_templatesInput[]
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutSchedule_templatesInput | ShiftPatternCreateOrConnectWithoutSchedule_templatesInput[]
    connect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
  }

  export type ScheduleDraftCreateNestedManyWithoutScheduleTemplateInput = {
    create?: XOR<ScheduleDraftCreateWithoutScheduleTemplateInput, ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput> | ScheduleDraftCreateWithoutScheduleTemplateInput[] | ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput[]
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutScheduleTemplateInput | ScheduleDraftCreateOrConnectWithoutScheduleTemplateInput[]
    createMany?: ScheduleDraftCreateManyScheduleTemplateInputEnvelope
    connect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
  }

  export type GenerationLogUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<GenerationLogCreateWithoutTemplateInput, GenerationLogUncheckedCreateWithoutTemplateInput> | GenerationLogCreateWithoutTemplateInput[] | GenerationLogUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: GenerationLogCreateOrConnectWithoutTemplateInput | GenerationLogCreateOrConnectWithoutTemplateInput[]
    createMany?: GenerationLogCreateManyTemplateInputEnvelope
    connect?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
  }

  export type ShiftPatternUncheckedCreateNestedManyWithoutSchedule_templatesInput = {
    create?: XOR<ShiftPatternCreateWithoutSchedule_templatesInput, ShiftPatternUncheckedCreateWithoutSchedule_templatesInput> | ShiftPatternCreateWithoutSchedule_templatesInput[] | ShiftPatternUncheckedCreateWithoutSchedule_templatesInput[]
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutSchedule_templatesInput | ShiftPatternCreateOrConnectWithoutSchedule_templatesInput[]
    connect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
  }

  export type ScheduleDraftUncheckedCreateNestedManyWithoutScheduleTemplateInput = {
    create?: XOR<ScheduleDraftCreateWithoutScheduleTemplateInput, ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput> | ScheduleDraftCreateWithoutScheduleTemplateInput[] | ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput[]
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutScheduleTemplateInput | ScheduleDraftCreateOrConnectWithoutScheduleTemplateInput[]
    createMany?: ScheduleDraftCreateManyScheduleTemplateInputEnvelope
    connect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
  }

  export type GenerationLogUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<GenerationLogCreateWithoutTemplateInput, GenerationLogUncheckedCreateWithoutTemplateInput> | GenerationLogCreateWithoutTemplateInput[] | GenerationLogUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: GenerationLogCreateOrConnectWithoutTemplateInput | GenerationLogCreateOrConnectWithoutTemplateInput[]
    upsert?: GenerationLogUpsertWithWhereUniqueWithoutTemplateInput | GenerationLogUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: GenerationLogCreateManyTemplateInputEnvelope
    set?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
    disconnect?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
    delete?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
    connect?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
    update?: GenerationLogUpdateWithWhereUniqueWithoutTemplateInput | GenerationLogUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: GenerationLogUpdateManyWithWhereWithoutTemplateInput | GenerationLogUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: GenerationLogScalarWhereInput | GenerationLogScalarWhereInput[]
  }

  export type ShiftPatternUpdateManyWithoutSchedule_templatesNestedInput = {
    create?: XOR<ShiftPatternCreateWithoutSchedule_templatesInput, ShiftPatternUncheckedCreateWithoutSchedule_templatesInput> | ShiftPatternCreateWithoutSchedule_templatesInput[] | ShiftPatternUncheckedCreateWithoutSchedule_templatesInput[]
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutSchedule_templatesInput | ShiftPatternCreateOrConnectWithoutSchedule_templatesInput[]
    upsert?: ShiftPatternUpsertWithWhereUniqueWithoutSchedule_templatesInput | ShiftPatternUpsertWithWhereUniqueWithoutSchedule_templatesInput[]
    set?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    disconnect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    delete?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    connect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    update?: ShiftPatternUpdateWithWhereUniqueWithoutSchedule_templatesInput | ShiftPatternUpdateWithWhereUniqueWithoutSchedule_templatesInput[]
    updateMany?: ShiftPatternUpdateManyWithWhereWithoutSchedule_templatesInput | ShiftPatternUpdateManyWithWhereWithoutSchedule_templatesInput[]
    deleteMany?: ShiftPatternScalarWhereInput | ShiftPatternScalarWhereInput[]
  }

  export type ScheduleDraftUpdateManyWithoutScheduleTemplateNestedInput = {
    create?: XOR<ScheduleDraftCreateWithoutScheduleTemplateInput, ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput> | ScheduleDraftCreateWithoutScheduleTemplateInput[] | ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput[]
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutScheduleTemplateInput | ScheduleDraftCreateOrConnectWithoutScheduleTemplateInput[]
    upsert?: ScheduleDraftUpsertWithWhereUniqueWithoutScheduleTemplateInput | ScheduleDraftUpsertWithWhereUniqueWithoutScheduleTemplateInput[]
    createMany?: ScheduleDraftCreateManyScheduleTemplateInputEnvelope
    set?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    disconnect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    delete?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    connect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    update?: ScheduleDraftUpdateWithWhereUniqueWithoutScheduleTemplateInput | ScheduleDraftUpdateWithWhereUniqueWithoutScheduleTemplateInput[]
    updateMany?: ScheduleDraftUpdateManyWithWhereWithoutScheduleTemplateInput | ScheduleDraftUpdateManyWithWhereWithoutScheduleTemplateInput[]
    deleteMany?: ScheduleDraftScalarWhereInput | ScheduleDraftScalarWhereInput[]
  }

  export type GenerationLogUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<GenerationLogCreateWithoutTemplateInput, GenerationLogUncheckedCreateWithoutTemplateInput> | GenerationLogCreateWithoutTemplateInput[] | GenerationLogUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: GenerationLogCreateOrConnectWithoutTemplateInput | GenerationLogCreateOrConnectWithoutTemplateInput[]
    upsert?: GenerationLogUpsertWithWhereUniqueWithoutTemplateInput | GenerationLogUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: GenerationLogCreateManyTemplateInputEnvelope
    set?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
    disconnect?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
    delete?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
    connect?: GenerationLogWhereUniqueInput | GenerationLogWhereUniqueInput[]
    update?: GenerationLogUpdateWithWhereUniqueWithoutTemplateInput | GenerationLogUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: GenerationLogUpdateManyWithWhereWithoutTemplateInput | GenerationLogUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: GenerationLogScalarWhereInput | GenerationLogScalarWhereInput[]
  }

  export type ShiftPatternUncheckedUpdateManyWithoutSchedule_templatesNestedInput = {
    create?: XOR<ShiftPatternCreateWithoutSchedule_templatesInput, ShiftPatternUncheckedCreateWithoutSchedule_templatesInput> | ShiftPatternCreateWithoutSchedule_templatesInput[] | ShiftPatternUncheckedCreateWithoutSchedule_templatesInput[]
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutSchedule_templatesInput | ShiftPatternCreateOrConnectWithoutSchedule_templatesInput[]
    upsert?: ShiftPatternUpsertWithWhereUniqueWithoutSchedule_templatesInput | ShiftPatternUpsertWithWhereUniqueWithoutSchedule_templatesInput[]
    set?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    disconnect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    delete?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    connect?: ShiftPatternWhereUniqueInput | ShiftPatternWhereUniqueInput[]
    update?: ShiftPatternUpdateWithWhereUniqueWithoutSchedule_templatesInput | ShiftPatternUpdateWithWhereUniqueWithoutSchedule_templatesInput[]
    updateMany?: ShiftPatternUpdateManyWithWhereWithoutSchedule_templatesInput | ShiftPatternUpdateManyWithWhereWithoutSchedule_templatesInput[]
    deleteMany?: ShiftPatternScalarWhereInput | ShiftPatternScalarWhereInput[]
  }

  export type ScheduleDraftUncheckedUpdateManyWithoutScheduleTemplateNestedInput = {
    create?: XOR<ScheduleDraftCreateWithoutScheduleTemplateInput, ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput> | ScheduleDraftCreateWithoutScheduleTemplateInput[] | ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput[]
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutScheduleTemplateInput | ScheduleDraftCreateOrConnectWithoutScheduleTemplateInput[]
    upsert?: ScheduleDraftUpsertWithWhereUniqueWithoutScheduleTemplateInput | ScheduleDraftUpsertWithWhereUniqueWithoutScheduleTemplateInput[]
    createMany?: ScheduleDraftCreateManyScheduleTemplateInputEnvelope
    set?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    disconnect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    delete?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    connect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    update?: ScheduleDraftUpdateWithWhereUniqueWithoutScheduleTemplateInput | ScheduleDraftUpdateWithWhereUniqueWithoutScheduleTemplateInput[]
    updateMany?: ScheduleDraftUpdateManyWithWhereWithoutScheduleTemplateInput | ScheduleDraftUpdateManyWithWhereWithoutScheduleTemplateInput[]
    deleteMany?: ScheduleDraftScalarWhereInput | ScheduleDraftScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutConstraintsInput = {
    create?: XOR<EmployeeCreateWithoutConstraintsInput, EmployeeUncheckedCreateWithoutConstraintsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutConstraintsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutConstraintsNestedInput = {
    create?: XOR<EmployeeCreateWithoutConstraintsInput, EmployeeUncheckedCreateWithoutConstraintsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutConstraintsInput
    upsert?: EmployeeUpsertWithoutConstraintsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutConstraintsInput, EmployeeUpdateWithoutConstraintsInput>, EmployeeUncheckedUpdateWithoutConstraintsInput>
  }

  export type ScheduleTemplateCreateNestedOneWithoutGenerationLogsInput = {
    create?: XOR<ScheduleTemplateCreateWithoutGenerationLogsInput, ScheduleTemplateUncheckedCreateWithoutGenerationLogsInput>
    connectOrCreate?: ScheduleTemplateCreateOrConnectWithoutGenerationLogsInput
    connect?: ScheduleTemplateWhereUniqueInput
  }

  export type ScheduleCreateNestedManyWithoutGenerationLogInput = {
    create?: XOR<ScheduleCreateWithoutGenerationLogInput, ScheduleUncheckedCreateWithoutGenerationLogInput> | ScheduleCreateWithoutGenerationLogInput[] | ScheduleUncheckedCreateWithoutGenerationLogInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutGenerationLogInput | ScheduleCreateOrConnectWithoutGenerationLogInput[]
    createMany?: ScheduleCreateManyGenerationLogInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutGenerationLogInput = {
    create?: XOR<ScheduleCreateWithoutGenerationLogInput, ScheduleUncheckedCreateWithoutGenerationLogInput> | ScheduleCreateWithoutGenerationLogInput[] | ScheduleUncheckedCreateWithoutGenerationLogInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutGenerationLogInput | ScheduleCreateOrConnectWithoutGenerationLogInput[]
    createMany?: ScheduleCreateManyGenerationLogInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ScheduleTemplateUpdateOneWithoutGenerationLogsNestedInput = {
    create?: XOR<ScheduleTemplateCreateWithoutGenerationLogsInput, ScheduleTemplateUncheckedCreateWithoutGenerationLogsInput>
    connectOrCreate?: ScheduleTemplateCreateOrConnectWithoutGenerationLogsInput
    upsert?: ScheduleTemplateUpsertWithoutGenerationLogsInput
    disconnect?: ScheduleTemplateWhereInput | boolean
    delete?: ScheduleTemplateWhereInput | boolean
    connect?: ScheduleTemplateWhereUniqueInput
    update?: XOR<XOR<ScheduleTemplateUpdateToOneWithWhereWithoutGenerationLogsInput, ScheduleTemplateUpdateWithoutGenerationLogsInput>, ScheduleTemplateUncheckedUpdateWithoutGenerationLogsInput>
  }

  export type ScheduleUpdateManyWithoutGenerationLogNestedInput = {
    create?: XOR<ScheduleCreateWithoutGenerationLogInput, ScheduleUncheckedCreateWithoutGenerationLogInput> | ScheduleCreateWithoutGenerationLogInput[] | ScheduleUncheckedCreateWithoutGenerationLogInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutGenerationLogInput | ScheduleCreateOrConnectWithoutGenerationLogInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutGenerationLogInput | ScheduleUpsertWithWhereUniqueWithoutGenerationLogInput[]
    createMany?: ScheduleCreateManyGenerationLogInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutGenerationLogInput | ScheduleUpdateWithWhereUniqueWithoutGenerationLogInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutGenerationLogInput | ScheduleUpdateManyWithWhereWithoutGenerationLogInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutGenerationLogNestedInput = {
    create?: XOR<ScheduleCreateWithoutGenerationLogInput, ScheduleUncheckedCreateWithoutGenerationLogInput> | ScheduleCreateWithoutGenerationLogInput[] | ScheduleUncheckedCreateWithoutGenerationLogInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutGenerationLogInput | ScheduleCreateOrConnectWithoutGenerationLogInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutGenerationLogInput | ScheduleUpsertWithWhereUniqueWithoutGenerationLogInput[]
    createMany?: ScheduleCreateManyGenerationLogInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutGenerationLogInput | ScheduleUpdateWithWhereUniqueWithoutGenerationLogInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutGenerationLogInput | ScheduleUpdateManyWithWhereWithoutGenerationLogInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutCertificationsInput = {
    create?: XOR<EmployeeCreateWithoutCertificationsInput, EmployeeUncheckedCreateWithoutCertificationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCertificationsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutCertificationsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCertificationsInput, EmployeeUncheckedCreateWithoutCertificationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCertificationsInput
    upsert?: EmployeeUpsertWithoutCertificationsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCertificationsInput, EmployeeUpdateWithoutCertificationsInput>, EmployeeUncheckedUpdateWithoutCertificationsInput>
  }

  export type CompanyCreateNestedOneWithoutOperatingHoursTemplatesInput = {
    create?: XOR<CompanyCreateWithoutOperatingHoursTemplatesInput, CompanyUncheckedCreateWithoutOperatingHoursTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOperatingHoursTemplatesInput
    connect?: CompanyWhereUniqueInput
  }

  export type DailyOperatingHoursCreateNestedManyWithoutTemplateInput = {
    create?: XOR<DailyOperatingHoursCreateWithoutTemplateInput, DailyOperatingHoursUncheckedCreateWithoutTemplateInput> | DailyOperatingHoursCreateWithoutTemplateInput[] | DailyOperatingHoursUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: DailyOperatingHoursCreateOrConnectWithoutTemplateInput | DailyOperatingHoursCreateOrConnectWithoutTemplateInput[]
    createMany?: DailyOperatingHoursCreateManyTemplateInputEnvelope
    connect?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
  }

  export type StaffingRuleCreateNestedManyWithoutTemplateInput = {
    create?: XOR<StaffingRuleCreateWithoutTemplateInput, StaffingRuleUncheckedCreateWithoutTemplateInput> | StaffingRuleCreateWithoutTemplateInput[] | StaffingRuleUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: StaffingRuleCreateOrConnectWithoutTemplateInput | StaffingRuleCreateOrConnectWithoutTemplateInput[]
    createMany?: StaffingRuleCreateManyTemplateInputEnvelope
    connect?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
  }

  export type ScheduleOverrideCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ScheduleOverrideCreateWithoutTemplateInput, ScheduleOverrideUncheckedCreateWithoutTemplateInput> | ScheduleOverrideCreateWithoutTemplateInput[] | ScheduleOverrideUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ScheduleOverrideCreateOrConnectWithoutTemplateInput | ScheduleOverrideCreateOrConnectWithoutTemplateInput[]
    createMany?: ScheduleOverrideCreateManyTemplateInputEnvelope
    connect?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
  }

  export type DailyOperatingHoursUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<DailyOperatingHoursCreateWithoutTemplateInput, DailyOperatingHoursUncheckedCreateWithoutTemplateInput> | DailyOperatingHoursCreateWithoutTemplateInput[] | DailyOperatingHoursUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: DailyOperatingHoursCreateOrConnectWithoutTemplateInput | DailyOperatingHoursCreateOrConnectWithoutTemplateInput[]
    createMany?: DailyOperatingHoursCreateManyTemplateInputEnvelope
    connect?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
  }

  export type StaffingRuleUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<StaffingRuleCreateWithoutTemplateInput, StaffingRuleUncheckedCreateWithoutTemplateInput> | StaffingRuleCreateWithoutTemplateInput[] | StaffingRuleUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: StaffingRuleCreateOrConnectWithoutTemplateInput | StaffingRuleCreateOrConnectWithoutTemplateInput[]
    createMany?: StaffingRuleCreateManyTemplateInputEnvelope
    connect?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
  }

  export type ScheduleOverrideUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<ScheduleOverrideCreateWithoutTemplateInput, ScheduleOverrideUncheckedCreateWithoutTemplateInput> | ScheduleOverrideCreateWithoutTemplateInput[] | ScheduleOverrideUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ScheduleOverrideCreateOrConnectWithoutTemplateInput | ScheduleOverrideCreateOrConnectWithoutTemplateInput[]
    createMany?: ScheduleOverrideCreateManyTemplateInputEnvelope
    connect?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutOperatingHoursTemplatesNestedInput = {
    create?: XOR<CompanyCreateWithoutOperatingHoursTemplatesInput, CompanyUncheckedCreateWithoutOperatingHoursTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOperatingHoursTemplatesInput
    upsert?: CompanyUpsertWithoutOperatingHoursTemplatesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutOperatingHoursTemplatesInput, CompanyUpdateWithoutOperatingHoursTemplatesInput>, CompanyUncheckedUpdateWithoutOperatingHoursTemplatesInput>
  }

  export type DailyOperatingHoursUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<DailyOperatingHoursCreateWithoutTemplateInput, DailyOperatingHoursUncheckedCreateWithoutTemplateInput> | DailyOperatingHoursCreateWithoutTemplateInput[] | DailyOperatingHoursUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: DailyOperatingHoursCreateOrConnectWithoutTemplateInput | DailyOperatingHoursCreateOrConnectWithoutTemplateInput[]
    upsert?: DailyOperatingHoursUpsertWithWhereUniqueWithoutTemplateInput | DailyOperatingHoursUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: DailyOperatingHoursCreateManyTemplateInputEnvelope
    set?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
    disconnect?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
    delete?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
    connect?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
    update?: DailyOperatingHoursUpdateWithWhereUniqueWithoutTemplateInput | DailyOperatingHoursUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: DailyOperatingHoursUpdateManyWithWhereWithoutTemplateInput | DailyOperatingHoursUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: DailyOperatingHoursScalarWhereInput | DailyOperatingHoursScalarWhereInput[]
  }

  export type StaffingRuleUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<StaffingRuleCreateWithoutTemplateInput, StaffingRuleUncheckedCreateWithoutTemplateInput> | StaffingRuleCreateWithoutTemplateInput[] | StaffingRuleUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: StaffingRuleCreateOrConnectWithoutTemplateInput | StaffingRuleCreateOrConnectWithoutTemplateInput[]
    upsert?: StaffingRuleUpsertWithWhereUniqueWithoutTemplateInput | StaffingRuleUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: StaffingRuleCreateManyTemplateInputEnvelope
    set?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
    disconnect?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
    delete?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
    connect?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
    update?: StaffingRuleUpdateWithWhereUniqueWithoutTemplateInput | StaffingRuleUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: StaffingRuleUpdateManyWithWhereWithoutTemplateInput | StaffingRuleUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: StaffingRuleScalarWhereInput | StaffingRuleScalarWhereInput[]
  }

  export type ScheduleOverrideUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ScheduleOverrideCreateWithoutTemplateInput, ScheduleOverrideUncheckedCreateWithoutTemplateInput> | ScheduleOverrideCreateWithoutTemplateInput[] | ScheduleOverrideUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ScheduleOverrideCreateOrConnectWithoutTemplateInput | ScheduleOverrideCreateOrConnectWithoutTemplateInput[]
    upsert?: ScheduleOverrideUpsertWithWhereUniqueWithoutTemplateInput | ScheduleOverrideUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ScheduleOverrideCreateManyTemplateInputEnvelope
    set?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
    disconnect?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
    delete?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
    connect?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
    update?: ScheduleOverrideUpdateWithWhereUniqueWithoutTemplateInput | ScheduleOverrideUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ScheduleOverrideUpdateManyWithWhereWithoutTemplateInput | ScheduleOverrideUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ScheduleOverrideScalarWhereInput | ScheduleOverrideScalarWhereInput[]
  }

  export type DailyOperatingHoursUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<DailyOperatingHoursCreateWithoutTemplateInput, DailyOperatingHoursUncheckedCreateWithoutTemplateInput> | DailyOperatingHoursCreateWithoutTemplateInput[] | DailyOperatingHoursUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: DailyOperatingHoursCreateOrConnectWithoutTemplateInput | DailyOperatingHoursCreateOrConnectWithoutTemplateInput[]
    upsert?: DailyOperatingHoursUpsertWithWhereUniqueWithoutTemplateInput | DailyOperatingHoursUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: DailyOperatingHoursCreateManyTemplateInputEnvelope
    set?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
    disconnect?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
    delete?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
    connect?: DailyOperatingHoursWhereUniqueInput | DailyOperatingHoursWhereUniqueInput[]
    update?: DailyOperatingHoursUpdateWithWhereUniqueWithoutTemplateInput | DailyOperatingHoursUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: DailyOperatingHoursUpdateManyWithWhereWithoutTemplateInput | DailyOperatingHoursUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: DailyOperatingHoursScalarWhereInput | DailyOperatingHoursScalarWhereInput[]
  }

  export type StaffingRuleUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<StaffingRuleCreateWithoutTemplateInput, StaffingRuleUncheckedCreateWithoutTemplateInput> | StaffingRuleCreateWithoutTemplateInput[] | StaffingRuleUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: StaffingRuleCreateOrConnectWithoutTemplateInput | StaffingRuleCreateOrConnectWithoutTemplateInput[]
    upsert?: StaffingRuleUpsertWithWhereUniqueWithoutTemplateInput | StaffingRuleUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: StaffingRuleCreateManyTemplateInputEnvelope
    set?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
    disconnect?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
    delete?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
    connect?: StaffingRuleWhereUniqueInput | StaffingRuleWhereUniqueInput[]
    update?: StaffingRuleUpdateWithWhereUniqueWithoutTemplateInput | StaffingRuleUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: StaffingRuleUpdateManyWithWhereWithoutTemplateInput | StaffingRuleUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: StaffingRuleScalarWhereInput | StaffingRuleScalarWhereInput[]
  }

  export type ScheduleOverrideUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<ScheduleOverrideCreateWithoutTemplateInput, ScheduleOverrideUncheckedCreateWithoutTemplateInput> | ScheduleOverrideCreateWithoutTemplateInput[] | ScheduleOverrideUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: ScheduleOverrideCreateOrConnectWithoutTemplateInput | ScheduleOverrideCreateOrConnectWithoutTemplateInput[]
    upsert?: ScheduleOverrideUpsertWithWhereUniqueWithoutTemplateInput | ScheduleOverrideUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: ScheduleOverrideCreateManyTemplateInputEnvelope
    set?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
    disconnect?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
    delete?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
    connect?: ScheduleOverrideWhereUniqueInput | ScheduleOverrideWhereUniqueInput[]
    update?: ScheduleOverrideUpdateWithWhereUniqueWithoutTemplateInput | ScheduleOverrideUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: ScheduleOverrideUpdateManyWithWhereWithoutTemplateInput | ScheduleOverrideUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: ScheduleOverrideScalarWhereInput | ScheduleOverrideScalarWhereInput[]
  }

  export type OperatingHoursTemplateCreateNestedOneWithoutDailyHoursInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutDailyHoursInput, OperatingHoursTemplateUncheckedCreateWithoutDailyHoursInput>
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutDailyHoursInput
    connect?: OperatingHoursTemplateWhereUniqueInput
  }

  export type HourlyStaffingRuleCreateNestedManyWithoutDailyHoursInput = {
    create?: XOR<HourlyStaffingRuleCreateWithoutDailyHoursInput, HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput> | HourlyStaffingRuleCreateWithoutDailyHoursInput[] | HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput[]
    connectOrCreate?: HourlyStaffingRuleCreateOrConnectWithoutDailyHoursInput | HourlyStaffingRuleCreateOrConnectWithoutDailyHoursInput[]
    createMany?: HourlyStaffingRuleCreateManyDailyHoursInputEnvelope
    connect?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
  }

  export type HourlyStaffingRuleUncheckedCreateNestedManyWithoutDailyHoursInput = {
    create?: XOR<HourlyStaffingRuleCreateWithoutDailyHoursInput, HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput> | HourlyStaffingRuleCreateWithoutDailyHoursInput[] | HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput[]
    connectOrCreate?: HourlyStaffingRuleCreateOrConnectWithoutDailyHoursInput | HourlyStaffingRuleCreateOrConnectWithoutDailyHoursInput[]
    createMany?: HourlyStaffingRuleCreateManyDailyHoursInputEnvelope
    connect?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
  }

  export type OperatingHoursTemplateUpdateOneRequiredWithoutDailyHoursNestedInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutDailyHoursInput, OperatingHoursTemplateUncheckedCreateWithoutDailyHoursInput>
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutDailyHoursInput
    upsert?: OperatingHoursTemplateUpsertWithoutDailyHoursInput
    connect?: OperatingHoursTemplateWhereUniqueInput
    update?: XOR<XOR<OperatingHoursTemplateUpdateToOneWithWhereWithoutDailyHoursInput, OperatingHoursTemplateUpdateWithoutDailyHoursInput>, OperatingHoursTemplateUncheckedUpdateWithoutDailyHoursInput>
  }

  export type HourlyStaffingRuleUpdateManyWithoutDailyHoursNestedInput = {
    create?: XOR<HourlyStaffingRuleCreateWithoutDailyHoursInput, HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput> | HourlyStaffingRuleCreateWithoutDailyHoursInput[] | HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput[]
    connectOrCreate?: HourlyStaffingRuleCreateOrConnectWithoutDailyHoursInput | HourlyStaffingRuleCreateOrConnectWithoutDailyHoursInput[]
    upsert?: HourlyStaffingRuleUpsertWithWhereUniqueWithoutDailyHoursInput | HourlyStaffingRuleUpsertWithWhereUniqueWithoutDailyHoursInput[]
    createMany?: HourlyStaffingRuleCreateManyDailyHoursInputEnvelope
    set?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
    disconnect?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
    delete?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
    connect?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
    update?: HourlyStaffingRuleUpdateWithWhereUniqueWithoutDailyHoursInput | HourlyStaffingRuleUpdateWithWhereUniqueWithoutDailyHoursInput[]
    updateMany?: HourlyStaffingRuleUpdateManyWithWhereWithoutDailyHoursInput | HourlyStaffingRuleUpdateManyWithWhereWithoutDailyHoursInput[]
    deleteMany?: HourlyStaffingRuleScalarWhereInput | HourlyStaffingRuleScalarWhereInput[]
  }

  export type HourlyStaffingRuleUncheckedUpdateManyWithoutDailyHoursNestedInput = {
    create?: XOR<HourlyStaffingRuleCreateWithoutDailyHoursInput, HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput> | HourlyStaffingRuleCreateWithoutDailyHoursInput[] | HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput[]
    connectOrCreate?: HourlyStaffingRuleCreateOrConnectWithoutDailyHoursInput | HourlyStaffingRuleCreateOrConnectWithoutDailyHoursInput[]
    upsert?: HourlyStaffingRuleUpsertWithWhereUniqueWithoutDailyHoursInput | HourlyStaffingRuleUpsertWithWhereUniqueWithoutDailyHoursInput[]
    createMany?: HourlyStaffingRuleCreateManyDailyHoursInputEnvelope
    set?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
    disconnect?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
    delete?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
    connect?: HourlyStaffingRuleWhereUniqueInput | HourlyStaffingRuleWhereUniqueInput[]
    update?: HourlyStaffingRuleUpdateWithWhereUniqueWithoutDailyHoursInput | HourlyStaffingRuleUpdateWithWhereUniqueWithoutDailyHoursInput[]
    updateMany?: HourlyStaffingRuleUpdateManyWithWhereWithoutDailyHoursInput | HourlyStaffingRuleUpdateManyWithWhereWithoutDailyHoursInput[]
    deleteMany?: HourlyStaffingRuleScalarWhereInput | HourlyStaffingRuleScalarWhereInput[]
  }

  export type DailyOperatingHoursCreateNestedOneWithoutTimeSlotsInput = {
    create?: XOR<DailyOperatingHoursCreateWithoutTimeSlotsInput, DailyOperatingHoursUncheckedCreateWithoutTimeSlotsInput>
    connectOrCreate?: DailyOperatingHoursCreateOrConnectWithoutTimeSlotsInput
    connect?: DailyOperatingHoursWhereUniqueInput
  }

  export type DailyOperatingHoursUpdateOneRequiredWithoutTimeSlotsNestedInput = {
    create?: XOR<DailyOperatingHoursCreateWithoutTimeSlotsInput, DailyOperatingHoursUncheckedCreateWithoutTimeSlotsInput>
    connectOrCreate?: DailyOperatingHoursCreateOrConnectWithoutTimeSlotsInput
    upsert?: DailyOperatingHoursUpsertWithoutTimeSlotsInput
    connect?: DailyOperatingHoursWhereUniqueInput
    update?: XOR<XOR<DailyOperatingHoursUpdateToOneWithWhereWithoutTimeSlotsInput, DailyOperatingHoursUpdateWithoutTimeSlotsInput>, DailyOperatingHoursUncheckedUpdateWithoutTimeSlotsInput>
  }

  export type OperatingHoursTemplateCreateNestedOneWithoutStaffingRulesInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutStaffingRulesInput, OperatingHoursTemplateUncheckedCreateWithoutStaffingRulesInput>
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutStaffingRulesInput
    connect?: OperatingHoursTemplateWhereUniqueInput
  }

  export type OperatingHoursTemplateUpdateOneRequiredWithoutStaffingRulesNestedInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutStaffingRulesInput, OperatingHoursTemplateUncheckedCreateWithoutStaffingRulesInput>
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutStaffingRulesInput
    upsert?: OperatingHoursTemplateUpsertWithoutStaffingRulesInput
    connect?: OperatingHoursTemplateWhereUniqueInput
    update?: XOR<XOR<OperatingHoursTemplateUpdateToOneWithWhereWithoutStaffingRulesInput, OperatingHoursTemplateUpdateWithoutStaffingRulesInput>, OperatingHoursTemplateUncheckedUpdateWithoutStaffingRulesInput>
  }

  export type OperatingHoursTemplateCreateNestedOneWithoutScheduleOverridesInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutScheduleOverridesInput, OperatingHoursTemplateUncheckedCreateWithoutScheduleOverridesInput>
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutScheduleOverridesInput
    connect?: OperatingHoursTemplateWhereUniqueInput
  }

  export type OperatingHoursTemplateUpdateOneRequiredWithoutScheduleOverridesNestedInput = {
    create?: XOR<OperatingHoursTemplateCreateWithoutScheduleOverridesInput, OperatingHoursTemplateUncheckedCreateWithoutScheduleOverridesInput>
    connectOrCreate?: OperatingHoursTemplateCreateOrConnectWithoutScheduleOverridesInput
    upsert?: OperatingHoursTemplateUpsertWithoutScheduleOverridesInput
    connect?: OperatingHoursTemplateWhereUniqueInput
    update?: XOR<XOR<OperatingHoursTemplateUpdateToOneWithWhereWithoutScheduleOverridesInput, OperatingHoursTemplateUpdateWithoutScheduleOverridesInput>, OperatingHoursTemplateUncheckedUpdateWithoutScheduleOverridesInput>
  }

  export type ScheduleDraftItemCreateNestedManyWithoutDraftInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutDraftInput, ScheduleDraftItemUncheckedCreateWithoutDraftInput> | ScheduleDraftItemCreateWithoutDraftInput[] | ScheduleDraftItemUncheckedCreateWithoutDraftInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutDraftInput | ScheduleDraftItemCreateOrConnectWithoutDraftInput[]
    createMany?: ScheduleDraftItemCreateManyDraftInputEnvelope
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
  }

  export type ScheduleTemplateCreateNestedOneWithoutDraftsInput = {
    create?: XOR<ScheduleTemplateCreateWithoutDraftsInput, ScheduleTemplateUncheckedCreateWithoutDraftsInput>
    connectOrCreate?: ScheduleTemplateCreateOrConnectWithoutDraftsInput
    connect?: ScheduleTemplateWhereUniqueInput
  }

  export type ScheduleDraftCreateNestedOneWithoutVersionDraftsInput = {
    create?: XOR<ScheduleDraftCreateWithoutVersionDraftsInput, ScheduleDraftUncheckedCreateWithoutVersionDraftsInput>
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutVersionDraftsInput
    connect?: ScheduleDraftWhereUniqueInput
  }

  export type ScheduleDraftCreateNestedManyWithoutParentDraftInput = {
    create?: XOR<ScheduleDraftCreateWithoutParentDraftInput, ScheduleDraftUncheckedCreateWithoutParentDraftInput> | ScheduleDraftCreateWithoutParentDraftInput[] | ScheduleDraftUncheckedCreateWithoutParentDraftInput[]
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutParentDraftInput | ScheduleDraftCreateOrConnectWithoutParentDraftInput[]
    createMany?: ScheduleDraftCreateManyParentDraftInputEnvelope
    connect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
  }

  export type ScheduleDraftItemUncheckedCreateNestedManyWithoutDraftInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutDraftInput, ScheduleDraftItemUncheckedCreateWithoutDraftInput> | ScheduleDraftItemCreateWithoutDraftInput[] | ScheduleDraftItemUncheckedCreateWithoutDraftInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutDraftInput | ScheduleDraftItemCreateOrConnectWithoutDraftInput[]
    createMany?: ScheduleDraftItemCreateManyDraftInputEnvelope
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
  }

  export type ScheduleDraftUncheckedCreateNestedManyWithoutParentDraftInput = {
    create?: XOR<ScheduleDraftCreateWithoutParentDraftInput, ScheduleDraftUncheckedCreateWithoutParentDraftInput> | ScheduleDraftCreateWithoutParentDraftInput[] | ScheduleDraftUncheckedCreateWithoutParentDraftInput[]
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutParentDraftInput | ScheduleDraftCreateOrConnectWithoutParentDraftInput[]
    createMany?: ScheduleDraftCreateManyParentDraftInputEnvelope
    connect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
  }

  export type ScheduleDraftItemUpdateManyWithoutDraftNestedInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutDraftInput, ScheduleDraftItemUncheckedCreateWithoutDraftInput> | ScheduleDraftItemCreateWithoutDraftInput[] | ScheduleDraftItemUncheckedCreateWithoutDraftInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutDraftInput | ScheduleDraftItemCreateOrConnectWithoutDraftInput[]
    upsert?: ScheduleDraftItemUpsertWithWhereUniqueWithoutDraftInput | ScheduleDraftItemUpsertWithWhereUniqueWithoutDraftInput[]
    createMany?: ScheduleDraftItemCreateManyDraftInputEnvelope
    set?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    disconnect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    delete?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    update?: ScheduleDraftItemUpdateWithWhereUniqueWithoutDraftInput | ScheduleDraftItemUpdateWithWhereUniqueWithoutDraftInput[]
    updateMany?: ScheduleDraftItemUpdateManyWithWhereWithoutDraftInput | ScheduleDraftItemUpdateManyWithWhereWithoutDraftInput[]
    deleteMany?: ScheduleDraftItemScalarWhereInput | ScheduleDraftItemScalarWhereInput[]
  }

  export type ScheduleTemplateUpdateOneWithoutDraftsNestedInput = {
    create?: XOR<ScheduleTemplateCreateWithoutDraftsInput, ScheduleTemplateUncheckedCreateWithoutDraftsInput>
    connectOrCreate?: ScheduleTemplateCreateOrConnectWithoutDraftsInput
    upsert?: ScheduleTemplateUpsertWithoutDraftsInput
    disconnect?: ScheduleTemplateWhereInput | boolean
    delete?: ScheduleTemplateWhereInput | boolean
    connect?: ScheduleTemplateWhereUniqueInput
    update?: XOR<XOR<ScheduleTemplateUpdateToOneWithWhereWithoutDraftsInput, ScheduleTemplateUpdateWithoutDraftsInput>, ScheduleTemplateUncheckedUpdateWithoutDraftsInput>
  }

  export type ScheduleDraftUpdateOneWithoutVersionDraftsNestedInput = {
    create?: XOR<ScheduleDraftCreateWithoutVersionDraftsInput, ScheduleDraftUncheckedCreateWithoutVersionDraftsInput>
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutVersionDraftsInput
    upsert?: ScheduleDraftUpsertWithoutVersionDraftsInput
    disconnect?: ScheduleDraftWhereInput | boolean
    delete?: ScheduleDraftWhereInput | boolean
    connect?: ScheduleDraftWhereUniqueInput
    update?: XOR<XOR<ScheduleDraftUpdateToOneWithWhereWithoutVersionDraftsInput, ScheduleDraftUpdateWithoutVersionDraftsInput>, ScheduleDraftUncheckedUpdateWithoutVersionDraftsInput>
  }

  export type ScheduleDraftUpdateManyWithoutParentDraftNestedInput = {
    create?: XOR<ScheduleDraftCreateWithoutParentDraftInput, ScheduleDraftUncheckedCreateWithoutParentDraftInput> | ScheduleDraftCreateWithoutParentDraftInput[] | ScheduleDraftUncheckedCreateWithoutParentDraftInput[]
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutParentDraftInput | ScheduleDraftCreateOrConnectWithoutParentDraftInput[]
    upsert?: ScheduleDraftUpsertWithWhereUniqueWithoutParentDraftInput | ScheduleDraftUpsertWithWhereUniqueWithoutParentDraftInput[]
    createMany?: ScheduleDraftCreateManyParentDraftInputEnvelope
    set?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    disconnect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    delete?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    connect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    update?: ScheduleDraftUpdateWithWhereUniqueWithoutParentDraftInput | ScheduleDraftUpdateWithWhereUniqueWithoutParentDraftInput[]
    updateMany?: ScheduleDraftUpdateManyWithWhereWithoutParentDraftInput | ScheduleDraftUpdateManyWithWhereWithoutParentDraftInput[]
    deleteMany?: ScheduleDraftScalarWhereInput | ScheduleDraftScalarWhereInput[]
  }

  export type ScheduleDraftItemUncheckedUpdateManyWithoutDraftNestedInput = {
    create?: XOR<ScheduleDraftItemCreateWithoutDraftInput, ScheduleDraftItemUncheckedCreateWithoutDraftInput> | ScheduleDraftItemCreateWithoutDraftInput[] | ScheduleDraftItemUncheckedCreateWithoutDraftInput[]
    connectOrCreate?: ScheduleDraftItemCreateOrConnectWithoutDraftInput | ScheduleDraftItemCreateOrConnectWithoutDraftInput[]
    upsert?: ScheduleDraftItemUpsertWithWhereUniqueWithoutDraftInput | ScheduleDraftItemUpsertWithWhereUniqueWithoutDraftInput[]
    createMany?: ScheduleDraftItemCreateManyDraftInputEnvelope
    set?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    disconnect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    delete?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    connect?: ScheduleDraftItemWhereUniqueInput | ScheduleDraftItemWhereUniqueInput[]
    update?: ScheduleDraftItemUpdateWithWhereUniqueWithoutDraftInput | ScheduleDraftItemUpdateWithWhereUniqueWithoutDraftInput[]
    updateMany?: ScheduleDraftItemUpdateManyWithWhereWithoutDraftInput | ScheduleDraftItemUpdateManyWithWhereWithoutDraftInput[]
    deleteMany?: ScheduleDraftItemScalarWhereInput | ScheduleDraftItemScalarWhereInput[]
  }

  export type ScheduleDraftUncheckedUpdateManyWithoutParentDraftNestedInput = {
    create?: XOR<ScheduleDraftCreateWithoutParentDraftInput, ScheduleDraftUncheckedCreateWithoutParentDraftInput> | ScheduleDraftCreateWithoutParentDraftInput[] | ScheduleDraftUncheckedCreateWithoutParentDraftInput[]
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutParentDraftInput | ScheduleDraftCreateOrConnectWithoutParentDraftInput[]
    upsert?: ScheduleDraftUpsertWithWhereUniqueWithoutParentDraftInput | ScheduleDraftUpsertWithWhereUniqueWithoutParentDraftInput[]
    createMany?: ScheduleDraftCreateManyParentDraftInputEnvelope
    set?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    disconnect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    delete?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    connect?: ScheduleDraftWhereUniqueInput | ScheduleDraftWhereUniqueInput[]
    update?: ScheduleDraftUpdateWithWhereUniqueWithoutParentDraftInput | ScheduleDraftUpdateWithWhereUniqueWithoutParentDraftInput[]
    updateMany?: ScheduleDraftUpdateManyWithWhereWithoutParentDraftInput | ScheduleDraftUpdateManyWithWhereWithoutParentDraftInput[]
    deleteMany?: ScheduleDraftScalarWhereInput | ScheduleDraftScalarWhereInput[]
  }

  export type ScheduleDraftCreateNestedOneWithoutItemsInput = {
    create?: XOR<ScheduleDraftCreateWithoutItemsInput, ScheduleDraftUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutItemsInput
    connect?: ScheduleDraftWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutDraftSchedulesInput = {
    create?: XOR<EmployeeCreateWithoutDraftSchedulesInput, EmployeeUncheckedCreateWithoutDraftSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDraftSchedulesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ShiftPatternCreateNestedOneWithoutDraftItemsInput = {
    create?: XOR<ShiftPatternCreateWithoutDraftItemsInput, ShiftPatternUncheckedCreateWithoutDraftItemsInput>
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutDraftItemsInput
    connect?: ShiftPatternWhereUniqueInput
  }

  export type ScheduleDraftUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ScheduleDraftCreateWithoutItemsInput, ScheduleDraftUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ScheduleDraftCreateOrConnectWithoutItemsInput
    upsert?: ScheduleDraftUpsertWithoutItemsInput
    connect?: ScheduleDraftWhereUniqueInput
    update?: XOR<XOR<ScheduleDraftUpdateToOneWithWhereWithoutItemsInput, ScheduleDraftUpdateWithoutItemsInput>, ScheduleDraftUncheckedUpdateWithoutItemsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutDraftSchedulesNestedInput = {
    create?: XOR<EmployeeCreateWithoutDraftSchedulesInput, EmployeeUncheckedCreateWithoutDraftSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDraftSchedulesInput
    upsert?: EmployeeUpsertWithoutDraftSchedulesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDraftSchedulesInput, EmployeeUpdateWithoutDraftSchedulesInput>, EmployeeUncheckedUpdateWithoutDraftSchedulesInput>
  }

  export type ShiftPatternUpdateOneWithoutDraftItemsNestedInput = {
    create?: XOR<ShiftPatternCreateWithoutDraftItemsInput, ShiftPatternUncheckedCreateWithoutDraftItemsInput>
    connectOrCreate?: ShiftPatternCreateOrConnectWithoutDraftItemsInput
    upsert?: ShiftPatternUpsertWithoutDraftItemsInput
    disconnect?: ShiftPatternWhereInput | boolean
    delete?: ShiftPatternWhereInput | boolean
    connect?: ShiftPatternWhereUniqueInput
    update?: XOR<XOR<ShiftPatternUpdateToOneWithWhereWithoutDraftItemsInput, ShiftPatternUpdateWithoutDraftItemsInput>, ShiftPatternUncheckedUpdateWithoutDraftItemsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type CompanyCreateWithoutUserInput = {
    companyName: string
    industry: string
    companySize: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    defaultEndTime?: string | null
    defaultStartTime?: string | null
    minStaffRequired?: number | null
    showLeaveInSchedule?: boolean
    updatedAt?: Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: string
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: number
    minimumStaffCoverage?: number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: number
    timezone?: string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    shiftPatterns?: ShiftPatternCreateNestedManyWithoutCompanyInput
    operatingHoursTemplates?: OperatingHoursTemplateCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUserInput = {
    id?: number
    companyName: string
    industry: string
    companySize: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    defaultEndTime?: string | null
    defaultStartTime?: string | null
    minStaffRequired?: number | null
    showLeaveInSchedule?: boolean
    updatedAt?: Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: string
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: number
    minimumStaffCoverage?: number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: number
    timezone?: string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    shiftPatterns?: ShiftPatternUncheckedCreateNestedManyWithoutCompanyInput
    operatingHoursTemplates?: OperatingHoursTemplateUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUserInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
  }

  export type EmployeeCreateWithoutUserInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
  }

  export type LeaveCreateWithoutReviewerInput = {
    startDate: Date | string
    endDate: Date | string
    type: string
    reason?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    reviewedAt?: Date | string | null
    employee: EmployeeCreateNestedOneWithoutLeavesInput
  }

  export type LeaveUncheckedCreateWithoutReviewerInput = {
    id?: number
    employeeId: number
    startDate: Date | string
    endDate: Date | string
    type: string
    reason?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    reviewedAt?: Date | string | null
  }

  export type LeaveCreateOrConnectWithoutReviewerInput = {
    where: LeaveWhereUniqueInput
    create: XOR<LeaveCreateWithoutReviewerInput, LeaveUncheckedCreateWithoutReviewerInput>
  }

  export type LeaveCreateManyReviewerInputEnvelope = {
    data: LeaveCreateManyReviewerInput | LeaveCreateManyReviewerInput[]
    skipDuplicates?: boolean
  }

  export type NoticeReadCreateWithoutUserInput = {
    readAt?: Date | string
    notice: NoticeCreateNestedOneWithoutReadByUsersInput
  }

  export type NoticeReadUncheckedCreateWithoutUserInput = {
    id?: number
    noticeId: number
    readAt?: Date | string
  }

  export type NoticeReadCreateOrConnectWithoutUserInput = {
    where: NoticeReadWhereUniqueInput
    create: XOR<NoticeReadCreateWithoutUserInput, NoticeReadUncheckedCreateWithoutUserInput>
  }

  export type NoticeReadCreateManyUserInputEnvelope = {
    data: NoticeReadCreateManyUserInput | NoticeReadCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NoticeCreateWithoutCreatorInput = {
    title: string
    content: string
    type: string
    priority: string
    isPinned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt?: Date | string | null
    readByUsers?: NoticeReadCreateNestedManyWithoutNoticeInput
  }

  export type NoticeUncheckedCreateWithoutCreatorInput = {
    id?: number
    title: string
    content: string
    type: string
    priority: string
    isPinned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt?: Date | string | null
    readByUsers?: NoticeReadUncheckedCreateNestedManyWithoutNoticeInput
  }

  export type NoticeCreateOrConnectWithoutCreatorInput = {
    where: NoticeWhereUniqueInput
    create: XOR<NoticeCreateWithoutCreatorInput, NoticeUncheckedCreateWithoutCreatorInput>
  }

  export type NoticeCreateManyCreatorInputEnvelope = {
    data: NoticeCreateManyCreatorInput | NoticeCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutUserInput = {
    update: XOR<CompanyUpdateWithoutUserInput, CompanyUncheckedUpdateWithoutUserInput>
    create: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUserInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUserInput, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type CompanyUpdateWithoutUserInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    shiftPatterns?: ShiftPatternUpdateManyWithoutCompanyNestedInput
    operatingHoursTemplates?: OperatingHoursTemplateUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    shiftPatterns?: ShiftPatternUncheckedUpdateManyWithoutCompanyNestedInput
    operatingHoursTemplates?: OperatingHoursTemplateUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type EmployeeUpsertWithoutUserInput = {
    update: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type LeaveUpsertWithWhereUniqueWithoutReviewerInput = {
    where: LeaveWhereUniqueInput
    update: XOR<LeaveUpdateWithoutReviewerInput, LeaveUncheckedUpdateWithoutReviewerInput>
    create: XOR<LeaveCreateWithoutReviewerInput, LeaveUncheckedCreateWithoutReviewerInput>
  }

  export type LeaveUpdateWithWhereUniqueWithoutReviewerInput = {
    where: LeaveWhereUniqueInput
    data: XOR<LeaveUpdateWithoutReviewerInput, LeaveUncheckedUpdateWithoutReviewerInput>
  }

  export type LeaveUpdateManyWithWhereWithoutReviewerInput = {
    where: LeaveScalarWhereInput
    data: XOR<LeaveUpdateManyMutationInput, LeaveUncheckedUpdateManyWithoutReviewerInput>
  }

  export type LeaveScalarWhereInput = {
    AND?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
    OR?: LeaveScalarWhereInput[]
    NOT?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
    id?: IntFilter<"Leave"> | number
    employeeId?: IntFilter<"Leave"> | number
    startDate?: DateTimeFilter<"Leave"> | Date | string
    endDate?: DateTimeFilter<"Leave"> | Date | string
    type?: StringFilter<"Leave"> | string
    reason?: StringNullableFilter<"Leave"> | string | null
    status?: StringFilter<"Leave"> | string
    createdAt?: DateTimeFilter<"Leave"> | Date | string
    updatedAt?: DateTimeFilter<"Leave"> | Date | string
    adminComment?: StringNullableFilter<"Leave"> | string | null
    reviewedAt?: DateTimeNullableFilter<"Leave"> | Date | string | null
    reviewedBy?: IntNullableFilter<"Leave"> | number | null
  }

  export type NoticeReadUpsertWithWhereUniqueWithoutUserInput = {
    where: NoticeReadWhereUniqueInput
    update: XOR<NoticeReadUpdateWithoutUserInput, NoticeReadUncheckedUpdateWithoutUserInput>
    create: XOR<NoticeReadCreateWithoutUserInput, NoticeReadUncheckedCreateWithoutUserInput>
  }

  export type NoticeReadUpdateWithWhereUniqueWithoutUserInput = {
    where: NoticeReadWhereUniqueInput
    data: XOR<NoticeReadUpdateWithoutUserInput, NoticeReadUncheckedUpdateWithoutUserInput>
  }

  export type NoticeReadUpdateManyWithWhereWithoutUserInput = {
    where: NoticeReadScalarWhereInput
    data: XOR<NoticeReadUpdateManyMutationInput, NoticeReadUncheckedUpdateManyWithoutUserInput>
  }

  export type NoticeReadScalarWhereInput = {
    AND?: NoticeReadScalarWhereInput | NoticeReadScalarWhereInput[]
    OR?: NoticeReadScalarWhereInput[]
    NOT?: NoticeReadScalarWhereInput | NoticeReadScalarWhereInput[]
    id?: IntFilter<"NoticeRead"> | number
    noticeId?: IntFilter<"NoticeRead"> | number
    userId?: IntFilter<"NoticeRead"> | number
    readAt?: DateTimeFilter<"NoticeRead"> | Date | string
  }

  export type NoticeUpsertWithWhereUniqueWithoutCreatorInput = {
    where: NoticeWhereUniqueInput
    update: XOR<NoticeUpdateWithoutCreatorInput, NoticeUncheckedUpdateWithoutCreatorInput>
    create: XOR<NoticeCreateWithoutCreatorInput, NoticeUncheckedCreateWithoutCreatorInput>
  }

  export type NoticeUpdateWithWhereUniqueWithoutCreatorInput = {
    where: NoticeWhereUniqueInput
    data: XOR<NoticeUpdateWithoutCreatorInput, NoticeUncheckedUpdateWithoutCreatorInput>
  }

  export type NoticeUpdateManyWithWhereWithoutCreatorInput = {
    where: NoticeScalarWhereInput
    data: XOR<NoticeUpdateManyMutationInput, NoticeUncheckedUpdateManyWithoutCreatorInput>
  }

  export type NoticeScalarWhereInput = {
    AND?: NoticeScalarWhereInput | NoticeScalarWhereInput[]
    OR?: NoticeScalarWhereInput[]
    NOT?: NoticeScalarWhereInput | NoticeScalarWhereInput[]
    id?: IntFilter<"Notice"> | number
    title?: StringFilter<"Notice"> | string
    content?: StringFilter<"Notice"> | string
    type?: StringFilter<"Notice"> | string
    priority?: StringFilter<"Notice"> | string
    isPinned?: BoolFilter<"Notice"> | boolean
    createdBy?: IntFilter<"Notice"> | number
    createdAt?: DateTimeFilter<"Notice"> | Date | string
    updatedAt?: DateTimeFilter<"Notice"> | Date | string
    expiresAt?: DateTimeNullableFilter<"Notice"> | Date | string | null
  }

  export type UserCreateWithoutCompanyInput = {
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee?: EmployeeCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveCreateNestedManyWithoutReviewerInput
    readNotices?: NoticeReadCreateNestedManyWithoutUserInput
    createdNotices?: NoticeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveUncheckedCreateNestedManyWithoutReviewerInput
    readNotices?: NoticeReadUncheckedCreateNestedManyWithoutUserInput
    createdNotices?: NoticeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type ShiftPatternCreateWithoutCompanyInput = {
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleCreateNestedManyWithoutShiftPatternInput
    schedule_templates?: ScheduleTemplateCreateNestedManyWithoutShift_patternsInput
    draftItems?: ScheduleDraftItemCreateNestedManyWithoutShiftPatternInput
  }

  export type ShiftPatternUncheckedCreateWithoutCompanyInput = {
    id?: number
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUncheckedCreateNestedManyWithoutShiftPatternInput
    schedule_templates?: ScheduleTemplateUncheckedCreateNestedManyWithoutShift_patternsInput
    draftItems?: ScheduleDraftItemUncheckedCreateNestedManyWithoutShiftPatternInput
  }

  export type ShiftPatternCreateOrConnectWithoutCompanyInput = {
    where: ShiftPatternWhereUniqueInput
    create: XOR<ShiftPatternCreateWithoutCompanyInput, ShiftPatternUncheckedCreateWithoutCompanyInput>
  }

  export type ShiftPatternCreateManyCompanyInputEnvelope = {
    data: ShiftPatternCreateManyCompanyInput | ShiftPatternCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type OperatingHoursTemplateCreateWithoutCompanyInput = {
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyHours?: DailyOperatingHoursCreateNestedManyWithoutTemplateInput
    staffingRules?: StaffingRuleCreateNestedManyWithoutTemplateInput
    scheduleOverrides?: ScheduleOverrideCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateUncheckedCreateWithoutCompanyInput = {
    id?: number
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyHours?: DailyOperatingHoursUncheckedCreateNestedManyWithoutTemplateInput
    staffingRules?: StaffingRuleUncheckedCreateNestedManyWithoutTemplateInput
    scheduleOverrides?: ScheduleOverrideUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateCreateOrConnectWithoutCompanyInput = {
    where: OperatingHoursTemplateWhereUniqueInput
    create: XOR<OperatingHoursTemplateCreateWithoutCompanyInput, OperatingHoursTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type OperatingHoursTemplateCreateManyCompanyInputEnvelope = {
    data: OperatingHoursTemplateCreateManyCompanyInput | OperatingHoursTemplateCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCompanyInput = {
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompanyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateWithoutCompanyInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUpdateManyWithoutReviewerNestedInput
    readNotices?: NoticeReadUpdateManyWithoutUserNestedInput
    createdNotices?: NoticeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUncheckedUpdateManyWithoutReviewerNestedInput
    readNotices?: NoticeReadUncheckedUpdateManyWithoutUserNestedInput
    createdNotices?: NoticeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ShiftPatternUpsertWithWhereUniqueWithoutCompanyInput = {
    where: ShiftPatternWhereUniqueInput
    update: XOR<ShiftPatternUpdateWithoutCompanyInput, ShiftPatternUncheckedUpdateWithoutCompanyInput>
    create: XOR<ShiftPatternCreateWithoutCompanyInput, ShiftPatternUncheckedCreateWithoutCompanyInput>
  }

  export type ShiftPatternUpdateWithWhereUniqueWithoutCompanyInput = {
    where: ShiftPatternWhereUniqueInput
    data: XOR<ShiftPatternUpdateWithoutCompanyInput, ShiftPatternUncheckedUpdateWithoutCompanyInput>
  }

  export type ShiftPatternUpdateManyWithWhereWithoutCompanyInput = {
    where: ShiftPatternScalarWhereInput
    data: XOR<ShiftPatternUpdateManyMutationInput, ShiftPatternUncheckedUpdateManyWithoutCompanyInput>
  }

  export type ShiftPatternScalarWhereInput = {
    AND?: ShiftPatternScalarWhereInput | ShiftPatternScalarWhereInput[]
    OR?: ShiftPatternScalarWhereInput[]
    NOT?: ShiftPatternScalarWhereInput | ShiftPatternScalarWhereInput[]
    id?: IntFilter<"ShiftPattern"> | number
    name?: StringFilter<"ShiftPattern"> | string
    description?: StringNullableFilter<"ShiftPattern"> | string | null
    startTime?: StringFilter<"ShiftPattern"> | string
    endTime?: StringFilter<"ShiftPattern"> | string
    duration?: IntFilter<"ShiftPattern"> | number
    breakDuration?: IntFilter<"ShiftPattern"> | number
    shiftType?: StringFilter<"ShiftPattern"> | string
    industryType?: StringNullableFilter<"ShiftPattern"> | string | null
    isTemplate?: BoolFilter<"ShiftPattern"> | boolean
    color?: StringFilter<"ShiftPattern"> | string
    createdBy?: IntFilter<"ShiftPattern"> | number
    createdAt?: DateTimeFilter<"ShiftPattern"> | Date | string
    updatedAt?: DateTimeFilter<"ShiftPattern"> | Date | string
    companyId?: IntNullableFilter<"ShiftPattern"> | number | null
    days?: JsonFilter<"ShiftPattern">
    enabled?: BoolFilter<"ShiftPattern"> | boolean
    requiredStaff?: IntFilter<"ShiftPattern"> | number
    requirements?: JsonNullableFilter<"ShiftPattern">
  }

  export type OperatingHoursTemplateUpsertWithWhereUniqueWithoutCompanyInput = {
    where: OperatingHoursTemplateWhereUniqueInput
    update: XOR<OperatingHoursTemplateUpdateWithoutCompanyInput, OperatingHoursTemplateUncheckedUpdateWithoutCompanyInput>
    create: XOR<OperatingHoursTemplateCreateWithoutCompanyInput, OperatingHoursTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type OperatingHoursTemplateUpdateWithWhereUniqueWithoutCompanyInput = {
    where: OperatingHoursTemplateWhereUniqueInput
    data: XOR<OperatingHoursTemplateUpdateWithoutCompanyInput, OperatingHoursTemplateUncheckedUpdateWithoutCompanyInput>
  }

  export type OperatingHoursTemplateUpdateManyWithWhereWithoutCompanyInput = {
    where: OperatingHoursTemplateScalarWhereInput
    data: XOR<OperatingHoursTemplateUpdateManyMutationInput, OperatingHoursTemplateUncheckedUpdateManyWithoutCompanyInput>
  }

  export type OperatingHoursTemplateScalarWhereInput = {
    AND?: OperatingHoursTemplateScalarWhereInput | OperatingHoursTemplateScalarWhereInput[]
    OR?: OperatingHoursTemplateScalarWhereInput[]
    NOT?: OperatingHoursTemplateScalarWhereInput | OperatingHoursTemplateScalarWhereInput[]
    id?: IntFilter<"OperatingHoursTemplate"> | number
    companyId?: IntFilter<"OperatingHoursTemplate"> | number
    templateName?: StringFilter<"OperatingHoursTemplate"> | string
    description?: StringNullableFilter<"OperatingHoursTemplate"> | string | null
    isDefault?: BoolFilter<"OperatingHoursTemplate"> | boolean
    isActive?: BoolFilter<"OperatingHoursTemplate"> | boolean
    timezone?: StringFilter<"OperatingHoursTemplate"> | string
    createdBy?: IntFilter<"OperatingHoursTemplate"> | number
    createdAt?: DateTimeFilter<"OperatingHoursTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"OperatingHoursTemplate"> | Date | string
  }

  export type AbilityCreateWithoutEmployeeInput = {
    customerService?: number
    experience?: number
    flexibility?: number
    rank?: string | null
    teamChemistry?: number
    totalScore?: number | null
    workSkill?: number
  }

  export type AbilityUncheckedCreateWithoutEmployeeInput = {
    id?: number
    customerService?: number
    experience?: number
    flexibility?: number
    rank?: string | null
    teamChemistry?: number
    totalScore?: number | null
    workSkill?: number
  }

  export type AbilityCreateOrConnectWithoutEmployeeInput = {
    where: AbilityWhereUniqueInput
    create: XOR<AbilityCreateWithoutEmployeeInput, AbilityUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeCertificationCreateWithoutEmployeeInput = {
    certificationName: string
    certificationBody?: string | null
    issueDate: Date | string
    expiryDate?: Date | string | null
    certificateNumber?: string | null
    isActive?: boolean
    verificationStatus?: string
    attachmentUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCertificationUncheckedCreateWithoutEmployeeInput = {
    id?: number
    certificationName: string
    certificationBody?: string | null
    issueDate: Date | string
    expiryDate?: Date | string | null
    certificateNumber?: string | null
    isActive?: boolean
    verificationStatus?: string
    attachmentUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCertificationCreateOrConnectWithoutEmployeeInput = {
    where: EmployeeCertificationWhereUniqueInput
    create: XOR<EmployeeCertificationCreateWithoutEmployeeInput, EmployeeCertificationUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeCertificationCreateManyEmployeeInputEnvelope = {
    data: EmployeeCertificationCreateManyEmployeeInput | EmployeeCertificationCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeChemistryCreateWithoutEmployee1Input = {
    score?: number
    employee2: EmployeeCreateNestedOneWithoutChemistry2Input
  }

  export type EmployeeChemistryUncheckedCreateWithoutEmployee1Input = {
    id?: number
    employee2Id: number
    score?: number
  }

  export type EmployeeChemistryCreateOrConnectWithoutEmployee1Input = {
    where: EmployeeChemistryWhereUniqueInput
    create: XOR<EmployeeChemistryCreateWithoutEmployee1Input, EmployeeChemistryUncheckedCreateWithoutEmployee1Input>
  }

  export type EmployeeChemistryCreateManyEmployee1InputEnvelope = {
    data: EmployeeChemistryCreateManyEmployee1Input | EmployeeChemistryCreateManyEmployee1Input[]
    skipDuplicates?: boolean
  }

  export type EmployeeChemistryCreateWithoutEmployee2Input = {
    score?: number
    employee1: EmployeeCreateNestedOneWithoutChemistry1Input
  }

  export type EmployeeChemistryUncheckedCreateWithoutEmployee2Input = {
    id?: number
    employee1Id: number
    score?: number
  }

  export type EmployeeChemistryCreateOrConnectWithoutEmployee2Input = {
    where: EmployeeChemistryWhereUniqueInput
    create: XOR<EmployeeChemistryCreateWithoutEmployee2Input, EmployeeChemistryUncheckedCreateWithoutEmployee2Input>
  }

  export type EmployeeChemistryCreateManyEmployee2InputEnvelope = {
    data: EmployeeChemistryCreateManyEmployee2Input | EmployeeChemistryCreateManyEmployee2Input[]
    skipDuplicates?: boolean
  }

  export type EmployeeConstraintsCreateWithoutEmployeeInput = {
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: boolean
    canWorkHolidays?: boolean
    canWorkNightShifts?: boolean
    maxShiftsPerWeek?: number
    maxOvertimeHours?: number
    requiresFixedSchedule?: boolean
    fixedShiftPattern?: string | null
    maxTravelTime?: number | null
    workLocation?: string | null
    hasReliableTransport?: boolean
    needsAccommodation?: boolean
    accommodationDetails?: string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeConstraintsUncheckedCreateWithoutEmployeeInput = {
    id?: number
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: boolean
    canWorkHolidays?: boolean
    canWorkNightShifts?: boolean
    maxShiftsPerWeek?: number
    maxOvertimeHours?: number
    requiresFixedSchedule?: boolean
    fixedShiftPattern?: string | null
    maxTravelTime?: number | null
    workLocation?: string | null
    hasReliableTransport?: boolean
    needsAccommodation?: boolean
    accommodationDetails?: string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeConstraintsCreateOrConnectWithoutEmployeeInput = {
    where: EmployeeConstraintsWhereUniqueInput
    create: XOR<EmployeeConstraintsCreateWithoutEmployeeInput, EmployeeConstraintsUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeNoteCreateWithoutEmployeeInput = {
    type: string
    content: string
    priority: string
    createdBy: number
    createdAt?: Date | string
  }

  export type EmployeeNoteUncheckedCreateWithoutEmployeeInput = {
    id?: number
    type: string
    content: string
    priority: string
    createdBy: number
    createdAt?: Date | string
  }

  export type EmployeeNoteCreateOrConnectWithoutEmployeeInput = {
    where: EmployeeNoteWhereUniqueInput
    create: XOR<EmployeeNoteCreateWithoutEmployeeInput, EmployeeNoteUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeNoteCreateManyEmployeeInputEnvelope = {
    data: EmployeeNoteCreateManyEmployeeInput | EmployeeNoteCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutEmployeeInput = {
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveCreateNestedManyWithoutReviewerInput
    readNotices?: NoticeReadCreateNestedManyWithoutUserInput
    createdNotices?: NoticeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutEmployeeInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveUncheckedCreateNestedManyWithoutReviewerInput
    readNotices?: NoticeReadUncheckedCreateNestedManyWithoutUserInput
    createdNotices?: NoticeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutEmployeeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveCreateWithoutEmployeeInput = {
    startDate: Date | string
    endDate: Date | string
    type: string
    reason?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    reviewedAt?: Date | string | null
    reviewer?: UserCreateNestedOneWithoutReviewedLeavesInput
  }

  export type LeaveUncheckedCreateWithoutEmployeeInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    type: string
    reason?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
  }

  export type LeaveCreateOrConnectWithoutEmployeeInput = {
    where: LeaveWhereUniqueInput
    create: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveCreateManyEmployeeInputEnvelope = {
    data: LeaveCreateManyEmployeeInput | LeaveCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type PreferenceCreateWithoutEmployeeInput = {
    preferDays: JsonNullValueInput | InputJsonValue
    avoidDays: JsonNullValueInput | InputJsonValue
    fixedOffDays: JsonNullValueInput | InputJsonValue
  }

  export type PreferenceUncheckedCreateWithoutEmployeeInput = {
    id?: number
    preferDays: JsonNullValueInput | InputJsonValue
    avoidDays: JsonNullValueInput | InputJsonValue
    fixedOffDays: JsonNullValueInput | InputJsonValue
  }

  export type PreferenceCreateOrConnectWithoutEmployeeInput = {
    where: PreferenceWhereUniqueInput
    create: XOR<PreferenceCreateWithoutEmployeeInput, PreferenceUncheckedCreateWithoutEmployeeInput>
  }

  export type ScheduleCreateWithoutEmployeeInput = {
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    swapRequested?: boolean
    generationLog?: GenerationLogCreateNestedOneWithoutSchedulesInput
    shiftPattern?: ShiftPatternCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutEmployeeInput = {
    id?: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    generationLogId?: number | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    shiftPatternId?: number | null
    swapRequested?: boolean
  }

  export type ScheduleCreateOrConnectWithoutEmployeeInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput>
  }

  export type ScheduleCreateManyEmployeeInputEnvelope = {
    data: ScheduleCreateManyEmployeeInput | ScheduleCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleDraftItemCreateWithoutEmployeeInput = {
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    draft: ScheduleDraftCreateNestedOneWithoutItemsInput
    shiftPattern?: ShiftPatternCreateNestedOneWithoutDraftItemsInput
  }

  export type ScheduleDraftItemUncheckedCreateWithoutEmployeeInput = {
    id?: number
    draftId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    shiftPatternId?: number | null
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleDraftItemCreateOrConnectWithoutEmployeeInput = {
    where: ScheduleDraftItemWhereUniqueInput
    create: XOR<ScheduleDraftItemCreateWithoutEmployeeInput, ScheduleDraftItemUncheckedCreateWithoutEmployeeInput>
  }

  export type ScheduleDraftItemCreateManyEmployeeInputEnvelope = {
    data: ScheduleDraftItemCreateManyEmployeeInput | ScheduleDraftItemCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type AbilityUpsertWithoutEmployeeInput = {
    update: XOR<AbilityUpdateWithoutEmployeeInput, AbilityUncheckedUpdateWithoutEmployeeInput>
    create: XOR<AbilityCreateWithoutEmployeeInput, AbilityUncheckedCreateWithoutEmployeeInput>
    where?: AbilityWhereInput
  }

  export type AbilityUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: AbilityWhereInput
    data: XOR<AbilityUpdateWithoutEmployeeInput, AbilityUncheckedUpdateWithoutEmployeeInput>
  }

  export type AbilityUpdateWithoutEmployeeInput = {
    customerService?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    flexibility?: IntFieldUpdateOperationsInput | number
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    teamChemistry?: IntFieldUpdateOperationsInput | number
    totalScore?: NullableIntFieldUpdateOperationsInput | number | null
    workSkill?: IntFieldUpdateOperationsInput | number
  }

  export type AbilityUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerService?: IntFieldUpdateOperationsInput | number
    experience?: IntFieldUpdateOperationsInput | number
    flexibility?: IntFieldUpdateOperationsInput | number
    rank?: NullableStringFieldUpdateOperationsInput | string | null
    teamChemistry?: IntFieldUpdateOperationsInput | number
    totalScore?: NullableIntFieldUpdateOperationsInput | number | null
    workSkill?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeCertificationUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeCertificationWhereUniqueInput
    update: XOR<EmployeeCertificationUpdateWithoutEmployeeInput, EmployeeCertificationUncheckedUpdateWithoutEmployeeInput>
    create: XOR<EmployeeCertificationCreateWithoutEmployeeInput, EmployeeCertificationUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeCertificationUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeCertificationWhereUniqueInput
    data: XOR<EmployeeCertificationUpdateWithoutEmployeeInput, EmployeeCertificationUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeCertificationUpdateManyWithWhereWithoutEmployeeInput = {
    where: EmployeeCertificationScalarWhereInput
    data: XOR<EmployeeCertificationUpdateManyMutationInput, EmployeeCertificationUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type EmployeeCertificationScalarWhereInput = {
    AND?: EmployeeCertificationScalarWhereInput | EmployeeCertificationScalarWhereInput[]
    OR?: EmployeeCertificationScalarWhereInput[]
    NOT?: EmployeeCertificationScalarWhereInput | EmployeeCertificationScalarWhereInput[]
    id?: IntFilter<"EmployeeCertification"> | number
    employeeId?: IntFilter<"EmployeeCertification"> | number
    certificationName?: StringFilter<"EmployeeCertification"> | string
    certificationBody?: StringNullableFilter<"EmployeeCertification"> | string | null
    issueDate?: DateTimeFilter<"EmployeeCertification"> | Date | string
    expiryDate?: DateTimeNullableFilter<"EmployeeCertification"> | Date | string | null
    certificateNumber?: StringNullableFilter<"EmployeeCertification"> | string | null
    isActive?: BoolFilter<"EmployeeCertification"> | boolean
    verificationStatus?: StringFilter<"EmployeeCertification"> | string
    attachmentUrl?: StringNullableFilter<"EmployeeCertification"> | string | null
    createdAt?: DateTimeFilter<"EmployeeCertification"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeCertification"> | Date | string
  }

  export type EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee1Input = {
    where: EmployeeChemistryWhereUniqueInput
    update: XOR<EmployeeChemistryUpdateWithoutEmployee1Input, EmployeeChemistryUncheckedUpdateWithoutEmployee1Input>
    create: XOR<EmployeeChemistryCreateWithoutEmployee1Input, EmployeeChemistryUncheckedCreateWithoutEmployee1Input>
  }

  export type EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee1Input = {
    where: EmployeeChemistryWhereUniqueInput
    data: XOR<EmployeeChemistryUpdateWithoutEmployee1Input, EmployeeChemistryUncheckedUpdateWithoutEmployee1Input>
  }

  export type EmployeeChemistryUpdateManyWithWhereWithoutEmployee1Input = {
    where: EmployeeChemistryScalarWhereInput
    data: XOR<EmployeeChemistryUpdateManyMutationInput, EmployeeChemistryUncheckedUpdateManyWithoutEmployee1Input>
  }

  export type EmployeeChemistryScalarWhereInput = {
    AND?: EmployeeChemistryScalarWhereInput | EmployeeChemistryScalarWhereInput[]
    OR?: EmployeeChemistryScalarWhereInput[]
    NOT?: EmployeeChemistryScalarWhereInput | EmployeeChemistryScalarWhereInput[]
    id?: IntFilter<"EmployeeChemistry"> | number
    employee1Id?: IntFilter<"EmployeeChemistry"> | number
    employee2Id?: IntFilter<"EmployeeChemistry"> | number
    score?: IntFilter<"EmployeeChemistry"> | number
  }

  export type EmployeeChemistryUpsertWithWhereUniqueWithoutEmployee2Input = {
    where: EmployeeChemistryWhereUniqueInput
    update: XOR<EmployeeChemistryUpdateWithoutEmployee2Input, EmployeeChemistryUncheckedUpdateWithoutEmployee2Input>
    create: XOR<EmployeeChemistryCreateWithoutEmployee2Input, EmployeeChemistryUncheckedCreateWithoutEmployee2Input>
  }

  export type EmployeeChemistryUpdateWithWhereUniqueWithoutEmployee2Input = {
    where: EmployeeChemistryWhereUniqueInput
    data: XOR<EmployeeChemistryUpdateWithoutEmployee2Input, EmployeeChemistryUncheckedUpdateWithoutEmployee2Input>
  }

  export type EmployeeChemistryUpdateManyWithWhereWithoutEmployee2Input = {
    where: EmployeeChemistryScalarWhereInput
    data: XOR<EmployeeChemistryUpdateManyMutationInput, EmployeeChemistryUncheckedUpdateManyWithoutEmployee2Input>
  }

  export type EmployeeConstraintsUpsertWithoutEmployeeInput = {
    update: XOR<EmployeeConstraintsUpdateWithoutEmployeeInput, EmployeeConstraintsUncheckedUpdateWithoutEmployeeInput>
    create: XOR<EmployeeConstraintsCreateWithoutEmployeeInput, EmployeeConstraintsUncheckedCreateWithoutEmployeeInput>
    where?: EmployeeConstraintsWhereInput
  }

  export type EmployeeConstraintsUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: EmployeeConstraintsWhereInput
    data: XOR<EmployeeConstraintsUpdateWithoutEmployeeInput, EmployeeConstraintsUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeConstraintsUpdateWithoutEmployeeInput = {
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: BoolFieldUpdateOperationsInput | boolean
    canWorkHolidays?: BoolFieldUpdateOperationsInput | boolean
    canWorkNightShifts?: BoolFieldUpdateOperationsInput | boolean
    maxShiftsPerWeek?: IntFieldUpdateOperationsInput | number
    maxOvertimeHours?: IntFieldUpdateOperationsInput | number
    requiresFixedSchedule?: BoolFieldUpdateOperationsInput | boolean
    fixedShiftPattern?: NullableStringFieldUpdateOperationsInput | string | null
    maxTravelTime?: NullableIntFieldUpdateOperationsInput | number | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    hasReliableTransport?: BoolFieldUpdateOperationsInput | boolean
    needsAccommodation?: BoolFieldUpdateOperationsInput | boolean
    accommodationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeConstraintsUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    unavailableTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    preferredTimeSlots?: NullableJsonNullValueInput | InputJsonValue
    blackoutDates?: NullableJsonNullValueInput | InputJsonValue
    preferredShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    avoidShiftTypes?: NullableJsonNullValueInput | InputJsonValue
    canWorkWeekends?: BoolFieldUpdateOperationsInput | boolean
    canWorkHolidays?: BoolFieldUpdateOperationsInput | boolean
    canWorkNightShifts?: BoolFieldUpdateOperationsInput | boolean
    maxShiftsPerWeek?: IntFieldUpdateOperationsInput | number
    maxOvertimeHours?: IntFieldUpdateOperationsInput | number
    requiresFixedSchedule?: BoolFieldUpdateOperationsInput | boolean
    fixedShiftPattern?: NullableStringFieldUpdateOperationsInput | string | null
    maxTravelTime?: NullableIntFieldUpdateOperationsInput | number | null
    workLocation?: NullableStringFieldUpdateOperationsInput | string | null
    hasReliableTransport?: BoolFieldUpdateOperationsInput | boolean
    needsAccommodation?: BoolFieldUpdateOperationsInput | boolean
    accommodationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    medicalRestrictions?: NullableJsonNullValueInput | InputJsonValue
    certificationRequired?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeNoteUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeNoteWhereUniqueInput
    update: XOR<EmployeeNoteUpdateWithoutEmployeeInput, EmployeeNoteUncheckedUpdateWithoutEmployeeInput>
    create: XOR<EmployeeNoteCreateWithoutEmployeeInput, EmployeeNoteUncheckedCreateWithoutEmployeeInput>
  }

  export type EmployeeNoteUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: EmployeeNoteWhereUniqueInput
    data: XOR<EmployeeNoteUpdateWithoutEmployeeInput, EmployeeNoteUncheckedUpdateWithoutEmployeeInput>
  }

  export type EmployeeNoteUpdateManyWithWhereWithoutEmployeeInput = {
    where: EmployeeNoteScalarWhereInput
    data: XOR<EmployeeNoteUpdateManyMutationInput, EmployeeNoteUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type EmployeeNoteScalarWhereInput = {
    AND?: EmployeeNoteScalarWhereInput | EmployeeNoteScalarWhereInput[]
    OR?: EmployeeNoteScalarWhereInput[]
    NOT?: EmployeeNoteScalarWhereInput | EmployeeNoteScalarWhereInput[]
    id?: IntFilter<"EmployeeNote"> | number
    employeeId?: IntFilter<"EmployeeNote"> | number
    type?: StringFilter<"EmployeeNote"> | string
    content?: StringFilter<"EmployeeNote"> | string
    priority?: StringFilter<"EmployeeNote"> | string
    createdBy?: IntFilter<"EmployeeNote"> | number
    createdAt?: DateTimeFilter<"EmployeeNote"> | Date | string
  }

  export type UserUpsertWithoutEmployeeInput = {
    update: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateWithoutEmployeeInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUpdateManyWithoutReviewerNestedInput
    readNotices?: NoticeReadUpdateManyWithoutUserNestedInput
    createdNotices?: NoticeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUncheckedUpdateManyWithoutReviewerNestedInput
    readNotices?: NoticeReadUncheckedUpdateManyWithoutUserNestedInput
    createdNotices?: NoticeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type LeaveUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveWhereUniqueInput
    update: XOR<LeaveUpdateWithoutEmployeeInput, LeaveUncheckedUpdateWithoutEmployeeInput>
    create: XOR<LeaveCreateWithoutEmployeeInput, LeaveUncheckedCreateWithoutEmployeeInput>
  }

  export type LeaveUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: LeaveWhereUniqueInput
    data: XOR<LeaveUpdateWithoutEmployeeInput, LeaveUncheckedUpdateWithoutEmployeeInput>
  }

  export type LeaveUpdateManyWithWhereWithoutEmployeeInput = {
    where: LeaveScalarWhereInput
    data: XOR<LeaveUpdateManyMutationInput, LeaveUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type PreferenceUpsertWithoutEmployeeInput = {
    update: XOR<PreferenceUpdateWithoutEmployeeInput, PreferenceUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PreferenceCreateWithoutEmployeeInput, PreferenceUncheckedCreateWithoutEmployeeInput>
    where?: PreferenceWhereInput
  }

  export type PreferenceUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: PreferenceWhereInput
    data: XOR<PreferenceUpdateWithoutEmployeeInput, PreferenceUncheckedUpdateWithoutEmployeeInput>
  }

  export type PreferenceUpdateWithoutEmployeeInput = {
    preferDays?: JsonNullValueInput | InputJsonValue
    avoidDays?: JsonNullValueInput | InputJsonValue
    fixedOffDays?: JsonNullValueInput | InputJsonValue
  }

  export type PreferenceUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    preferDays?: JsonNullValueInput | InputJsonValue
    avoidDays?: JsonNullValueInput | InputJsonValue
    fixedOffDays?: JsonNullValueInput | InputJsonValue
  }

  export type ScheduleUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutEmployeeInput, ScheduleUncheckedUpdateWithoutEmployeeInput>
    create: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutEmployeeInput, ScheduleUncheckedUpdateWithoutEmployeeInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutEmployeeInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: IntFilter<"Schedule"> | number
    employeeId?: IntFilter<"Schedule"> | number
    date?: DateTimeFilter<"Schedule"> | Date | string
    startTime?: StringFilter<"Schedule"> | string
    endTime?: StringFilter<"Schedule"> | string
    shiftType?: StringFilter<"Schedule"> | string
    notes?: StringNullableFilter<"Schedule"> | string | null
    status?: StringFilter<"Schedule"> | string
    createdBy?: IntNullableFilter<"Schedule"> | number | null
    updatedBy?: IntNullableFilter<"Schedule"> | number | null
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    breakTime?: StringNullableFilter<"Schedule"> | string | null
    estimatedWorkload?: StringNullableFilter<"Schedule"> | string | null
    generationLogId?: IntNullableFilter<"Schedule"> | number | null
    isAutoGenerated?: BoolFilter<"Schedule"> | boolean
    overtimeApproved?: BoolFilter<"Schedule"> | boolean
    priority?: StringFilter<"Schedule"> | string
    shiftPatternId?: IntNullableFilter<"Schedule"> | number | null
    swapRequested?: BoolFilter<"Schedule"> | boolean
  }

  export type ScheduleDraftItemUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: ScheduleDraftItemWhereUniqueInput
    update: XOR<ScheduleDraftItemUpdateWithoutEmployeeInput, ScheduleDraftItemUncheckedUpdateWithoutEmployeeInput>
    create: XOR<ScheduleDraftItemCreateWithoutEmployeeInput, ScheduleDraftItemUncheckedCreateWithoutEmployeeInput>
  }

  export type ScheduleDraftItemUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: ScheduleDraftItemWhereUniqueInput
    data: XOR<ScheduleDraftItemUpdateWithoutEmployeeInput, ScheduleDraftItemUncheckedUpdateWithoutEmployeeInput>
  }

  export type ScheduleDraftItemUpdateManyWithWhereWithoutEmployeeInput = {
    where: ScheduleDraftItemScalarWhereInput
    data: XOR<ScheduleDraftItemUpdateManyMutationInput, ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type ScheduleDraftItemScalarWhereInput = {
    AND?: ScheduleDraftItemScalarWhereInput | ScheduleDraftItemScalarWhereInput[]
    OR?: ScheduleDraftItemScalarWhereInput[]
    NOT?: ScheduleDraftItemScalarWhereInput | ScheduleDraftItemScalarWhereInput[]
    id?: IntFilter<"ScheduleDraftItem"> | number
    draftId?: IntFilter<"ScheduleDraftItem"> | number
    employeeId?: IntFilter<"ScheduleDraftItem"> | number
    date?: DateTimeFilter<"ScheduleDraftItem"> | Date | string
    startTime?: StringFilter<"ScheduleDraftItem"> | string
    endTime?: StringFilter<"ScheduleDraftItem"> | string
    shiftType?: StringFilter<"ScheduleDraftItem"> | string
    shiftPatternId?: IntNullableFilter<"ScheduleDraftItem"> | number | null
    notes?: StringNullableFilter<"ScheduleDraftItem"> | string | null
    status?: StringFilter<"ScheduleDraftItem"> | string
    priority?: StringFilter<"ScheduleDraftItem"> | string
    breakTime?: StringNullableFilter<"ScheduleDraftItem"> | string | null
    estimatedWorkload?: StringNullableFilter<"ScheduleDraftItem"> | string | null
    requirements?: JsonNullableFilter<"ScheduleDraftItem">
    constraints?: JsonNullableFilter<"ScheduleDraftItem">
    createdAt?: DateTimeFilter<"ScheduleDraftItem"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleDraftItem"> | Date | string
  }

  export type EmployeeCreateWithoutAbilitiesInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutAbilitiesInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutAbilitiesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutAbilitiesInput, EmployeeUncheckedCreateWithoutAbilitiesInput>
  }

  export type EmployeeUpsertWithoutAbilitiesInput = {
    update: XOR<EmployeeUpdateWithoutAbilitiesInput, EmployeeUncheckedUpdateWithoutAbilitiesInput>
    create: XOR<EmployeeCreateWithoutAbilitiesInput, EmployeeUncheckedCreateWithoutAbilitiesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutAbilitiesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutAbilitiesInput, EmployeeUncheckedUpdateWithoutAbilitiesInput>
  }

  export type EmployeeUpdateWithoutAbilitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutAbilitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutPreferencesInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutPreferencesInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutPreferencesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPreferencesInput, EmployeeUncheckedCreateWithoutPreferencesInput>
  }

  export type EmployeeUpsertWithoutPreferencesInput = {
    update: XOR<EmployeeUpdateWithoutPreferencesInput, EmployeeUncheckedUpdateWithoutPreferencesInput>
    create: XOR<EmployeeCreateWithoutPreferencesInput, EmployeeUncheckedCreateWithoutPreferencesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPreferencesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPreferencesInput, EmployeeUncheckedUpdateWithoutPreferencesInput>
  }

  export type EmployeeUpdateWithoutPreferencesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPreferencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutSchedulesInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutSchedulesInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutSchedulesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutSchedulesInput, EmployeeUncheckedCreateWithoutSchedulesInput>
  }

  export type GenerationLogCreateWithoutSchedulesInput = {
    generatedBy: number
    generationType: string
    periodStart: Date | string
    periodEnd: Date | string
    totalSchedulesCreated?: number
    totalEmployeesAffected?: number
    parameters: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: number | null
    employeeSatisfaction?: number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: number | null
    algorithmVersion?: string
    status?: string
    notes?: string | null
    createdAt?: Date | string
    template?: ScheduleTemplateCreateNestedOneWithoutGenerationLogsInput
  }

  export type GenerationLogUncheckedCreateWithoutSchedulesInput = {
    id?: number
    templateId?: number | null
    generatedBy: number
    generationType: string
    periodStart: Date | string
    periodEnd: Date | string
    totalSchedulesCreated?: number
    totalEmployeesAffected?: number
    parameters: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: number | null
    employeeSatisfaction?: number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: number | null
    algorithmVersion?: string
    status?: string
    notes?: string | null
    createdAt?: Date | string
  }

  export type GenerationLogCreateOrConnectWithoutSchedulesInput = {
    where: GenerationLogWhereUniqueInput
    create: XOR<GenerationLogCreateWithoutSchedulesInput, GenerationLogUncheckedCreateWithoutSchedulesInput>
  }

  export type ShiftPatternCreateWithoutSchedulesInput = {
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    company?: CompanyCreateNestedOneWithoutShiftPatternsInput
    schedule_templates?: ScheduleTemplateCreateNestedManyWithoutShift_patternsInput
    draftItems?: ScheduleDraftItemCreateNestedManyWithoutShiftPatternInput
  }

  export type ShiftPatternUncheckedCreateWithoutSchedulesInput = {
    id?: number
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedule_templates?: ScheduleTemplateUncheckedCreateNestedManyWithoutShift_patternsInput
    draftItems?: ScheduleDraftItemUncheckedCreateNestedManyWithoutShiftPatternInput
  }

  export type ShiftPatternCreateOrConnectWithoutSchedulesInput = {
    where: ShiftPatternWhereUniqueInput
    create: XOR<ShiftPatternCreateWithoutSchedulesInput, ShiftPatternUncheckedCreateWithoutSchedulesInput>
  }

  export type EmployeeUpsertWithoutSchedulesInput = {
    update: XOR<EmployeeUpdateWithoutSchedulesInput, EmployeeUncheckedUpdateWithoutSchedulesInput>
    create: XOR<EmployeeCreateWithoutSchedulesInput, EmployeeUncheckedCreateWithoutSchedulesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutSchedulesInput, EmployeeUncheckedUpdateWithoutSchedulesInput>
  }

  export type EmployeeUpdateWithoutSchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type GenerationLogUpsertWithoutSchedulesInput = {
    update: XOR<GenerationLogUpdateWithoutSchedulesInput, GenerationLogUncheckedUpdateWithoutSchedulesInput>
    create: XOR<GenerationLogCreateWithoutSchedulesInput, GenerationLogUncheckedCreateWithoutSchedulesInput>
    where?: GenerationLogWhereInput
  }

  export type GenerationLogUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: GenerationLogWhereInput
    data: XOR<GenerationLogUpdateWithoutSchedulesInput, GenerationLogUncheckedUpdateWithoutSchedulesInput>
  }

  export type GenerationLogUpdateWithoutSchedulesInput = {
    generatedBy?: IntFieldUpdateOperationsInput | number
    generationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSchedulesCreated?: IntFieldUpdateOperationsInput | number
    totalEmployeesAffected?: IntFieldUpdateOperationsInput | number
    parameters?: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    algorithmVersion?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: ScheduleTemplateUpdateOneWithoutGenerationLogsNestedInput
  }

  export type GenerationLogUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: NullableIntFieldUpdateOperationsInput | number | null
    generatedBy?: IntFieldUpdateOperationsInput | number
    generationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSchedulesCreated?: IntFieldUpdateOperationsInput | number
    totalEmployeesAffected?: IntFieldUpdateOperationsInput | number
    parameters?: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    algorithmVersion?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftPatternUpsertWithoutSchedulesInput = {
    update: XOR<ShiftPatternUpdateWithoutSchedulesInput, ShiftPatternUncheckedUpdateWithoutSchedulesInput>
    create: XOR<ShiftPatternCreateWithoutSchedulesInput, ShiftPatternUncheckedCreateWithoutSchedulesInput>
    where?: ShiftPatternWhereInput
  }

  export type ShiftPatternUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: ShiftPatternWhereInput
    data: XOR<ShiftPatternUpdateWithoutSchedulesInput, ShiftPatternUncheckedUpdateWithoutSchedulesInput>
  }

  export type ShiftPatternUpdateWithoutSchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    company?: CompanyUpdateOneWithoutShiftPatternsNestedInput
    schedule_templates?: ScheduleTemplateUpdateManyWithoutShift_patternsNestedInput
    draftItems?: ScheduleDraftItemUpdateManyWithoutShiftPatternNestedInput
  }

  export type ShiftPatternUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedule_templates?: ScheduleTemplateUncheckedUpdateManyWithoutShift_patternsNestedInput
    draftItems?: ScheduleDraftItemUncheckedUpdateManyWithoutShiftPatternNestedInput
  }

  export type EmployeeCreateWithoutLeavesInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutLeavesInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutLeavesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutLeavesInput, EmployeeUncheckedCreateWithoutLeavesInput>
  }

  export type UserCreateWithoutReviewedLeavesInput = {
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateNestedOneWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    readNotices?: NoticeReadCreateNestedManyWithoutUserInput
    createdNotices?: NoticeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutReviewedLeavesInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    readNotices?: NoticeReadUncheckedCreateNestedManyWithoutUserInput
    createdNotices?: NoticeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutReviewedLeavesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewedLeavesInput, UserUncheckedCreateWithoutReviewedLeavesInput>
  }

  export type EmployeeUpsertWithoutLeavesInput = {
    update: XOR<EmployeeUpdateWithoutLeavesInput, EmployeeUncheckedUpdateWithoutLeavesInput>
    create: XOR<EmployeeCreateWithoutLeavesInput, EmployeeUncheckedCreateWithoutLeavesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutLeavesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutLeavesInput, EmployeeUncheckedUpdateWithoutLeavesInput>
  }

  export type EmployeeUpdateWithoutLeavesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutLeavesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type UserUpsertWithoutReviewedLeavesInput = {
    update: XOR<UserUpdateWithoutReviewedLeavesInput, UserUncheckedUpdateWithoutReviewedLeavesInput>
    create: XOR<UserCreateWithoutReviewedLeavesInput, UserUncheckedCreateWithoutReviewedLeavesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewedLeavesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewedLeavesInput, UserUncheckedUpdateWithoutReviewedLeavesInput>
  }

  export type UserUpdateWithoutReviewedLeavesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    readNotices?: NoticeReadUpdateManyWithoutUserNestedInput
    createdNotices?: NoticeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutReviewedLeavesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    readNotices?: NoticeReadUncheckedUpdateManyWithoutUserNestedInput
    createdNotices?: NoticeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type EmployeeCreateWithoutNotesInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutNotesInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutNotesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutNotesInput, EmployeeUncheckedCreateWithoutNotesInput>
  }

  export type EmployeeUpsertWithoutNotesInput = {
    update: XOR<EmployeeUpdateWithoutNotesInput, EmployeeUncheckedUpdateWithoutNotesInput>
    create: XOR<EmployeeCreateWithoutNotesInput, EmployeeUncheckedCreateWithoutNotesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutNotesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutNotesInput, EmployeeUncheckedUpdateWithoutNotesInput>
  }

  export type EmployeeUpdateWithoutNotesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateWithoutChemistry1Input = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutChemistry1Input = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutChemistry1Input = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutChemistry1Input, EmployeeUncheckedCreateWithoutChemistry1Input>
  }

  export type EmployeeCreateWithoutChemistry2Input = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutChemistry2Input = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutChemistry2Input = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutChemistry2Input, EmployeeUncheckedCreateWithoutChemistry2Input>
  }

  export type EmployeeUpsertWithoutChemistry1Input = {
    update: XOR<EmployeeUpdateWithoutChemistry1Input, EmployeeUncheckedUpdateWithoutChemistry1Input>
    create: XOR<EmployeeCreateWithoutChemistry1Input, EmployeeUncheckedCreateWithoutChemistry1Input>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutChemistry1Input = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutChemistry1Input, EmployeeUncheckedUpdateWithoutChemistry1Input>
  }

  export type EmployeeUpdateWithoutChemistry1Input = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutChemistry1Input = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUpsertWithoutChemistry2Input = {
    update: XOR<EmployeeUpdateWithoutChemistry2Input, EmployeeUncheckedUpdateWithoutChemistry2Input>
    create: XOR<EmployeeCreateWithoutChemistry2Input, EmployeeUncheckedCreateWithoutChemistry2Input>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutChemistry2Input = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutChemistry2Input, EmployeeUncheckedUpdateWithoutChemistry2Input>
  }

  export type EmployeeUpdateWithoutChemistry2Input = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutChemistry2Input = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type NoticeReadCreateWithoutNoticeInput = {
    readAt?: Date | string
    user: UserCreateNestedOneWithoutReadNoticesInput
  }

  export type NoticeReadUncheckedCreateWithoutNoticeInput = {
    id?: number
    userId: number
    readAt?: Date | string
  }

  export type NoticeReadCreateOrConnectWithoutNoticeInput = {
    where: NoticeReadWhereUniqueInput
    create: XOR<NoticeReadCreateWithoutNoticeInput, NoticeReadUncheckedCreateWithoutNoticeInput>
  }

  export type NoticeReadCreateManyNoticeInputEnvelope = {
    data: NoticeReadCreateManyNoticeInput | NoticeReadCreateManyNoticeInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedNoticesInput = {
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateNestedOneWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveCreateNestedManyWithoutReviewerInput
    readNotices?: NoticeReadCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedNoticesInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveUncheckedCreateNestedManyWithoutReviewerInput
    readNotices?: NoticeReadUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedNoticesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedNoticesInput, UserUncheckedCreateWithoutCreatedNoticesInput>
  }

  export type NoticeReadUpsertWithWhereUniqueWithoutNoticeInput = {
    where: NoticeReadWhereUniqueInput
    update: XOR<NoticeReadUpdateWithoutNoticeInput, NoticeReadUncheckedUpdateWithoutNoticeInput>
    create: XOR<NoticeReadCreateWithoutNoticeInput, NoticeReadUncheckedCreateWithoutNoticeInput>
  }

  export type NoticeReadUpdateWithWhereUniqueWithoutNoticeInput = {
    where: NoticeReadWhereUniqueInput
    data: XOR<NoticeReadUpdateWithoutNoticeInput, NoticeReadUncheckedUpdateWithoutNoticeInput>
  }

  export type NoticeReadUpdateManyWithWhereWithoutNoticeInput = {
    where: NoticeReadScalarWhereInput
    data: XOR<NoticeReadUpdateManyMutationInput, NoticeReadUncheckedUpdateManyWithoutNoticeInput>
  }

  export type UserUpsertWithoutCreatedNoticesInput = {
    update: XOR<UserUpdateWithoutCreatedNoticesInput, UserUncheckedUpdateWithoutCreatedNoticesInput>
    create: XOR<UserCreateWithoutCreatedNoticesInput, UserUncheckedCreateWithoutCreatedNoticesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedNoticesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedNoticesInput, UserUncheckedUpdateWithoutCreatedNoticesInput>
  }

  export type UserUpdateWithoutCreatedNoticesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUpdateManyWithoutReviewerNestedInput
    readNotices?: NoticeReadUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedNoticesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUncheckedUpdateManyWithoutReviewerNestedInput
    readNotices?: NoticeReadUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NoticeCreateWithoutReadByUsersInput = {
    title: string
    content: string
    type: string
    priority: string
    isPinned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt?: Date | string | null
    creator: UserCreateNestedOneWithoutCreatedNoticesInput
  }

  export type NoticeUncheckedCreateWithoutReadByUsersInput = {
    id?: number
    title: string
    content: string
    type: string
    priority: string
    isPinned?: boolean
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type NoticeCreateOrConnectWithoutReadByUsersInput = {
    where: NoticeWhereUniqueInput
    create: XOR<NoticeCreateWithoutReadByUsersInput, NoticeUncheckedCreateWithoutReadByUsersInput>
  }

  export type UserCreateWithoutReadNoticesInput = {
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateNestedOneWithoutUserInput
    employee?: EmployeeCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveCreateNestedManyWithoutReviewerInput
    createdNotices?: NoticeCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutReadNoticesInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyUncheckedCreateNestedOneWithoutUserInput
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    reviewedLeaves?: LeaveUncheckedCreateNestedManyWithoutReviewerInput
    createdNotices?: NoticeUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutReadNoticesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReadNoticesInput, UserUncheckedCreateWithoutReadNoticesInput>
  }

  export type NoticeUpsertWithoutReadByUsersInput = {
    update: XOR<NoticeUpdateWithoutReadByUsersInput, NoticeUncheckedUpdateWithoutReadByUsersInput>
    create: XOR<NoticeCreateWithoutReadByUsersInput, NoticeUncheckedCreateWithoutReadByUsersInput>
    where?: NoticeWhereInput
  }

  export type NoticeUpdateToOneWithWhereWithoutReadByUsersInput = {
    where?: NoticeWhereInput
    data: XOR<NoticeUpdateWithoutReadByUsersInput, NoticeUncheckedUpdateWithoutReadByUsersInput>
  }

  export type NoticeUpdateWithoutReadByUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    creator?: UserUpdateOneRequiredWithoutCreatedNoticesNestedInput
  }

  export type NoticeUncheckedUpdateWithoutReadByUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutReadNoticesInput = {
    update: XOR<UserUpdateWithoutReadNoticesInput, UserUncheckedUpdateWithoutReadNoticesInput>
    create: XOR<UserCreateWithoutReadNoticesInput, UserUncheckedCreateWithoutReadNoticesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReadNoticesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReadNoticesInput, UserUncheckedUpdateWithoutReadNoticesInput>
  }

  export type UserUpdateWithoutReadNoticesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutUserNestedInput
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUpdateManyWithoutReviewerNestedInput
    createdNotices?: NoticeUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutReadNoticesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUncheckedUpdateOneWithoutUserNestedInput
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    reviewedLeaves?: LeaveUncheckedUpdateManyWithoutReviewerNestedInput
    createdNotices?: NoticeUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ScheduleCreateWithoutShiftPatternInput = {
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    swapRequested?: boolean
    employee: EmployeeCreateNestedOneWithoutSchedulesInput
    generationLog?: GenerationLogCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutShiftPatternInput = {
    id?: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    generationLogId?: number | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    swapRequested?: boolean
  }

  export type ScheduleCreateOrConnectWithoutShiftPatternInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutShiftPatternInput, ScheduleUncheckedCreateWithoutShiftPatternInput>
  }

  export type ScheduleCreateManyShiftPatternInputEnvelope = {
    data: ScheduleCreateManyShiftPatternInput | ScheduleCreateManyShiftPatternInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutShiftPatternsInput = {
    companyName: string
    industry: string
    companySize: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    defaultEndTime?: string | null
    defaultStartTime?: string | null
    minStaffRequired?: number | null
    showLeaveInSchedule?: boolean
    updatedAt?: Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: string
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: number
    minimumStaffCoverage?: number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: number
    timezone?: string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutCompanyInput
    operatingHoursTemplates?: OperatingHoursTemplateCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutShiftPatternsInput = {
    id?: number
    userId: number
    companyName: string
    industry: string
    companySize: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    defaultEndTime?: string | null
    defaultStartTime?: string | null
    minStaffRequired?: number | null
    showLeaveInSchedule?: boolean
    updatedAt?: Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: string
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: number
    minimumStaffCoverage?: number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: number
    timezone?: string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    operatingHoursTemplates?: OperatingHoursTemplateUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutShiftPatternsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutShiftPatternsInput, CompanyUncheckedCreateWithoutShiftPatternsInput>
  }

  export type ScheduleTemplateCreateWithoutShift_patternsInput = {
    name: string
    description?: string | null
    industryType: string
    templateType: string
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern: JsonNullValueInput | InputJsonValue
    rotationPeriod?: number | null
    minStaffPerShift?: number
    maxStaffPerShift?: number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    generationLogs?: GenerationLogCreateNestedManyWithoutTemplateInput
    drafts?: ScheduleDraftCreateNestedManyWithoutScheduleTemplateInput
  }

  export type ScheduleTemplateUncheckedCreateWithoutShift_patternsInput = {
    id?: number
    name: string
    description?: string | null
    industryType: string
    templateType: string
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern: JsonNullValueInput | InputJsonValue
    rotationPeriod?: number | null
    minStaffPerShift?: number
    maxStaffPerShift?: number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    generationLogs?: GenerationLogUncheckedCreateNestedManyWithoutTemplateInput
    drafts?: ScheduleDraftUncheckedCreateNestedManyWithoutScheduleTemplateInput
  }

  export type ScheduleTemplateCreateOrConnectWithoutShift_patternsInput = {
    where: ScheduleTemplateWhereUniqueInput
    create: XOR<ScheduleTemplateCreateWithoutShift_patternsInput, ScheduleTemplateUncheckedCreateWithoutShift_patternsInput>
  }

  export type ScheduleDraftItemCreateWithoutShiftPatternInput = {
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    draft: ScheduleDraftCreateNestedOneWithoutItemsInput
    employee: EmployeeCreateNestedOneWithoutDraftSchedulesInput
  }

  export type ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput = {
    id?: number
    draftId: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleDraftItemCreateOrConnectWithoutShiftPatternInput = {
    where: ScheduleDraftItemWhereUniqueInput
    create: XOR<ScheduleDraftItemCreateWithoutShiftPatternInput, ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput>
  }

  export type ScheduleDraftItemCreateManyShiftPatternInputEnvelope = {
    data: ScheduleDraftItemCreateManyShiftPatternInput | ScheduleDraftItemCreateManyShiftPatternInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleUpsertWithWhereUniqueWithoutShiftPatternInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutShiftPatternInput, ScheduleUncheckedUpdateWithoutShiftPatternInput>
    create: XOR<ScheduleCreateWithoutShiftPatternInput, ScheduleUncheckedCreateWithoutShiftPatternInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutShiftPatternInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutShiftPatternInput, ScheduleUncheckedUpdateWithoutShiftPatternInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutShiftPatternInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutShiftPatternInput>
  }

  export type CompanyUpsertWithoutShiftPatternsInput = {
    update: XOR<CompanyUpdateWithoutShiftPatternsInput, CompanyUncheckedUpdateWithoutShiftPatternsInput>
    create: XOR<CompanyCreateWithoutShiftPatternsInput, CompanyUncheckedCreateWithoutShiftPatternsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutShiftPatternsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutShiftPatternsInput, CompanyUncheckedUpdateWithoutShiftPatternsInput>
  }

  export type CompanyUpdateWithoutShiftPatternsInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutCompanyNestedInput
    operatingHoursTemplates?: OperatingHoursTemplateUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutShiftPatternsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    operatingHoursTemplates?: OperatingHoursTemplateUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type ScheduleTemplateUpsertWithWhereUniqueWithoutShift_patternsInput = {
    where: ScheduleTemplateWhereUniqueInput
    update: XOR<ScheduleTemplateUpdateWithoutShift_patternsInput, ScheduleTemplateUncheckedUpdateWithoutShift_patternsInput>
    create: XOR<ScheduleTemplateCreateWithoutShift_patternsInput, ScheduleTemplateUncheckedCreateWithoutShift_patternsInput>
  }

  export type ScheduleTemplateUpdateWithWhereUniqueWithoutShift_patternsInput = {
    where: ScheduleTemplateWhereUniqueInput
    data: XOR<ScheduleTemplateUpdateWithoutShift_patternsInput, ScheduleTemplateUncheckedUpdateWithoutShift_patternsInput>
  }

  export type ScheduleTemplateUpdateManyWithWhereWithoutShift_patternsInput = {
    where: ScheduleTemplateScalarWhereInput
    data: XOR<ScheduleTemplateUpdateManyMutationInput, ScheduleTemplateUncheckedUpdateManyWithoutShift_patternsInput>
  }

  export type ScheduleTemplateScalarWhereInput = {
    AND?: ScheduleTemplateScalarWhereInput | ScheduleTemplateScalarWhereInput[]
    OR?: ScheduleTemplateScalarWhereInput[]
    NOT?: ScheduleTemplateScalarWhereInput | ScheduleTemplateScalarWhereInput[]
    id?: IntFilter<"ScheduleTemplate"> | number
    name?: StringFilter<"ScheduleTemplate"> | string
    description?: StringNullableFilter<"ScheduleTemplate"> | string | null
    industryType?: StringFilter<"ScheduleTemplate"> | string
    templateType?: StringFilter<"ScheduleTemplate"> | string
    isActive?: BoolFilter<"ScheduleTemplate"> | boolean
    metadata?: JsonNullableFilter<"ScheduleTemplate">
    workDaysPattern?: JsonFilter<"ScheduleTemplate">
    rotationPeriod?: IntNullableFilter<"ScheduleTemplate"> | number | null
    minStaffPerShift?: IntFilter<"ScheduleTemplate"> | number
    maxStaffPerShift?: IntNullableFilter<"ScheduleTemplate"> | number | null
    coverageRequirements?: JsonNullableFilter<"ScheduleTemplate">
    createdBy?: IntFilter<"ScheduleTemplate"> | number
    createdAt?: DateTimeFilter<"ScheduleTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleTemplate"> | Date | string
  }

  export type ScheduleDraftItemUpsertWithWhereUniqueWithoutShiftPatternInput = {
    where: ScheduleDraftItemWhereUniqueInput
    update: XOR<ScheduleDraftItemUpdateWithoutShiftPatternInput, ScheduleDraftItemUncheckedUpdateWithoutShiftPatternInput>
    create: XOR<ScheduleDraftItemCreateWithoutShiftPatternInput, ScheduleDraftItemUncheckedCreateWithoutShiftPatternInput>
  }

  export type ScheduleDraftItemUpdateWithWhereUniqueWithoutShiftPatternInput = {
    where: ScheduleDraftItemWhereUniqueInput
    data: XOR<ScheduleDraftItemUpdateWithoutShiftPatternInput, ScheduleDraftItemUncheckedUpdateWithoutShiftPatternInput>
  }

  export type ScheduleDraftItemUpdateManyWithWhereWithoutShiftPatternInput = {
    where: ScheduleDraftItemScalarWhereInput
    data: XOR<ScheduleDraftItemUpdateManyMutationInput, ScheduleDraftItemUncheckedUpdateManyWithoutShiftPatternInput>
  }

  export type GenerationLogCreateWithoutTemplateInput = {
    generatedBy: number
    generationType: string
    periodStart: Date | string
    periodEnd: Date | string
    totalSchedulesCreated?: number
    totalEmployeesAffected?: number
    parameters: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: number | null
    employeeSatisfaction?: number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: number | null
    algorithmVersion?: string
    status?: string
    notes?: string | null
    createdAt?: Date | string
    schedules?: ScheduleCreateNestedManyWithoutGenerationLogInput
  }

  export type GenerationLogUncheckedCreateWithoutTemplateInput = {
    id?: number
    generatedBy: number
    generationType: string
    periodStart: Date | string
    periodEnd: Date | string
    totalSchedulesCreated?: number
    totalEmployeesAffected?: number
    parameters: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: number | null
    employeeSatisfaction?: number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: number | null
    algorithmVersion?: string
    status?: string
    notes?: string | null
    createdAt?: Date | string
    schedules?: ScheduleUncheckedCreateNestedManyWithoutGenerationLogInput
  }

  export type GenerationLogCreateOrConnectWithoutTemplateInput = {
    where: GenerationLogWhereUniqueInput
    create: XOR<GenerationLogCreateWithoutTemplateInput, GenerationLogUncheckedCreateWithoutTemplateInput>
  }

  export type GenerationLogCreateManyTemplateInputEnvelope = {
    data: GenerationLogCreateManyTemplateInput | GenerationLogCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type ShiftPatternCreateWithoutSchedule_templatesInput = {
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleCreateNestedManyWithoutShiftPatternInput
    company?: CompanyCreateNestedOneWithoutShiftPatternsInput
    draftItems?: ScheduleDraftItemCreateNestedManyWithoutShiftPatternInput
  }

  export type ShiftPatternUncheckedCreateWithoutSchedule_templatesInput = {
    id?: number
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUncheckedCreateNestedManyWithoutShiftPatternInput
    draftItems?: ScheduleDraftItemUncheckedCreateNestedManyWithoutShiftPatternInput
  }

  export type ShiftPatternCreateOrConnectWithoutSchedule_templatesInput = {
    where: ShiftPatternWhereUniqueInput
    create: XOR<ShiftPatternCreateWithoutSchedule_templatesInput, ShiftPatternUncheckedCreateWithoutSchedule_templatesInput>
  }

  export type ScheduleDraftCreateWithoutScheduleTemplateInput = {
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    items?: ScheduleDraftItemCreateNestedManyWithoutDraftInput
    parentDraft?: ScheduleDraftCreateNestedOneWithoutVersionDraftsInput
    versionDrafts?: ScheduleDraftCreateNestedManyWithoutParentDraftInput
  }

  export type ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput = {
    id?: number
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    basedOnDraftId?: number | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    items?: ScheduleDraftItemUncheckedCreateNestedManyWithoutDraftInput
    versionDrafts?: ScheduleDraftUncheckedCreateNestedManyWithoutParentDraftInput
  }

  export type ScheduleDraftCreateOrConnectWithoutScheduleTemplateInput = {
    where: ScheduleDraftWhereUniqueInput
    create: XOR<ScheduleDraftCreateWithoutScheduleTemplateInput, ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput>
  }

  export type ScheduleDraftCreateManyScheduleTemplateInputEnvelope = {
    data: ScheduleDraftCreateManyScheduleTemplateInput | ScheduleDraftCreateManyScheduleTemplateInput[]
    skipDuplicates?: boolean
  }

  export type GenerationLogUpsertWithWhereUniqueWithoutTemplateInput = {
    where: GenerationLogWhereUniqueInput
    update: XOR<GenerationLogUpdateWithoutTemplateInput, GenerationLogUncheckedUpdateWithoutTemplateInput>
    create: XOR<GenerationLogCreateWithoutTemplateInput, GenerationLogUncheckedCreateWithoutTemplateInput>
  }

  export type GenerationLogUpdateWithWhereUniqueWithoutTemplateInput = {
    where: GenerationLogWhereUniqueInput
    data: XOR<GenerationLogUpdateWithoutTemplateInput, GenerationLogUncheckedUpdateWithoutTemplateInput>
  }

  export type GenerationLogUpdateManyWithWhereWithoutTemplateInput = {
    where: GenerationLogScalarWhereInput
    data: XOR<GenerationLogUpdateManyMutationInput, GenerationLogUncheckedUpdateManyWithoutTemplateInput>
  }

  export type GenerationLogScalarWhereInput = {
    AND?: GenerationLogScalarWhereInput | GenerationLogScalarWhereInput[]
    OR?: GenerationLogScalarWhereInput[]
    NOT?: GenerationLogScalarWhereInput | GenerationLogScalarWhereInput[]
    id?: IntFilter<"GenerationLog"> | number
    templateId?: IntNullableFilter<"GenerationLog"> | number | null
    generatedBy?: IntFilter<"GenerationLog"> | number
    generationType?: StringFilter<"GenerationLog"> | string
    periodStart?: DateTimeFilter<"GenerationLog"> | Date | string
    periodEnd?: DateTimeFilter<"GenerationLog"> | Date | string
    totalSchedulesCreated?: IntFilter<"GenerationLog"> | number
    totalEmployeesAffected?: IntFilter<"GenerationLog"> | number
    parameters?: JsonFilter<"GenerationLog">
    constraints?: JsonNullableFilter<"GenerationLog">
    coverageAchieved?: FloatNullableFilter<"GenerationLog"> | number | null
    employeeSatisfaction?: FloatNullableFilter<"GenerationLog"> | number | null
    constraintViolations?: JsonNullableFilter<"GenerationLog">
    warnings?: JsonNullableFilter<"GenerationLog">
    errors?: JsonNullableFilter<"GenerationLog">
    executionTime?: IntNullableFilter<"GenerationLog"> | number | null
    algorithmVersion?: StringFilter<"GenerationLog"> | string
    status?: StringFilter<"GenerationLog"> | string
    notes?: StringNullableFilter<"GenerationLog"> | string | null
    createdAt?: DateTimeFilter<"GenerationLog"> | Date | string
  }

  export type ShiftPatternUpsertWithWhereUniqueWithoutSchedule_templatesInput = {
    where: ShiftPatternWhereUniqueInput
    update: XOR<ShiftPatternUpdateWithoutSchedule_templatesInput, ShiftPatternUncheckedUpdateWithoutSchedule_templatesInput>
    create: XOR<ShiftPatternCreateWithoutSchedule_templatesInput, ShiftPatternUncheckedCreateWithoutSchedule_templatesInput>
  }

  export type ShiftPatternUpdateWithWhereUniqueWithoutSchedule_templatesInput = {
    where: ShiftPatternWhereUniqueInput
    data: XOR<ShiftPatternUpdateWithoutSchedule_templatesInput, ShiftPatternUncheckedUpdateWithoutSchedule_templatesInput>
  }

  export type ShiftPatternUpdateManyWithWhereWithoutSchedule_templatesInput = {
    where: ShiftPatternScalarWhereInput
    data: XOR<ShiftPatternUpdateManyMutationInput, ShiftPatternUncheckedUpdateManyWithoutSchedule_templatesInput>
  }

  export type ScheduleDraftUpsertWithWhereUniqueWithoutScheduleTemplateInput = {
    where: ScheduleDraftWhereUniqueInput
    update: XOR<ScheduleDraftUpdateWithoutScheduleTemplateInput, ScheduleDraftUncheckedUpdateWithoutScheduleTemplateInput>
    create: XOR<ScheduleDraftCreateWithoutScheduleTemplateInput, ScheduleDraftUncheckedCreateWithoutScheduleTemplateInput>
  }

  export type ScheduleDraftUpdateWithWhereUniqueWithoutScheduleTemplateInput = {
    where: ScheduleDraftWhereUniqueInput
    data: XOR<ScheduleDraftUpdateWithoutScheduleTemplateInput, ScheduleDraftUncheckedUpdateWithoutScheduleTemplateInput>
  }

  export type ScheduleDraftUpdateManyWithWhereWithoutScheduleTemplateInput = {
    where: ScheduleDraftScalarWhereInput
    data: XOR<ScheduleDraftUpdateManyMutationInput, ScheduleDraftUncheckedUpdateManyWithoutScheduleTemplateInput>
  }

  export type ScheduleDraftScalarWhereInput = {
    AND?: ScheduleDraftScalarWhereInput | ScheduleDraftScalarWhereInput[]
    OR?: ScheduleDraftScalarWhereInput[]
    NOT?: ScheduleDraftScalarWhereInput | ScheduleDraftScalarWhereInput[]
    id?: IntFilter<"ScheduleDraft"> | number
    companyId?: IntFilter<"ScheduleDraft"> | number
    name?: StringFilter<"ScheduleDraft"> | string
    description?: StringNullableFilter<"ScheduleDraft"> | string | null
    version?: StringFilter<"ScheduleDraft"> | string
    status?: StringFilter<"ScheduleDraft"> | string
    periodStart?: DateTimeFilter<"ScheduleDraft"> | Date | string
    periodEnd?: DateTimeFilter<"ScheduleDraft"> | Date | string
    basedOnTemplateId?: IntNullableFilter<"ScheduleDraft"> | number | null
    basedOnDraftId?: IntNullableFilter<"ScheduleDraft"> | number | null
    createdBy?: IntFilter<"ScheduleDraft"> | number
    createdAt?: DateTimeFilter<"ScheduleDraft"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleDraft"> | Date | string
    approvedBy?: IntNullableFilter<"ScheduleDraft"> | number | null
    approvedAt?: DateTimeNullableFilter<"ScheduleDraft"> | Date | string | null
    activatedAt?: DateTimeNullableFilter<"ScheduleDraft"> | Date | string | null
    archivedAt?: DateTimeNullableFilter<"ScheduleDraft"> | Date | string | null
    metadata?: JsonNullableFilter<"ScheduleDraft">
    notes?: StringNullableFilter<"ScheduleDraft"> | string | null
  }

  export type EmployeeCreateWithoutConstraintsInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutConstraintsInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutConstraintsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutConstraintsInput, EmployeeUncheckedCreateWithoutConstraintsInput>
  }

  export type EmployeeUpsertWithoutConstraintsInput = {
    update: XOR<EmployeeUpdateWithoutConstraintsInput, EmployeeUncheckedUpdateWithoutConstraintsInput>
    create: XOR<EmployeeCreateWithoutConstraintsInput, EmployeeUncheckedCreateWithoutConstraintsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutConstraintsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutConstraintsInput, EmployeeUncheckedUpdateWithoutConstraintsInput>
  }

  export type EmployeeUpdateWithoutConstraintsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutConstraintsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type ScheduleTemplateCreateWithoutGenerationLogsInput = {
    name: string
    description?: string | null
    industryType: string
    templateType: string
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern: JsonNullValueInput | InputJsonValue
    rotationPeriod?: number | null
    minStaffPerShift?: number
    maxStaffPerShift?: number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    shift_patterns?: ShiftPatternCreateNestedManyWithoutSchedule_templatesInput
    drafts?: ScheduleDraftCreateNestedManyWithoutScheduleTemplateInput
  }

  export type ScheduleTemplateUncheckedCreateWithoutGenerationLogsInput = {
    id?: number
    name: string
    description?: string | null
    industryType: string
    templateType: string
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern: JsonNullValueInput | InputJsonValue
    rotationPeriod?: number | null
    minStaffPerShift?: number
    maxStaffPerShift?: number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    shift_patterns?: ShiftPatternUncheckedCreateNestedManyWithoutSchedule_templatesInput
    drafts?: ScheduleDraftUncheckedCreateNestedManyWithoutScheduleTemplateInput
  }

  export type ScheduleTemplateCreateOrConnectWithoutGenerationLogsInput = {
    where: ScheduleTemplateWhereUniqueInput
    create: XOR<ScheduleTemplateCreateWithoutGenerationLogsInput, ScheduleTemplateUncheckedCreateWithoutGenerationLogsInput>
  }

  export type ScheduleCreateWithoutGenerationLogInput = {
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    swapRequested?: boolean
    employee: EmployeeCreateNestedOneWithoutSchedulesInput
    shiftPattern?: ShiftPatternCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutGenerationLogInput = {
    id?: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    shiftPatternId?: number | null
    swapRequested?: boolean
  }

  export type ScheduleCreateOrConnectWithoutGenerationLogInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutGenerationLogInput, ScheduleUncheckedCreateWithoutGenerationLogInput>
  }

  export type ScheduleCreateManyGenerationLogInputEnvelope = {
    data: ScheduleCreateManyGenerationLogInput | ScheduleCreateManyGenerationLogInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleTemplateUpsertWithoutGenerationLogsInput = {
    update: XOR<ScheduleTemplateUpdateWithoutGenerationLogsInput, ScheduleTemplateUncheckedUpdateWithoutGenerationLogsInput>
    create: XOR<ScheduleTemplateCreateWithoutGenerationLogsInput, ScheduleTemplateUncheckedCreateWithoutGenerationLogsInput>
    where?: ScheduleTemplateWhereInput
  }

  export type ScheduleTemplateUpdateToOneWithWhereWithoutGenerationLogsInput = {
    where?: ScheduleTemplateWhereInput
    data: XOR<ScheduleTemplateUpdateWithoutGenerationLogsInput, ScheduleTemplateUncheckedUpdateWithoutGenerationLogsInput>
  }

  export type ScheduleTemplateUpdateWithoutGenerationLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift_patterns?: ShiftPatternUpdateManyWithoutSchedule_templatesNestedInput
    drafts?: ScheduleDraftUpdateManyWithoutScheduleTemplateNestedInput
  }

  export type ScheduleTemplateUncheckedUpdateWithoutGenerationLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shift_patterns?: ShiftPatternUncheckedUpdateManyWithoutSchedule_templatesNestedInput
    drafts?: ScheduleDraftUncheckedUpdateManyWithoutScheduleTemplateNestedInput
  }

  export type ScheduleUpsertWithWhereUniqueWithoutGenerationLogInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutGenerationLogInput, ScheduleUncheckedUpdateWithoutGenerationLogInput>
    create: XOR<ScheduleCreateWithoutGenerationLogInput, ScheduleUncheckedCreateWithoutGenerationLogInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutGenerationLogInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutGenerationLogInput, ScheduleUncheckedUpdateWithoutGenerationLogInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutGenerationLogInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutGenerationLogInput>
  }

  export type EmployeeCreateWithoutCertificationsInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutCertificationsInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    draftSchedules?: ScheduleDraftItemUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutCertificationsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCertificationsInput, EmployeeUncheckedCreateWithoutCertificationsInput>
  }

  export type EmployeeUpsertWithoutCertificationsInput = {
    update: XOR<EmployeeUpdateWithoutCertificationsInput, EmployeeUncheckedUpdateWithoutCertificationsInput>
    create: XOR<EmployeeCreateWithoutCertificationsInput, EmployeeUncheckedCreateWithoutCertificationsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCertificationsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCertificationsInput, EmployeeUncheckedUpdateWithoutCertificationsInput>
  }

  export type EmployeeUpdateWithoutCertificationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCertificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    draftSchedules?: ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type CompanyCreateWithoutOperatingHoursTemplatesInput = {
    companyName: string
    industry: string
    companySize: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    defaultEndTime?: string | null
    defaultStartTime?: string | null
    minStaffRequired?: number | null
    showLeaveInSchedule?: boolean
    updatedAt?: Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: string
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: number
    minimumStaffCoverage?: number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: number
    timezone?: string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutCompanyInput
    shiftPatterns?: ShiftPatternCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutOperatingHoursTemplatesInput = {
    id?: number
    userId: number
    companyName: string
    industry: string
    companySize: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    defaultEndTime?: string | null
    defaultStartTime?: string | null
    minStaffRequired?: number | null
    showLeaveInSchedule?: boolean
    updatedAt?: Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: string
    allowEmployeeSelfScheduling?: boolean
    autoSchedulingEnabled?: boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: number
    minimumStaffCoverage?: number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: number
    timezone?: string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    shiftPatterns?: ShiftPatternUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutOperatingHoursTemplatesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutOperatingHoursTemplatesInput, CompanyUncheckedCreateWithoutOperatingHoursTemplatesInput>
  }

  export type DailyOperatingHoursCreateWithoutTemplateInput = {
    dayOfWeek: number
    isOpen?: boolean
    openTime?: string | null
    closeTime?: string | null
    breakStart?: string | null
    breakEnd?: string | null
    minStaff?: number
    maxStaff?: number | null
    notes?: string | null
    timeSlots?: HourlyStaffingRuleCreateNestedManyWithoutDailyHoursInput
  }

  export type DailyOperatingHoursUncheckedCreateWithoutTemplateInput = {
    id?: number
    dayOfWeek: number
    isOpen?: boolean
    openTime?: string | null
    closeTime?: string | null
    breakStart?: string | null
    breakEnd?: string | null
    minStaff?: number
    maxStaff?: number | null
    notes?: string | null
    timeSlots?: HourlyStaffingRuleUncheckedCreateNestedManyWithoutDailyHoursInput
  }

  export type DailyOperatingHoursCreateOrConnectWithoutTemplateInput = {
    where: DailyOperatingHoursWhereUniqueInput
    create: XOR<DailyOperatingHoursCreateWithoutTemplateInput, DailyOperatingHoursUncheckedCreateWithoutTemplateInput>
  }

  export type DailyOperatingHoursCreateManyTemplateInputEnvelope = {
    data: DailyOperatingHoursCreateManyTemplateInput | DailyOperatingHoursCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type StaffingRuleCreateWithoutTemplateInput = {
    ruleName: string
    ruleType: string
    conditions: JsonNullValueInput | InputJsonValue
    staffingRequirements: JsonNullValueInput | InputJsonValue
    priority?: number
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffingRuleUncheckedCreateWithoutTemplateInput = {
    id?: number
    ruleName: string
    ruleType: string
    conditions: JsonNullValueInput | InputJsonValue
    staffingRequirements: JsonNullValueInput | InputJsonValue
    priority?: number
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffingRuleCreateOrConnectWithoutTemplateInput = {
    where: StaffingRuleWhereUniqueInput
    create: XOR<StaffingRuleCreateWithoutTemplateInput, StaffingRuleUncheckedCreateWithoutTemplateInput>
  }

  export type StaffingRuleCreateManyTemplateInputEnvelope = {
    data: StaffingRuleCreateManyTemplateInput | StaffingRuleCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleOverrideCreateWithoutTemplateInput = {
    overrideDate: Date | string
    overrideType: string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    isActive?: boolean
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleOverrideUncheckedCreateWithoutTemplateInput = {
    id?: number
    overrideDate: Date | string
    overrideType: string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    isActive?: boolean
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleOverrideCreateOrConnectWithoutTemplateInput = {
    where: ScheduleOverrideWhereUniqueInput
    create: XOR<ScheduleOverrideCreateWithoutTemplateInput, ScheduleOverrideUncheckedCreateWithoutTemplateInput>
  }

  export type ScheduleOverrideCreateManyTemplateInputEnvelope = {
    data: ScheduleOverrideCreateManyTemplateInput | ScheduleOverrideCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutOperatingHoursTemplatesInput = {
    update: XOR<CompanyUpdateWithoutOperatingHoursTemplatesInput, CompanyUncheckedUpdateWithoutOperatingHoursTemplatesInput>
    create: XOR<CompanyCreateWithoutOperatingHoursTemplatesInput, CompanyUncheckedCreateWithoutOperatingHoursTemplatesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutOperatingHoursTemplatesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutOperatingHoursTemplatesInput, CompanyUncheckedUpdateWithoutOperatingHoursTemplatesInput>
  }

  export type CompanyUpdateWithoutOperatingHoursTemplatesInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutCompanyNestedInput
    shiftPatterns?: ShiftPatternUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutOperatingHoursTemplatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: StringFieldUpdateOperationsInput | string
    companySize?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    defaultEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    defaultStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    minStaffRequired?: NullableIntFieldUpdateOperationsInput | number | null
    showLeaveInSchedule?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workDays?: NullableJsonNullValueInput | InputJsonValue
    workType?: StringFieldUpdateOperationsInput | string
    allowEmployeeSelfScheduling?: BoolFieldUpdateOperationsInput | boolean
    autoSchedulingEnabled?: BoolFieldUpdateOperationsInput | boolean
    complianceRequirements?: NullableJsonNullValueInput | InputJsonValue
    holidaySchedule?: NullableJsonNullValueInput | InputJsonValue
    maxAdvanceScheduleDays?: IntFieldUpdateOperationsInput | number
    minimumStaffCoverage?: FloatFieldUpdateOperationsInput | number
    operatingHours?: NullableJsonNullValueInput | InputJsonValue
    overtimePolicy?: NullableJsonNullValueInput | InputJsonValue
    peakHours?: NullableJsonNullValueInput | InputJsonValue
    scheduleNotificationDays?: IntFieldUpdateOperationsInput | number
    timezone?: StringFieldUpdateOperationsInput | string
    unionRules?: NullableJsonNullValueInput | InputJsonValue
    shiftPatterns?: ShiftPatternUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type DailyOperatingHoursUpsertWithWhereUniqueWithoutTemplateInput = {
    where: DailyOperatingHoursWhereUniqueInput
    update: XOR<DailyOperatingHoursUpdateWithoutTemplateInput, DailyOperatingHoursUncheckedUpdateWithoutTemplateInput>
    create: XOR<DailyOperatingHoursCreateWithoutTemplateInput, DailyOperatingHoursUncheckedCreateWithoutTemplateInput>
  }

  export type DailyOperatingHoursUpdateWithWhereUniqueWithoutTemplateInput = {
    where: DailyOperatingHoursWhereUniqueInput
    data: XOR<DailyOperatingHoursUpdateWithoutTemplateInput, DailyOperatingHoursUncheckedUpdateWithoutTemplateInput>
  }

  export type DailyOperatingHoursUpdateManyWithWhereWithoutTemplateInput = {
    where: DailyOperatingHoursScalarWhereInput
    data: XOR<DailyOperatingHoursUpdateManyMutationInput, DailyOperatingHoursUncheckedUpdateManyWithoutTemplateInput>
  }

  export type DailyOperatingHoursScalarWhereInput = {
    AND?: DailyOperatingHoursScalarWhereInput | DailyOperatingHoursScalarWhereInput[]
    OR?: DailyOperatingHoursScalarWhereInput[]
    NOT?: DailyOperatingHoursScalarWhereInput | DailyOperatingHoursScalarWhereInput[]
    id?: IntFilter<"DailyOperatingHours"> | number
    templateId?: IntFilter<"DailyOperatingHours"> | number
    dayOfWeek?: IntFilter<"DailyOperatingHours"> | number
    isOpen?: BoolFilter<"DailyOperatingHours"> | boolean
    openTime?: StringNullableFilter<"DailyOperatingHours"> | string | null
    closeTime?: StringNullableFilter<"DailyOperatingHours"> | string | null
    breakStart?: StringNullableFilter<"DailyOperatingHours"> | string | null
    breakEnd?: StringNullableFilter<"DailyOperatingHours"> | string | null
    minStaff?: IntFilter<"DailyOperatingHours"> | number
    maxStaff?: IntNullableFilter<"DailyOperatingHours"> | number | null
    notes?: StringNullableFilter<"DailyOperatingHours"> | string | null
  }

  export type StaffingRuleUpsertWithWhereUniqueWithoutTemplateInput = {
    where: StaffingRuleWhereUniqueInput
    update: XOR<StaffingRuleUpdateWithoutTemplateInput, StaffingRuleUncheckedUpdateWithoutTemplateInput>
    create: XOR<StaffingRuleCreateWithoutTemplateInput, StaffingRuleUncheckedCreateWithoutTemplateInput>
  }

  export type StaffingRuleUpdateWithWhereUniqueWithoutTemplateInput = {
    where: StaffingRuleWhereUniqueInput
    data: XOR<StaffingRuleUpdateWithoutTemplateInput, StaffingRuleUncheckedUpdateWithoutTemplateInput>
  }

  export type StaffingRuleUpdateManyWithWhereWithoutTemplateInput = {
    where: StaffingRuleScalarWhereInput
    data: XOR<StaffingRuleUpdateManyMutationInput, StaffingRuleUncheckedUpdateManyWithoutTemplateInput>
  }

  export type StaffingRuleScalarWhereInput = {
    AND?: StaffingRuleScalarWhereInput | StaffingRuleScalarWhereInput[]
    OR?: StaffingRuleScalarWhereInput[]
    NOT?: StaffingRuleScalarWhereInput | StaffingRuleScalarWhereInput[]
    id?: IntFilter<"StaffingRule"> | number
    templateId?: IntFilter<"StaffingRule"> | number
    ruleName?: StringFilter<"StaffingRule"> | string
    ruleType?: StringFilter<"StaffingRule"> | string
    conditions?: JsonFilter<"StaffingRule">
    staffingRequirements?: JsonFilter<"StaffingRule">
    priority?: IntFilter<"StaffingRule"> | number
    isActive?: BoolFilter<"StaffingRule"> | boolean
    effectiveFrom?: DateTimeNullableFilter<"StaffingRule"> | Date | string | null
    effectiveTo?: DateTimeNullableFilter<"StaffingRule"> | Date | string | null
    createdAt?: DateTimeFilter<"StaffingRule"> | Date | string
    updatedAt?: DateTimeFilter<"StaffingRule"> | Date | string
  }

  export type ScheduleOverrideUpsertWithWhereUniqueWithoutTemplateInput = {
    where: ScheduleOverrideWhereUniqueInput
    update: XOR<ScheduleOverrideUpdateWithoutTemplateInput, ScheduleOverrideUncheckedUpdateWithoutTemplateInput>
    create: XOR<ScheduleOverrideCreateWithoutTemplateInput, ScheduleOverrideUncheckedCreateWithoutTemplateInput>
  }

  export type ScheduleOverrideUpdateWithWhereUniqueWithoutTemplateInput = {
    where: ScheduleOverrideWhereUniqueInput
    data: XOR<ScheduleOverrideUpdateWithoutTemplateInput, ScheduleOverrideUncheckedUpdateWithoutTemplateInput>
  }

  export type ScheduleOverrideUpdateManyWithWhereWithoutTemplateInput = {
    where: ScheduleOverrideScalarWhereInput
    data: XOR<ScheduleOverrideUpdateManyMutationInput, ScheduleOverrideUncheckedUpdateManyWithoutTemplateInput>
  }

  export type ScheduleOverrideScalarWhereInput = {
    AND?: ScheduleOverrideScalarWhereInput | ScheduleOverrideScalarWhereInput[]
    OR?: ScheduleOverrideScalarWhereInput[]
    NOT?: ScheduleOverrideScalarWhereInput | ScheduleOverrideScalarWhereInput[]
    id?: IntFilter<"ScheduleOverride"> | number
    templateId?: IntFilter<"ScheduleOverride"> | number
    overrideDate?: DateTimeFilter<"ScheduleOverride"> | Date | string
    overrideType?: StringFilter<"ScheduleOverride"> | string
    customHours?: JsonNullableFilter<"ScheduleOverride">
    staffingOverride?: JsonNullableFilter<"ScheduleOverride">
    reason?: StringNullableFilter<"ScheduleOverride"> | string | null
    isActive?: BoolFilter<"ScheduleOverride"> | boolean
    createdBy?: IntFilter<"ScheduleOverride"> | number
    createdAt?: DateTimeFilter<"ScheduleOverride"> | Date | string
    updatedAt?: DateTimeFilter<"ScheduleOverride"> | Date | string
  }

  export type OperatingHoursTemplateCreateWithoutDailyHoursInput = {
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutOperatingHoursTemplatesInput
    staffingRules?: StaffingRuleCreateNestedManyWithoutTemplateInput
    scheduleOverrides?: ScheduleOverrideCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateUncheckedCreateWithoutDailyHoursInput = {
    id?: number
    companyId: number
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    staffingRules?: StaffingRuleUncheckedCreateNestedManyWithoutTemplateInput
    scheduleOverrides?: ScheduleOverrideUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateCreateOrConnectWithoutDailyHoursInput = {
    where: OperatingHoursTemplateWhereUniqueInput
    create: XOR<OperatingHoursTemplateCreateWithoutDailyHoursInput, OperatingHoursTemplateUncheckedCreateWithoutDailyHoursInput>
  }

  export type HourlyStaffingRuleCreateWithoutDailyHoursInput = {
    hourSlot: number
    requiredStaff?: number
    preferredStaff?: number | null
    maxStaff?: number | null
    priority?: string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput = {
    id?: number
    hourSlot: number
    requiredStaff?: number
    preferredStaff?: number | null
    maxStaff?: number | null
    priority?: string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type HourlyStaffingRuleCreateOrConnectWithoutDailyHoursInput = {
    where: HourlyStaffingRuleWhereUniqueInput
    create: XOR<HourlyStaffingRuleCreateWithoutDailyHoursInput, HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput>
  }

  export type HourlyStaffingRuleCreateManyDailyHoursInputEnvelope = {
    data: HourlyStaffingRuleCreateManyDailyHoursInput | HourlyStaffingRuleCreateManyDailyHoursInput[]
    skipDuplicates?: boolean
  }

  export type OperatingHoursTemplateUpsertWithoutDailyHoursInput = {
    update: XOR<OperatingHoursTemplateUpdateWithoutDailyHoursInput, OperatingHoursTemplateUncheckedUpdateWithoutDailyHoursInput>
    create: XOR<OperatingHoursTemplateCreateWithoutDailyHoursInput, OperatingHoursTemplateUncheckedCreateWithoutDailyHoursInput>
    where?: OperatingHoursTemplateWhereInput
  }

  export type OperatingHoursTemplateUpdateToOneWithWhereWithoutDailyHoursInput = {
    where?: OperatingHoursTemplateWhereInput
    data: XOR<OperatingHoursTemplateUpdateWithoutDailyHoursInput, OperatingHoursTemplateUncheckedUpdateWithoutDailyHoursInput>
  }

  export type OperatingHoursTemplateUpdateWithoutDailyHoursInput = {
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutOperatingHoursTemplatesNestedInput
    staffingRules?: StaffingRuleUpdateManyWithoutTemplateNestedInput
    scheduleOverrides?: ScheduleOverrideUpdateManyWithoutTemplateNestedInput
  }

  export type OperatingHoursTemplateUncheckedUpdateWithoutDailyHoursInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staffingRules?: StaffingRuleUncheckedUpdateManyWithoutTemplateNestedInput
    scheduleOverrides?: ScheduleOverrideUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type HourlyStaffingRuleUpsertWithWhereUniqueWithoutDailyHoursInput = {
    where: HourlyStaffingRuleWhereUniqueInput
    update: XOR<HourlyStaffingRuleUpdateWithoutDailyHoursInput, HourlyStaffingRuleUncheckedUpdateWithoutDailyHoursInput>
    create: XOR<HourlyStaffingRuleCreateWithoutDailyHoursInput, HourlyStaffingRuleUncheckedCreateWithoutDailyHoursInput>
  }

  export type HourlyStaffingRuleUpdateWithWhereUniqueWithoutDailyHoursInput = {
    where: HourlyStaffingRuleWhereUniqueInput
    data: XOR<HourlyStaffingRuleUpdateWithoutDailyHoursInput, HourlyStaffingRuleUncheckedUpdateWithoutDailyHoursInput>
  }

  export type HourlyStaffingRuleUpdateManyWithWhereWithoutDailyHoursInput = {
    where: HourlyStaffingRuleScalarWhereInput
    data: XOR<HourlyStaffingRuleUpdateManyMutationInput, HourlyStaffingRuleUncheckedUpdateManyWithoutDailyHoursInput>
  }

  export type HourlyStaffingRuleScalarWhereInput = {
    AND?: HourlyStaffingRuleScalarWhereInput | HourlyStaffingRuleScalarWhereInput[]
    OR?: HourlyStaffingRuleScalarWhereInput[]
    NOT?: HourlyStaffingRuleScalarWhereInput | HourlyStaffingRuleScalarWhereInput[]
    id?: IntFilter<"HourlyStaffingRule"> | number
    dailyHoursId?: IntFilter<"HourlyStaffingRule"> | number
    hourSlot?: IntFilter<"HourlyStaffingRule"> | number
    requiredStaff?: IntFilter<"HourlyStaffingRule"> | number
    preferredStaff?: IntNullableFilter<"HourlyStaffingRule"> | number | null
    maxStaff?: IntNullableFilter<"HourlyStaffingRule"> | number | null
    priority?: StringFilter<"HourlyStaffingRule"> | string
    skillRequirement?: JsonNullableFilter<"HourlyStaffingRule">
    notes?: StringNullableFilter<"HourlyStaffingRule"> | string | null
  }

  export type DailyOperatingHoursCreateWithoutTimeSlotsInput = {
    dayOfWeek: number
    isOpen?: boolean
    openTime?: string | null
    closeTime?: string | null
    breakStart?: string | null
    breakEnd?: string | null
    minStaff?: number
    maxStaff?: number | null
    notes?: string | null
    template: OperatingHoursTemplateCreateNestedOneWithoutDailyHoursInput
  }

  export type DailyOperatingHoursUncheckedCreateWithoutTimeSlotsInput = {
    id?: number
    templateId: number
    dayOfWeek: number
    isOpen?: boolean
    openTime?: string | null
    closeTime?: string | null
    breakStart?: string | null
    breakEnd?: string | null
    minStaff?: number
    maxStaff?: number | null
    notes?: string | null
  }

  export type DailyOperatingHoursCreateOrConnectWithoutTimeSlotsInput = {
    where: DailyOperatingHoursWhereUniqueInput
    create: XOR<DailyOperatingHoursCreateWithoutTimeSlotsInput, DailyOperatingHoursUncheckedCreateWithoutTimeSlotsInput>
  }

  export type DailyOperatingHoursUpsertWithoutTimeSlotsInput = {
    update: XOR<DailyOperatingHoursUpdateWithoutTimeSlotsInput, DailyOperatingHoursUncheckedUpdateWithoutTimeSlotsInput>
    create: XOR<DailyOperatingHoursCreateWithoutTimeSlotsInput, DailyOperatingHoursUncheckedCreateWithoutTimeSlotsInput>
    where?: DailyOperatingHoursWhereInput
  }

  export type DailyOperatingHoursUpdateToOneWithWhereWithoutTimeSlotsInput = {
    where?: DailyOperatingHoursWhereInput
    data: XOR<DailyOperatingHoursUpdateWithoutTimeSlotsInput, DailyOperatingHoursUncheckedUpdateWithoutTimeSlotsInput>
  }

  export type DailyOperatingHoursUpdateWithoutTimeSlotsInput = {
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    isOpen?: BoolFieldUpdateOperationsInput | boolean
    openTime?: NullableStringFieldUpdateOperationsInput | string | null
    closeTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakStart?: NullableStringFieldUpdateOperationsInput | string | null
    breakEnd?: NullableStringFieldUpdateOperationsInput | string | null
    minStaff?: IntFieldUpdateOperationsInput | number
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    template?: OperatingHoursTemplateUpdateOneRequiredWithoutDailyHoursNestedInput
  }

  export type DailyOperatingHoursUncheckedUpdateWithoutTimeSlotsInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateId?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    isOpen?: BoolFieldUpdateOperationsInput | boolean
    openTime?: NullableStringFieldUpdateOperationsInput | string | null
    closeTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakStart?: NullableStringFieldUpdateOperationsInput | string | null
    breakEnd?: NullableStringFieldUpdateOperationsInput | string | null
    minStaff?: IntFieldUpdateOperationsInput | number
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OperatingHoursTemplateCreateWithoutStaffingRulesInput = {
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutOperatingHoursTemplatesInput
    dailyHours?: DailyOperatingHoursCreateNestedManyWithoutTemplateInput
    scheduleOverrides?: ScheduleOverrideCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateUncheckedCreateWithoutStaffingRulesInput = {
    id?: number
    companyId: number
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyHours?: DailyOperatingHoursUncheckedCreateNestedManyWithoutTemplateInput
    scheduleOverrides?: ScheduleOverrideUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateCreateOrConnectWithoutStaffingRulesInput = {
    where: OperatingHoursTemplateWhereUniqueInput
    create: XOR<OperatingHoursTemplateCreateWithoutStaffingRulesInput, OperatingHoursTemplateUncheckedCreateWithoutStaffingRulesInput>
  }

  export type OperatingHoursTemplateUpsertWithoutStaffingRulesInput = {
    update: XOR<OperatingHoursTemplateUpdateWithoutStaffingRulesInput, OperatingHoursTemplateUncheckedUpdateWithoutStaffingRulesInput>
    create: XOR<OperatingHoursTemplateCreateWithoutStaffingRulesInput, OperatingHoursTemplateUncheckedCreateWithoutStaffingRulesInput>
    where?: OperatingHoursTemplateWhereInput
  }

  export type OperatingHoursTemplateUpdateToOneWithWhereWithoutStaffingRulesInput = {
    where?: OperatingHoursTemplateWhereInput
    data: XOR<OperatingHoursTemplateUpdateWithoutStaffingRulesInput, OperatingHoursTemplateUncheckedUpdateWithoutStaffingRulesInput>
  }

  export type OperatingHoursTemplateUpdateWithoutStaffingRulesInput = {
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutOperatingHoursTemplatesNestedInput
    dailyHours?: DailyOperatingHoursUpdateManyWithoutTemplateNestedInput
    scheduleOverrides?: ScheduleOverrideUpdateManyWithoutTemplateNestedInput
  }

  export type OperatingHoursTemplateUncheckedUpdateWithoutStaffingRulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyHours?: DailyOperatingHoursUncheckedUpdateManyWithoutTemplateNestedInput
    scheduleOverrides?: ScheduleOverrideUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type OperatingHoursTemplateCreateWithoutScheduleOverridesInput = {
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutOperatingHoursTemplatesInput
    dailyHours?: DailyOperatingHoursCreateNestedManyWithoutTemplateInput
    staffingRules?: StaffingRuleCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateUncheckedCreateWithoutScheduleOverridesInput = {
    id?: number
    companyId: number
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dailyHours?: DailyOperatingHoursUncheckedCreateNestedManyWithoutTemplateInput
    staffingRules?: StaffingRuleUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type OperatingHoursTemplateCreateOrConnectWithoutScheduleOverridesInput = {
    where: OperatingHoursTemplateWhereUniqueInput
    create: XOR<OperatingHoursTemplateCreateWithoutScheduleOverridesInput, OperatingHoursTemplateUncheckedCreateWithoutScheduleOverridesInput>
  }

  export type OperatingHoursTemplateUpsertWithoutScheduleOverridesInput = {
    update: XOR<OperatingHoursTemplateUpdateWithoutScheduleOverridesInput, OperatingHoursTemplateUncheckedUpdateWithoutScheduleOverridesInput>
    create: XOR<OperatingHoursTemplateCreateWithoutScheduleOverridesInput, OperatingHoursTemplateUncheckedCreateWithoutScheduleOverridesInput>
    where?: OperatingHoursTemplateWhereInput
  }

  export type OperatingHoursTemplateUpdateToOneWithWhereWithoutScheduleOverridesInput = {
    where?: OperatingHoursTemplateWhereInput
    data: XOR<OperatingHoursTemplateUpdateWithoutScheduleOverridesInput, OperatingHoursTemplateUncheckedUpdateWithoutScheduleOverridesInput>
  }

  export type OperatingHoursTemplateUpdateWithoutScheduleOverridesInput = {
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutOperatingHoursTemplatesNestedInput
    dailyHours?: DailyOperatingHoursUpdateManyWithoutTemplateNestedInput
    staffingRules?: StaffingRuleUpdateManyWithoutTemplateNestedInput
  }

  export type OperatingHoursTemplateUncheckedUpdateWithoutScheduleOverridesInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyHours?: DailyOperatingHoursUncheckedUpdateManyWithoutTemplateNestedInput
    staffingRules?: StaffingRuleUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type ScheduleDraftItemCreateWithoutDraftInput = {
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutDraftSchedulesInput
    shiftPattern?: ShiftPatternCreateNestedOneWithoutDraftItemsInput
  }

  export type ScheduleDraftItemUncheckedCreateWithoutDraftInput = {
    id?: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    shiftPatternId?: number | null
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleDraftItemCreateOrConnectWithoutDraftInput = {
    where: ScheduleDraftItemWhereUniqueInput
    create: XOR<ScheduleDraftItemCreateWithoutDraftInput, ScheduleDraftItemUncheckedCreateWithoutDraftInput>
  }

  export type ScheduleDraftItemCreateManyDraftInputEnvelope = {
    data: ScheduleDraftItemCreateManyDraftInput | ScheduleDraftItemCreateManyDraftInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleTemplateCreateWithoutDraftsInput = {
    name: string
    description?: string | null
    industryType: string
    templateType: string
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern: JsonNullValueInput | InputJsonValue
    rotationPeriod?: number | null
    minStaffPerShift?: number
    maxStaffPerShift?: number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    generationLogs?: GenerationLogCreateNestedManyWithoutTemplateInput
    shift_patterns?: ShiftPatternCreateNestedManyWithoutSchedule_templatesInput
  }

  export type ScheduleTemplateUncheckedCreateWithoutDraftsInput = {
    id?: number
    name: string
    description?: string | null
    industryType: string
    templateType: string
    isActive?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern: JsonNullValueInput | InputJsonValue
    rotationPeriod?: number | null
    minStaffPerShift?: number
    maxStaffPerShift?: number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    generationLogs?: GenerationLogUncheckedCreateNestedManyWithoutTemplateInput
    shift_patterns?: ShiftPatternUncheckedCreateNestedManyWithoutSchedule_templatesInput
  }

  export type ScheduleTemplateCreateOrConnectWithoutDraftsInput = {
    where: ScheduleTemplateWhereUniqueInput
    create: XOR<ScheduleTemplateCreateWithoutDraftsInput, ScheduleTemplateUncheckedCreateWithoutDraftsInput>
  }

  export type ScheduleDraftCreateWithoutVersionDraftsInput = {
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    items?: ScheduleDraftItemCreateNestedManyWithoutDraftInput
    scheduleTemplate?: ScheduleTemplateCreateNestedOneWithoutDraftsInput
    parentDraft?: ScheduleDraftCreateNestedOneWithoutVersionDraftsInput
  }

  export type ScheduleDraftUncheckedCreateWithoutVersionDraftsInput = {
    id?: number
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    basedOnTemplateId?: number | null
    basedOnDraftId?: number | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    items?: ScheduleDraftItemUncheckedCreateNestedManyWithoutDraftInput
  }

  export type ScheduleDraftCreateOrConnectWithoutVersionDraftsInput = {
    where: ScheduleDraftWhereUniqueInput
    create: XOR<ScheduleDraftCreateWithoutVersionDraftsInput, ScheduleDraftUncheckedCreateWithoutVersionDraftsInput>
  }

  export type ScheduleDraftCreateWithoutParentDraftInput = {
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    items?: ScheduleDraftItemCreateNestedManyWithoutDraftInput
    scheduleTemplate?: ScheduleTemplateCreateNestedOneWithoutDraftsInput
    versionDrafts?: ScheduleDraftCreateNestedManyWithoutParentDraftInput
  }

  export type ScheduleDraftUncheckedCreateWithoutParentDraftInput = {
    id?: number
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    basedOnTemplateId?: number | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    items?: ScheduleDraftItemUncheckedCreateNestedManyWithoutDraftInput
    versionDrafts?: ScheduleDraftUncheckedCreateNestedManyWithoutParentDraftInput
  }

  export type ScheduleDraftCreateOrConnectWithoutParentDraftInput = {
    where: ScheduleDraftWhereUniqueInput
    create: XOR<ScheduleDraftCreateWithoutParentDraftInput, ScheduleDraftUncheckedCreateWithoutParentDraftInput>
  }

  export type ScheduleDraftCreateManyParentDraftInputEnvelope = {
    data: ScheduleDraftCreateManyParentDraftInput | ScheduleDraftCreateManyParentDraftInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleDraftItemUpsertWithWhereUniqueWithoutDraftInput = {
    where: ScheduleDraftItemWhereUniqueInput
    update: XOR<ScheduleDraftItemUpdateWithoutDraftInput, ScheduleDraftItemUncheckedUpdateWithoutDraftInput>
    create: XOR<ScheduleDraftItemCreateWithoutDraftInput, ScheduleDraftItemUncheckedCreateWithoutDraftInput>
  }

  export type ScheduleDraftItemUpdateWithWhereUniqueWithoutDraftInput = {
    where: ScheduleDraftItemWhereUniqueInput
    data: XOR<ScheduleDraftItemUpdateWithoutDraftInput, ScheduleDraftItemUncheckedUpdateWithoutDraftInput>
  }

  export type ScheduleDraftItemUpdateManyWithWhereWithoutDraftInput = {
    where: ScheduleDraftItemScalarWhereInput
    data: XOR<ScheduleDraftItemUpdateManyMutationInput, ScheduleDraftItemUncheckedUpdateManyWithoutDraftInput>
  }

  export type ScheduleTemplateUpsertWithoutDraftsInput = {
    update: XOR<ScheduleTemplateUpdateWithoutDraftsInput, ScheduleTemplateUncheckedUpdateWithoutDraftsInput>
    create: XOR<ScheduleTemplateCreateWithoutDraftsInput, ScheduleTemplateUncheckedCreateWithoutDraftsInput>
    where?: ScheduleTemplateWhereInput
  }

  export type ScheduleTemplateUpdateToOneWithWhereWithoutDraftsInput = {
    where?: ScheduleTemplateWhereInput
    data: XOR<ScheduleTemplateUpdateWithoutDraftsInput, ScheduleTemplateUncheckedUpdateWithoutDraftsInput>
  }

  export type ScheduleTemplateUpdateWithoutDraftsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generationLogs?: GenerationLogUpdateManyWithoutTemplateNestedInput
    shift_patterns?: ShiftPatternUpdateManyWithoutSchedule_templatesNestedInput
  }

  export type ScheduleTemplateUncheckedUpdateWithoutDraftsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generationLogs?: GenerationLogUncheckedUpdateManyWithoutTemplateNestedInput
    shift_patterns?: ShiftPatternUncheckedUpdateManyWithoutSchedule_templatesNestedInput
  }

  export type ScheduleDraftUpsertWithoutVersionDraftsInput = {
    update: XOR<ScheduleDraftUpdateWithoutVersionDraftsInput, ScheduleDraftUncheckedUpdateWithoutVersionDraftsInput>
    create: XOR<ScheduleDraftCreateWithoutVersionDraftsInput, ScheduleDraftUncheckedCreateWithoutVersionDraftsInput>
    where?: ScheduleDraftWhereInput
  }

  export type ScheduleDraftUpdateToOneWithWhereWithoutVersionDraftsInput = {
    where?: ScheduleDraftWhereInput
    data: XOR<ScheduleDraftUpdateWithoutVersionDraftsInput, ScheduleDraftUncheckedUpdateWithoutVersionDraftsInput>
  }

  export type ScheduleDraftUpdateWithoutVersionDraftsInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ScheduleDraftItemUpdateManyWithoutDraftNestedInput
    scheduleTemplate?: ScheduleTemplateUpdateOneWithoutDraftsNestedInput
    parentDraft?: ScheduleDraftUpdateOneWithoutVersionDraftsNestedInput
  }

  export type ScheduleDraftUncheckedUpdateWithoutVersionDraftsInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    basedOnTemplateId?: NullableIntFieldUpdateOperationsInput | number | null
    basedOnDraftId?: NullableIntFieldUpdateOperationsInput | number | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ScheduleDraftItemUncheckedUpdateManyWithoutDraftNestedInput
  }

  export type ScheduleDraftUpsertWithWhereUniqueWithoutParentDraftInput = {
    where: ScheduleDraftWhereUniqueInput
    update: XOR<ScheduleDraftUpdateWithoutParentDraftInput, ScheduleDraftUncheckedUpdateWithoutParentDraftInput>
    create: XOR<ScheduleDraftCreateWithoutParentDraftInput, ScheduleDraftUncheckedCreateWithoutParentDraftInput>
  }

  export type ScheduleDraftUpdateWithWhereUniqueWithoutParentDraftInput = {
    where: ScheduleDraftWhereUniqueInput
    data: XOR<ScheduleDraftUpdateWithoutParentDraftInput, ScheduleDraftUncheckedUpdateWithoutParentDraftInput>
  }

  export type ScheduleDraftUpdateManyWithWhereWithoutParentDraftInput = {
    where: ScheduleDraftScalarWhereInput
    data: XOR<ScheduleDraftUpdateManyMutationInput, ScheduleDraftUncheckedUpdateManyWithoutParentDraftInput>
  }

  export type ScheduleDraftCreateWithoutItemsInput = {
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    scheduleTemplate?: ScheduleTemplateCreateNestedOneWithoutDraftsInput
    parentDraft?: ScheduleDraftCreateNestedOneWithoutVersionDraftsInput
    versionDrafts?: ScheduleDraftCreateNestedManyWithoutParentDraftInput
  }

  export type ScheduleDraftUncheckedCreateWithoutItemsInput = {
    id?: number
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    basedOnTemplateId?: number | null
    basedOnDraftId?: number | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
    versionDrafts?: ScheduleDraftUncheckedCreateNestedManyWithoutParentDraftInput
  }

  export type ScheduleDraftCreateOrConnectWithoutItemsInput = {
    where: ScheduleDraftWhereUniqueInput
    create: XOR<ScheduleDraftCreateWithoutItemsInput, ScheduleDraftUncheckedCreateWithoutItemsInput>
  }

  export type EmployeeCreateWithoutDraftSchedulesInput = {
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteCreateNestedManyWithoutEmployeeInput
    user: UserCreateNestedOneWithoutEmployeeInput
    leaves?: LeaveCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDraftSchedulesInput = {
    id?: number
    userId: number
    name: string
    email: string
    department: string
    position: string
    phone?: string | null
    address?: string | null
    hireDate?: Date | string
    yearsOfExperience?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeType?: string
    isActive?: boolean
    maxConsecutiveDays?: number
    maxDailyHours?: number
    minDailyHours?: number
    minRestHours?: number
    seniorityLevel?: string
    weeklyHoursTarget?: number
    abilities?: AbilityUncheckedCreateNestedOneWithoutEmployeeInput
    certifications?: EmployeeCertificationUncheckedCreateNestedManyWithoutEmployeeInput
    chemistry1?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee1Input
    chemistry2?: EmployeeChemistryUncheckedCreateNestedManyWithoutEmployee2Input
    constraints?: EmployeeConstraintsUncheckedCreateNestedOneWithoutEmployeeInput
    notes?: EmployeeNoteUncheckedCreateNestedManyWithoutEmployeeInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutEmployeeInput
    preferences?: PreferenceUncheckedCreateNestedOneWithoutEmployeeInput
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDraftSchedulesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDraftSchedulesInput, EmployeeUncheckedCreateWithoutDraftSchedulesInput>
  }

  export type ShiftPatternCreateWithoutDraftItemsInput = {
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleCreateNestedManyWithoutShiftPatternInput
    company?: CompanyCreateNestedOneWithoutShiftPatternsInput
    schedule_templates?: ScheduleTemplateCreateNestedManyWithoutShift_patternsInput
  }

  export type ShiftPatternUncheckedCreateWithoutDraftItemsInput = {
    id?: number
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId?: number | null
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUncheckedCreateNestedManyWithoutShiftPatternInput
    schedule_templates?: ScheduleTemplateUncheckedCreateNestedManyWithoutShift_patternsInput
  }

  export type ShiftPatternCreateOrConnectWithoutDraftItemsInput = {
    where: ShiftPatternWhereUniqueInput
    create: XOR<ShiftPatternCreateWithoutDraftItemsInput, ShiftPatternUncheckedCreateWithoutDraftItemsInput>
  }

  export type ScheduleDraftUpsertWithoutItemsInput = {
    update: XOR<ScheduleDraftUpdateWithoutItemsInput, ScheduleDraftUncheckedUpdateWithoutItemsInput>
    create: XOR<ScheduleDraftCreateWithoutItemsInput, ScheduleDraftUncheckedCreateWithoutItemsInput>
    where?: ScheduleDraftWhereInput
  }

  export type ScheduleDraftUpdateToOneWithWhereWithoutItemsInput = {
    where?: ScheduleDraftWhereInput
    data: XOR<ScheduleDraftUpdateWithoutItemsInput, ScheduleDraftUncheckedUpdateWithoutItemsInput>
  }

  export type ScheduleDraftUpdateWithoutItemsInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scheduleTemplate?: ScheduleTemplateUpdateOneWithoutDraftsNestedInput
    parentDraft?: ScheduleDraftUpdateOneWithoutVersionDraftsNestedInput
    versionDrafts?: ScheduleDraftUpdateManyWithoutParentDraftNestedInput
  }

  export type ScheduleDraftUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    basedOnTemplateId?: NullableIntFieldUpdateOperationsInput | number | null
    basedOnDraftId?: NullableIntFieldUpdateOperationsInput | number | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    versionDrafts?: ScheduleDraftUncheckedUpdateManyWithoutParentDraftNestedInput
  }

  export type EmployeeUpsertWithoutDraftSchedulesInput = {
    update: XOR<EmployeeUpdateWithoutDraftSchedulesInput, EmployeeUncheckedUpdateWithoutDraftSchedulesInput>
    create: XOR<EmployeeCreateWithoutDraftSchedulesInput, EmployeeUncheckedCreateWithoutDraftSchedulesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDraftSchedulesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDraftSchedulesInput, EmployeeUncheckedUpdateWithoutDraftSchedulesInput>
  }

  export type EmployeeUpdateWithoutDraftSchedulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUpdateManyWithoutEmployeeNestedInput
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    leaves?: LeaveUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDraftSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    yearsOfExperience?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    maxConsecutiveDays?: IntFieldUpdateOperationsInput | number
    maxDailyHours?: IntFieldUpdateOperationsInput | number
    minDailyHours?: IntFieldUpdateOperationsInput | number
    minRestHours?: IntFieldUpdateOperationsInput | number
    seniorityLevel?: StringFieldUpdateOperationsInput | string
    weeklyHoursTarget?: IntFieldUpdateOperationsInput | number
    abilities?: AbilityUncheckedUpdateOneWithoutEmployeeNestedInput
    certifications?: EmployeeCertificationUncheckedUpdateManyWithoutEmployeeNestedInput
    chemistry1?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee1NestedInput
    chemistry2?: EmployeeChemistryUncheckedUpdateManyWithoutEmployee2NestedInput
    constraints?: EmployeeConstraintsUncheckedUpdateOneWithoutEmployeeNestedInput
    notes?: EmployeeNoteUncheckedUpdateManyWithoutEmployeeNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutEmployeeNestedInput
    preferences?: PreferenceUncheckedUpdateOneWithoutEmployeeNestedInput
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type ShiftPatternUpsertWithoutDraftItemsInput = {
    update: XOR<ShiftPatternUpdateWithoutDraftItemsInput, ShiftPatternUncheckedUpdateWithoutDraftItemsInput>
    create: XOR<ShiftPatternCreateWithoutDraftItemsInput, ShiftPatternUncheckedCreateWithoutDraftItemsInput>
    where?: ShiftPatternWhereInput
  }

  export type ShiftPatternUpdateToOneWithWhereWithoutDraftItemsInput = {
    where?: ShiftPatternWhereInput
    data: XOR<ShiftPatternUpdateWithoutDraftItemsInput, ShiftPatternUncheckedUpdateWithoutDraftItemsInput>
  }

  export type ShiftPatternUpdateWithoutDraftItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUpdateManyWithoutShiftPatternNestedInput
    company?: CompanyUpdateOneWithoutShiftPatternsNestedInput
    schedule_templates?: ScheduleTemplateUpdateManyWithoutShift_patternsNestedInput
  }

  export type ShiftPatternUncheckedUpdateWithoutDraftItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUncheckedUpdateManyWithoutShiftPatternNestedInput
    schedule_templates?: ScheduleTemplateUncheckedUpdateManyWithoutShift_patternsNestedInput
  }

  export type LeaveCreateManyReviewerInput = {
    id?: number
    employeeId: number
    startDate: Date | string
    endDate: Date | string
    type: string
    reason?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    reviewedAt?: Date | string | null
  }

  export type NoticeReadCreateManyUserInput = {
    id?: number
    noticeId: number
    readAt?: Date | string
  }

  export type NoticeCreateManyCreatorInput = {
    id?: number
    title: string
    content: string
    type: string
    priority: string
    isPinned?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type LeaveUpdateWithoutReviewerInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUpdateOneRequiredWithoutLeavesNestedInput
  }

  export type LeaveUncheckedUpdateWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LeaveUncheckedUpdateManyWithoutReviewerInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NoticeReadUpdateWithoutUserInput = {
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notice?: NoticeUpdateOneRequiredWithoutReadByUsersNestedInput
  }

  export type NoticeReadUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    noticeId?: IntFieldUpdateOperationsInput | number
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticeReadUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    noticeId?: IntFieldUpdateOperationsInput | number
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticeUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readByUsers?: NoticeReadUpdateManyWithoutNoticeNestedInput
  }

  export type NoticeUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readByUsers?: NoticeReadUncheckedUpdateManyWithoutNoticeNestedInput
  }

  export type NoticeUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    isPinned?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ShiftPatternCreateManyCompanyInput = {
    id?: number
    name: string
    description?: string | null
    startTime: string
    endTime: string
    duration: number
    breakDuration?: number
    shiftType: string
    industryType?: string | null
    isTemplate?: boolean
    color?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    days: JsonNullValueInput | InputJsonValue
    enabled?: boolean
    requiredStaff?: number
    requirements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OperatingHoursTemplateCreateManyCompanyInput = {
    id?: number
    templateName: string
    description?: string | null
    isDefault?: boolean
    isActive?: boolean
    timezone?: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShiftPatternUpdateWithoutCompanyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUpdateManyWithoutShiftPatternNestedInput
    schedule_templates?: ScheduleTemplateUpdateManyWithoutShift_patternsNestedInput
    draftItems?: ScheduleDraftItemUpdateManyWithoutShiftPatternNestedInput
  }

  export type ShiftPatternUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUncheckedUpdateManyWithoutShiftPatternNestedInput
    schedule_templates?: ScheduleTemplateUncheckedUpdateManyWithoutShift_patternsNestedInput
    draftItems?: ScheduleDraftItemUncheckedUpdateManyWithoutShiftPatternNestedInput
  }

  export type ShiftPatternUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type OperatingHoursTemplateUpdateWithoutCompanyInput = {
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyHours?: DailyOperatingHoursUpdateManyWithoutTemplateNestedInput
    staffingRules?: StaffingRuleUpdateManyWithoutTemplateNestedInput
    scheduleOverrides?: ScheduleOverrideUpdateManyWithoutTemplateNestedInput
  }

  export type OperatingHoursTemplateUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dailyHours?: DailyOperatingHoursUncheckedUpdateManyWithoutTemplateNestedInput
    staffingRules?: StaffingRuleUncheckedUpdateManyWithoutTemplateNestedInput
    scheduleOverrides?: ScheduleOverrideUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type OperatingHoursTemplateUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    templateName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    timezone?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCertificationCreateManyEmployeeInput = {
    id?: number
    certificationName: string
    certificationBody?: string | null
    issueDate: Date | string
    expiryDate?: Date | string | null
    certificateNumber?: string | null
    isActive?: boolean
    verificationStatus?: string
    attachmentUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeChemistryCreateManyEmployee1Input = {
    id?: number
    employee2Id: number
    score?: number
  }

  export type EmployeeChemistryCreateManyEmployee2Input = {
    id?: number
    employee1Id: number
    score?: number
  }

  export type EmployeeNoteCreateManyEmployeeInput = {
    id?: number
    type: string
    content: string
    priority: string
    createdBy: number
    createdAt?: Date | string
  }

  export type LeaveCreateManyEmployeeInput = {
    id?: number
    startDate: Date | string
    endDate: Date | string
    type: string
    reason?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminComment?: string | null
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
  }

  export type ScheduleCreateManyEmployeeInput = {
    id?: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    generationLogId?: number | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    shiftPatternId?: number | null
    swapRequested?: boolean
  }

  export type ScheduleDraftItemCreateManyEmployeeInput = {
    id?: number
    draftId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    shiftPatternId?: number | null
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployeeCertificationUpdateWithoutEmployeeInput = {
    certificationName?: StringFieldUpdateOperationsInput | string
    certificationBody?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCertificationUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    certificationName?: StringFieldUpdateOperationsInput | string
    certificationBody?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCertificationUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    certificationName?: StringFieldUpdateOperationsInput | string
    certificationBody?: NullableStringFieldUpdateOperationsInput | string | null
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeChemistryUpdateWithoutEmployee1Input = {
    score?: IntFieldUpdateOperationsInput | number
    employee2?: EmployeeUpdateOneRequiredWithoutChemistry2NestedInput
  }

  export type EmployeeChemistryUncheckedUpdateWithoutEmployee1Input = {
    id?: IntFieldUpdateOperationsInput | number
    employee2Id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeChemistryUncheckedUpdateManyWithoutEmployee1Input = {
    id?: IntFieldUpdateOperationsInput | number
    employee2Id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeChemistryUpdateWithoutEmployee2Input = {
    score?: IntFieldUpdateOperationsInput | number
    employee1?: EmployeeUpdateOneRequiredWithoutChemistry1NestedInput
  }

  export type EmployeeChemistryUncheckedUpdateWithoutEmployee2Input = {
    id?: IntFieldUpdateOperationsInput | number
    employee1Id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeChemistryUncheckedUpdateManyWithoutEmployee2Input = {
    id?: IntFieldUpdateOperationsInput | number
    employee1Id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
  }

  export type EmployeeNoteUpdateWithoutEmployeeInput = {
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeNoteUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeNoteUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveUpdateWithoutEmployeeInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewer?: UserUpdateOneWithoutReviewedLeavesNestedInput
  }

  export type LeaveUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type LeaveUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminComment?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ScheduleUpdateWithoutEmployeeInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
    generationLog?: GenerationLogUpdateOneWithoutSchedulesNestedInput
    shiftPattern?: ShiftPatternUpdateOneWithoutSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    generationLogId?: NullableIntFieldUpdateOperationsInput | number | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ScheduleUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    generationLogId?: NullableIntFieldUpdateOperationsInput | number | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ScheduleDraftItemUpdateWithoutEmployeeInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    draft?: ScheduleDraftUpdateOneRequiredWithoutItemsNestedInput
    shiftPattern?: ShiftPatternUpdateOneWithoutDraftItemsNestedInput
  }

  export type ScheduleDraftItemUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    draftId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleDraftItemUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    draftId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticeReadCreateManyNoticeInput = {
    id?: number
    userId: number
    readAt?: Date | string
  }

  export type NoticeReadUpdateWithoutNoticeInput = {
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReadNoticesNestedInput
  }

  export type NoticeReadUncheckedUpdateWithoutNoticeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticeReadUncheckedUpdateManyWithoutNoticeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    readAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateManyShiftPatternInput = {
    id?: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    generationLogId?: number | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    swapRequested?: boolean
  }

  export type ScheduleDraftItemCreateManyShiftPatternInput = {
    id?: number
    draftId: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateWithoutShiftPatternInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUpdateOneRequiredWithoutSchedulesNestedInput
    generationLog?: GenerationLogUpdateOneWithoutSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutShiftPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    generationLogId?: NullableIntFieldUpdateOperationsInput | number | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ScheduleUncheckedUpdateManyWithoutShiftPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    generationLogId?: NullableIntFieldUpdateOperationsInput | number | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ScheduleTemplateUpdateWithoutShift_patternsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generationLogs?: GenerationLogUpdateManyWithoutTemplateNestedInput
    drafts?: ScheduleDraftUpdateManyWithoutScheduleTemplateNestedInput
  }

  export type ScheduleTemplateUncheckedUpdateWithoutShift_patternsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    generationLogs?: GenerationLogUncheckedUpdateManyWithoutTemplateNestedInput
    drafts?: ScheduleDraftUncheckedUpdateManyWithoutScheduleTemplateNestedInput
  }

  export type ScheduleTemplateUncheckedUpdateManyWithoutShift_patternsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    industryType?: StringFieldUpdateOperationsInput | string
    templateType?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    workDaysPattern?: JsonNullValueInput | InputJsonValue
    rotationPeriod?: NullableIntFieldUpdateOperationsInput | number | null
    minStaffPerShift?: IntFieldUpdateOperationsInput | number
    maxStaffPerShift?: NullableIntFieldUpdateOperationsInput | number | null
    coverageRequirements?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleDraftItemUpdateWithoutShiftPatternInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    draft?: ScheduleDraftUpdateOneRequiredWithoutItemsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutDraftSchedulesNestedInput
  }

  export type ScheduleDraftItemUncheckedUpdateWithoutShiftPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    draftId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleDraftItemUncheckedUpdateManyWithoutShiftPatternInput = {
    id?: IntFieldUpdateOperationsInput | number
    draftId?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GenerationLogCreateManyTemplateInput = {
    id?: number
    generatedBy: number
    generationType: string
    periodStart: Date | string
    periodEnd: Date | string
    totalSchedulesCreated?: number
    totalEmployeesAffected?: number
    parameters: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: number | null
    employeeSatisfaction?: number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: number | null
    algorithmVersion?: string
    status?: string
    notes?: string | null
    createdAt?: Date | string
  }

  export type ScheduleDraftCreateManyScheduleTemplateInput = {
    id?: number
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    basedOnDraftId?: number | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type GenerationLogUpdateWithoutTemplateInput = {
    generatedBy?: IntFieldUpdateOperationsInput | number
    generationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSchedulesCreated?: IntFieldUpdateOperationsInput | number
    totalEmployeesAffected?: IntFieldUpdateOperationsInput | number
    parameters?: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    algorithmVersion?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ScheduleUpdateManyWithoutGenerationLogNestedInput
  }

  export type GenerationLogUncheckedUpdateWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    generatedBy?: IntFieldUpdateOperationsInput | number
    generationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSchedulesCreated?: IntFieldUpdateOperationsInput | number
    totalEmployeesAffected?: IntFieldUpdateOperationsInput | number
    parameters?: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    algorithmVersion?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedules?: ScheduleUncheckedUpdateManyWithoutGenerationLogNestedInput
  }

  export type GenerationLogUncheckedUpdateManyWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    generatedBy?: IntFieldUpdateOperationsInput | number
    generationType?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    totalSchedulesCreated?: IntFieldUpdateOperationsInput | number
    totalEmployeesAffected?: IntFieldUpdateOperationsInput | number
    parameters?: JsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    coverageAchieved?: NullableFloatFieldUpdateOperationsInput | number | null
    employeeSatisfaction?: NullableFloatFieldUpdateOperationsInput | number | null
    constraintViolations?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    executionTime?: NullableIntFieldUpdateOperationsInput | number | null
    algorithmVersion?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShiftPatternUpdateWithoutSchedule_templatesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUpdateManyWithoutShiftPatternNestedInput
    company?: CompanyUpdateOneWithoutShiftPatternsNestedInput
    draftItems?: ScheduleDraftItemUpdateManyWithoutShiftPatternNestedInput
  }

  export type ShiftPatternUncheckedUpdateWithoutSchedule_templatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
    schedules?: ScheduleUncheckedUpdateManyWithoutShiftPatternNestedInput
    draftItems?: ScheduleDraftItemUncheckedUpdateManyWithoutShiftPatternNestedInput
  }

  export type ShiftPatternUncheckedUpdateManyWithoutSchedule_templatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    breakDuration?: IntFieldUpdateOperationsInput | number
    shiftType?: StringFieldUpdateOperationsInput | string
    industryType?: NullableStringFieldUpdateOperationsInput | string | null
    isTemplate?: BoolFieldUpdateOperationsInput | boolean
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: NullableIntFieldUpdateOperationsInput | number | null
    days?: JsonNullValueInput | InputJsonValue
    enabled?: BoolFieldUpdateOperationsInput | boolean
    requiredStaff?: IntFieldUpdateOperationsInput | number
    requirements?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ScheduleDraftUpdateWithoutScheduleTemplateInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ScheduleDraftItemUpdateManyWithoutDraftNestedInput
    parentDraft?: ScheduleDraftUpdateOneWithoutVersionDraftsNestedInput
    versionDrafts?: ScheduleDraftUpdateManyWithoutParentDraftNestedInput
  }

  export type ScheduleDraftUncheckedUpdateWithoutScheduleTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    basedOnDraftId?: NullableIntFieldUpdateOperationsInput | number | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ScheduleDraftItemUncheckedUpdateManyWithoutDraftNestedInput
    versionDrafts?: ScheduleDraftUncheckedUpdateManyWithoutParentDraftNestedInput
  }

  export type ScheduleDraftUncheckedUpdateManyWithoutScheduleTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    basedOnDraftId?: NullableIntFieldUpdateOperationsInput | number | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScheduleCreateManyGenerationLogInput = {
    id?: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    notes?: string | null
    status?: string
    createdBy?: number | null
    updatedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    breakTime?: string | null
    estimatedWorkload?: string | null
    isAutoGenerated?: boolean
    overtimeApproved?: boolean
    priority?: string
    shiftPatternId?: number | null
    swapRequested?: boolean
  }

  export type ScheduleUpdateWithoutGenerationLogInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
    employee?: EmployeeUpdateOneRequiredWithoutSchedulesNestedInput
    shiftPattern?: ShiftPatternUpdateOneWithoutSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutGenerationLogInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ScheduleUncheckedUpdateManyWithoutGenerationLogInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    isAutoGenerated?: BoolFieldUpdateOperationsInput | boolean
    overtimeApproved?: BoolFieldUpdateOperationsInput | boolean
    priority?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    swapRequested?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DailyOperatingHoursCreateManyTemplateInput = {
    id?: number
    dayOfWeek: number
    isOpen?: boolean
    openTime?: string | null
    closeTime?: string | null
    breakStart?: string | null
    breakEnd?: string | null
    minStaff?: number
    maxStaff?: number | null
    notes?: string | null
  }

  export type StaffingRuleCreateManyTemplateInput = {
    id?: number
    ruleName: string
    ruleType: string
    conditions: JsonNullValueInput | InputJsonValue
    staffingRequirements: JsonNullValueInput | InputJsonValue
    priority?: number
    isActive?: boolean
    effectiveFrom?: Date | string | null
    effectiveTo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleOverrideCreateManyTemplateInput = {
    id?: number
    overrideDate: Date | string
    overrideType: string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: string | null
    isActive?: boolean
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DailyOperatingHoursUpdateWithoutTemplateInput = {
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    isOpen?: BoolFieldUpdateOperationsInput | boolean
    openTime?: NullableStringFieldUpdateOperationsInput | string | null
    closeTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakStart?: NullableStringFieldUpdateOperationsInput | string | null
    breakEnd?: NullableStringFieldUpdateOperationsInput | string | null
    minStaff?: IntFieldUpdateOperationsInput | number
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSlots?: HourlyStaffingRuleUpdateManyWithoutDailyHoursNestedInput
  }

  export type DailyOperatingHoursUncheckedUpdateWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    isOpen?: BoolFieldUpdateOperationsInput | boolean
    openTime?: NullableStringFieldUpdateOperationsInput | string | null
    closeTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakStart?: NullableStringFieldUpdateOperationsInput | string | null
    breakEnd?: NullableStringFieldUpdateOperationsInput | string | null
    minStaff?: IntFieldUpdateOperationsInput | number
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSlots?: HourlyStaffingRuleUncheckedUpdateManyWithoutDailyHoursNestedInput
  }

  export type DailyOperatingHoursUncheckedUpdateManyWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    isOpen?: BoolFieldUpdateOperationsInput | boolean
    openTime?: NullableStringFieldUpdateOperationsInput | string | null
    closeTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakStart?: NullableStringFieldUpdateOperationsInput | string | null
    breakEnd?: NullableStringFieldUpdateOperationsInput | string | null
    minStaff?: IntFieldUpdateOperationsInput | number
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StaffingRuleUpdateWithoutTemplateInput = {
    ruleName?: StringFieldUpdateOperationsInput | string
    ruleType?: StringFieldUpdateOperationsInput | string
    conditions?: JsonNullValueInput | InputJsonValue
    staffingRequirements?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffingRuleUncheckedUpdateWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ruleName?: StringFieldUpdateOperationsInput | string
    ruleType?: StringFieldUpdateOperationsInput | string
    conditions?: JsonNullValueInput | InputJsonValue
    staffingRequirements?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffingRuleUncheckedUpdateManyWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ruleName?: StringFieldUpdateOperationsInput | string
    ruleType?: StringFieldUpdateOperationsInput | string
    conditions?: JsonNullValueInput | InputJsonValue
    staffingRequirements?: JsonNullValueInput | InputJsonValue
    priority?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleOverrideUpdateWithoutTemplateInput = {
    overrideDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overrideType?: StringFieldUpdateOperationsInput | string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleOverrideUncheckedUpdateWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    overrideDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overrideType?: StringFieldUpdateOperationsInput | string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleOverrideUncheckedUpdateManyWithoutTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    overrideDate?: DateTimeFieldUpdateOperationsInput | Date | string
    overrideType?: StringFieldUpdateOperationsInput | string
    customHours?: NullableJsonNullValueInput | InputJsonValue
    staffingOverride?: NullableJsonNullValueInput | InputJsonValue
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HourlyStaffingRuleCreateManyDailyHoursInput = {
    id?: number
    hourSlot: number
    requiredStaff?: number
    preferredStaff?: number | null
    maxStaff?: number | null
    priority?: string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type HourlyStaffingRuleUpdateWithoutDailyHoursInput = {
    hourSlot?: IntFieldUpdateOperationsInput | number
    requiredStaff?: IntFieldUpdateOperationsInput | number
    preferredStaff?: NullableIntFieldUpdateOperationsInput | number | null
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: StringFieldUpdateOperationsInput | string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HourlyStaffingRuleUncheckedUpdateWithoutDailyHoursInput = {
    id?: IntFieldUpdateOperationsInput | number
    hourSlot?: IntFieldUpdateOperationsInput | number
    requiredStaff?: IntFieldUpdateOperationsInput | number
    preferredStaff?: NullableIntFieldUpdateOperationsInput | number | null
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: StringFieldUpdateOperationsInput | string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type HourlyStaffingRuleUncheckedUpdateManyWithoutDailyHoursInput = {
    id?: IntFieldUpdateOperationsInput | number
    hourSlot?: IntFieldUpdateOperationsInput | number
    requiredStaff?: IntFieldUpdateOperationsInput | number
    preferredStaff?: NullableIntFieldUpdateOperationsInput | number | null
    maxStaff?: NullableIntFieldUpdateOperationsInput | number | null
    priority?: StringFieldUpdateOperationsInput | string
    skillRequirement?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScheduleDraftItemCreateManyDraftInput = {
    id?: number
    employeeId: number
    date: Date | string
    startTime: string
    endTime: string
    shiftType?: string
    shiftPatternId?: number | null
    notes?: string | null
    status?: string
    priority?: string
    breakTime?: string | null
    estimatedWorkload?: string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleDraftCreateManyParentDraftInput = {
    id?: number
    companyId: number
    name: string
    description?: string | null
    version?: string
    status?: string
    periodStart: Date | string
    periodEnd: Date | string
    basedOnTemplateId?: number | null
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
    approvedBy?: number | null
    approvedAt?: Date | string | null
    activatedAt?: Date | string | null
    archivedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: string | null
  }

  export type ScheduleDraftItemUpdateWithoutDraftInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutDraftSchedulesNestedInput
    shiftPattern?: ShiftPatternUpdateOneWithoutDraftItemsNestedInput
  }

  export type ScheduleDraftItemUncheckedUpdateWithoutDraftInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleDraftItemUncheckedUpdateManyWithoutDraftInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    shiftType?: StringFieldUpdateOperationsInput | string
    shiftPatternId?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    breakTime?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedWorkload?: NullableStringFieldUpdateOperationsInput | string | null
    requirements?: NullableJsonNullValueInput | InputJsonValue
    constraints?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleDraftUpdateWithoutParentDraftInput = {
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ScheduleDraftItemUpdateManyWithoutDraftNestedInput
    scheduleTemplate?: ScheduleTemplateUpdateOneWithoutDraftsNestedInput
    versionDrafts?: ScheduleDraftUpdateManyWithoutParentDraftNestedInput
  }

  export type ScheduleDraftUncheckedUpdateWithoutParentDraftInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    basedOnTemplateId?: NullableIntFieldUpdateOperationsInput | number | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    items?: ScheduleDraftItemUncheckedUpdateManyWithoutDraftNestedInput
    versionDrafts?: ScheduleDraftUncheckedUpdateManyWithoutParentDraftNestedInput
  }

  export type ScheduleDraftUncheckedUpdateManyWithoutParentDraftInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    version?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    basedOnTemplateId?: NullableIntFieldUpdateOperationsInput | number | null
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedBy?: NullableIntFieldUpdateOperationsInput | number | null
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeCountOutputTypeDefaultArgs instead
     */
    export type EmployeeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoticeCountOutputTypeDefaultArgs instead
     */
    export type NoticeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoticeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShiftPatternCountOutputTypeDefaultArgs instead
     */
    export type ShiftPatternCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShiftPatternCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleTemplateCountOutputTypeDefaultArgs instead
     */
    export type ScheduleTemplateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleTemplateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GenerationLogCountOutputTypeDefaultArgs instead
     */
    export type GenerationLogCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GenerationLogCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OperatingHoursTemplateCountOutputTypeDefaultArgs instead
     */
    export type OperatingHoursTemplateCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OperatingHoursTemplateCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DailyOperatingHoursCountOutputTypeDefaultArgs instead
     */
    export type DailyOperatingHoursCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DailyOperatingHoursCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDraftCountOutputTypeDefaultArgs instead
     */
    export type ScheduleDraftCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDraftCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeDefaultArgs instead
     */
    export type EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AbilityDefaultArgs instead
     */
    export type AbilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AbilityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PreferenceDefaultArgs instead
     */
    export type PreferenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PreferenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDefaultArgs instead
     */
    export type ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeaveDefaultArgs instead
     */
    export type LeaveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeaveDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeNoteDefaultArgs instead
     */
    export type EmployeeNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeNoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeChemistryDefaultArgs instead
     */
    export type EmployeeChemistryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeChemistryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoticeDefaultArgs instead
     */
    export type NoticeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoticeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoticeReadDefaultArgs instead
     */
    export type NoticeReadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoticeReadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShiftPatternDefaultArgs instead
     */
    export type ShiftPatternArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShiftPatternDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleTemplateDefaultArgs instead
     */
    export type ScheduleTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleTemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeConstraintsDefaultArgs instead
     */
    export type EmployeeConstraintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeConstraintsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GenerationLogDefaultArgs instead
     */
    export type GenerationLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GenerationLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeCertificationDefaultArgs instead
     */
    export type EmployeeCertificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeCertificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OperatingHoursTemplateDefaultArgs instead
     */
    export type OperatingHoursTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OperatingHoursTemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DailyOperatingHoursDefaultArgs instead
     */
    export type DailyOperatingHoursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DailyOperatingHoursDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HourlyStaffingRuleDefaultArgs instead
     */
    export type HourlyStaffingRuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HourlyStaffingRuleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffingRuleDefaultArgs instead
     */
    export type StaffingRuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffingRuleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleOverrideDefaultArgs instead
     */
    export type ScheduleOverrideArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleOverrideDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffingAnalyticsDefaultArgs instead
     */
    export type StaffingAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffingAnalyticsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDraftDefaultArgs instead
     */
    export type ScheduleDraftArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDraftDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDraftItemDefaultArgs instead
     */
    export type ScheduleDraftItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDraftItemDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}