// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String // User's name
  password  String // Plain text password as requested
  role      String   @default("employee") // employee, manager, admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  employee       Employee?
  company        Company?
  reviewedLeaves Leave[]      @relation("reviewer")
  createdNotices Notice[]     @relation("NoticeCreator")
  readNotices    NoticeRead[]

  @@map("users")
}

model Company {
  id                          Int      @id @default(autoincrement())
  userId                      Int      @unique
  companyName                 String
  industry                    String // healthcare, restaurant, military, retail, etc.
  companySize                 String // small(1-50), medium(51-200), large(201-500), enterprise(500+)
  address                     String?
  phone                       String?
  workType                    String   @default("flexible") // fixed, flexible, shift
  workDays                    Json? // ["mon", "tue", "wed", "thu", "fri"] for fixed type
  defaultStartTime            String?  @default("09:00") // Default work start time
  defaultEndTime              String?  @default("18:00") // Default work end time
  showLeaveInSchedule         Boolean  @default(false) // Show leave employees in schedule
  minStaffRequired            Int? // Minimum staff required per day
  // Enhanced fields for auto-generation
  timezone                    String   @default("UTC") // Company timezone
  operatingHours              Json? // Operating hours by day of week
  peakHours                   Json? // Peak hours requiring more staff
  holidaySchedule             Json? // Holiday scheduling preferences  
  autoSchedulingEnabled       Boolean  @default(false) // Enable auto-scheduling
  scheduleNotificationDays    Int      @default(7) // Days in advance to notify about schedules
  allowEmployeeSelfScheduling Boolean  @default(false) // Allow employees to pick shifts
  maxAdvanceScheduleDays      Int      @default(30) // Max days to schedule in advance
  minimumStaffCoverage        Float    @default(1.0) // Minimum coverage ratio
  overtimePolicy              Json? // Overtime rules and policies
  unionRules                  Json? // Union-specific scheduling rules
  complianceRequirements      Json? // Legal compliance requirements
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("companies")
}

model Employee {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  name               String
  email              String   @unique
  department         String
  position           String
  phone              String?
  address            String?
  hireDate           DateTime @default(now())
  // Enhanced fields for schedule auto-generation
  weeklyHoursTarget  Int      @default(40) // Target weekly hours
  maxDailyHours      Int      @default(8) // Maximum daily hours
  minDailyHours      Int      @default(4) // Minimum daily hours
  maxConsecutiveDays Int      @default(5) // Max consecutive work days
  minRestHours       Int      @default(12) // Minimum rest hours between shifts
  isActive           Boolean  @default(true) // Active for scheduling
  employeeType       String   @default("full-time") // full-time, part-time, contract
  seniorityLevel     String   @default("junior") // junior, intermediate, senior, lead
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user           User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  abilities      Ability[]
  preferences    Preference[]
  schedules      Schedule[]
  leaves         Leave[]
  notes          EmployeeNote[]
  chemistry1     EmployeeChemistry[]     @relation("Employee1Chemistry")
  chemistry2     EmployeeChemistry[]     @relation("Employee2Chemistry")
  constraints    EmployeeConstraints?
  certifications EmployeeCertification[]

  @@map("employees")
}

model Ability {
  id              Int     @id @default(autoincrement())
  employeeId      Int
  experience      Int     @default(1) // 1-5 연차
  workSkill       Int     @default(1) // 1-5 업무 능력
  teamChemistry   Int     @default(1) // 1-5 사내 친밀도
  customerService Int     @default(1) // 1-5 고객 응대
  flexibility     Int     @default(1) // 1-5 근무 유연성
  totalScore      Int? // 합산 점수
  rank            String? // S, A, B, C, D

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId]) // One ability record per employee
  @@map("abilities")
}

model Preference {
  id           Int  @id @default(autoincrement())
  employeeId   Int
  preferDays   Json // Array of preferred days ["monday", "tuesday", etc.]
  avoidDays    Json // Array of days to avoid
  fixedOffDays Json // Array of fixed off days

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId]) // One preference record per employee
  @@map("preferences")
}

model Schedule {
  id                Int      @id @default(autoincrement())
  employeeId        Int
  date              DateTime @db.Date
  startTime         String // HH:MM format
  endTime           String // HH:MM format
  shiftType         String   @default("regular") // morning, afternoon, evening, night, regular
  notes             String?  @db.Text
  status            String   @default("scheduled") // scheduled, completed, cancelled
  // Enhanced fields for auto-generation
  shiftPatternId    Int? // Reference to shift pattern used
  generationLogId   Int? // Reference to generation log that created this schedule
  isAutoGenerated   Boolean  @default(false) // Was this schedule auto-generated
  priority          String   @default("normal") // high, normal, low - for conflict resolution
  estimatedWorkload String? // light, moderate, heavy - for workload balancing
  breakTime         String? // HH:MM format - scheduled break time
  overtimeApproved  Boolean  @default(false) // Is overtime pre-approved
  swapRequested     Boolean  @default(false) // Has employee requested a swap
  createdBy         Int?
  updatedBy         Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  employee      Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  shiftPattern  ShiftPattern?  @relation("ShiftPatternSchedules", fields: [shiftPatternId], references: [id], onDelete: SetNull)
  generationLog GenerationLog? @relation("GeneratedSchedules", fields: [generationLogId], references: [id], onDelete: SetNull)

  @@index([date, employeeId])
  @@index([employeeId, date, startTime])
  @@index([shiftPatternId])
  @@index([generationLogId])
  @@index([isAutoGenerated])
  @@map("schedules")
}

model Leave {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  startDate    DateTime  @db.Date
  endDate      DateTime  @db.Date
  type         String // vacation, sick, personal, etc.
  reason       String?
  status       String    @default("pending") // pending, approved, rejected
  adminComment String? // 관리자 코멘트
  reviewedAt   DateTime? // 검토 날짜
  reviewedBy   Int? // 검토한 관리자 ID
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer User?    @relation("reviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)

  @@map("leaves")
}

model EmployeeNote {
  id         Int      @id @default(autoincrement())
  employeeId Int
  type       String // 'praise', 'caution', 'general'
  content    String   @db.Text
  priority   String // 'high', 'medium', 'low'
  createdBy  Int
  createdAt  DateTime @default(now())

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_notes")
}

model EmployeeChemistry {
  id          Int @id @default(autoincrement())
  employee1Id Int
  employee2Id Int
  score       Int @default(3) // 1-5 궁합 점수

  // Relations
  employee1 Employee @relation("Employee1Chemistry", fields: [employee1Id], references: [id], onDelete: Cascade)
  employee2 Employee @relation("Employee2Chemistry", fields: [employee2Id], references: [id], onDelete: Cascade)

  @@unique([employee1Id, employee2Id])
  @@map("employee_chemistry")
}

model Notice {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.Text
  type      String // 'general', 'policy', 'schedule', 'emergency'
  priority  String // 'low', 'medium', 'high', 'critical'
  isPinned  Boolean   @default(false)
  createdBy Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  // Relations
  creator     User         @relation("NoticeCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  readByUsers NoticeRead[]

  @@index([createdAt])
  @@index([type])
  @@index([priority])
  @@index([isPinned])
  @@map("notices")
}

model NoticeRead {
  id       Int      @id @default(autoincrement())
  noticeId Int
  userId   Int
  readAt   DateTime @default(now())

  // Relations
  notice Notice @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noticeId, userId])
  @@index([userId])
  @@map("notice_reads")
}

// Enhanced models for schedule auto-generation

model ShiftPattern {
  id                 Int      @id @default(autoincrement())
  name               String // e.g., "Morning Shift", "Night Shift", "Rotating Pattern"
  description        String?  @db.Text
  startTime          String // HH:MM format
  endTime            String // HH:MM format  
  duration           Int // Duration in minutes
  breakDuration      Int      @default(0) // Break time in minutes
  shiftType          String // morning, afternoon, evening, night, rotating
  industryType       String? // healthcare, restaurant, retail, etc.
  isTemplate         Boolean  @default(false) // Is this a reusable template
  color              String   @default("#007bff") // Display color for UI
  minStaffRequired   Int      @default(1) // Minimum staff required for this shift
  maxStaffRequired   Int? // Maximum staff allowed for this shift
  requiredSkillLevel String   @default("junior") // Required skill level
  allowedDepartments Json? // Array of departments that can work this shift
  createdBy          Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  schedules Schedule[]         @relation("ShiftPatternSchedules")
  templates ScheduleTemplate[] @relation("TemplateShiftPatterns")

  @@index([shiftType])
  @@index([industryType])
  @@index([isTemplate])
  @@map("shift_patterns")
}

model ScheduleTemplate {
  id                   Int      @id @default(autoincrement())
  name                 String // e.g., "Hospital 24/7", "Restaurant Peak Hours", "Office Standard"
  description          String?  @db.Text
  industryType         String // healthcare, restaurant, retail, manufacturing, etc.
  templateType         String // weekly, daily, monthly, rotating
  isActive             Boolean  @default(true)
  metadata             Json? // Template-specific configuration
  // Template rules and patterns
  workDaysPattern      Json // e.g., ["mon", "tue", "wed", "thu", "fri"]
  rotationPeriod       Int?     @default(7) // Days in rotation cycle
  minStaffPerShift     Int      @default(1) // Minimum staff required per shift
  maxStaffPerShift     Int? // Maximum staff per shift
  coverageRequirements Json? // Detailed coverage requirements
  createdBy            Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  shiftPatterns  ShiftPattern[]  @relation("TemplateShiftPatterns")
  generationLogs GenerationLog[]

  @@index([industryType])
  @@index([templateType])
  @@index([isActive])
  @@map("schedule_templates")
}

model EmployeeConstraints {
  id                    Int      @id @default(autoincrement())
  employeeId            Int      @unique
  // Time-based constraints
  unavailableTimeSlots  Json? // Array of time slots employee can't work
  preferredTimeSlots    Json? // Array of preferred time slots
  blackoutDates         Json? // Specific dates employee can't work
  // Shift preferences
  preferredShiftTypes   Json? // Array of preferred shift types
  avoidShiftTypes       Json? // Array of shift types to avoid
  canWorkWeekends       Boolean  @default(true)
  canWorkHolidays       Boolean  @default(true)
  canWorkNightShifts    Boolean  @default(true)
  // Work pattern constraints
  maxShiftsPerWeek      Int      @default(5)
  maxOvertimeHours      Int      @default(10)
  requiresFixedSchedule Boolean  @default(false)
  fixedShiftPattern     String? // Reference to specific shift pattern
  // Transportation and location
  maxTravelTime         Int? // Maximum travel time to workplace in minutes
  workLocation          String? // Preferred work location
  hasReliableTransport  Boolean  @default(true)
  // Special requirements
  needsAccommodation    Boolean  @default(false)
  accommodationDetails  String?  @db.Text
  medicalRestrictions   Json? // Array of medical restrictions
  certificationRequired Json? // Required certifications for certain shifts
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_constraints")
}

model GenerationLog {
  id                     Int      @id @default(autoincrement())
  templateId             Int? // Reference to template used
  generatedBy            Int // User who initiated generation
  generationType         String // manual, automatic, template-based
  periodStart            DateTime @db.Date // Start date of generated period
  periodEnd              DateTime @db.Date // End date of generated period
  totalSchedulesCreated  Int      @default(0)
  totalEmployeesAffected Int      @default(0)
  // Generation parameters
  parameters             Json // Parameters used for generation
  constraints            Json? // Constraints applied during generation
  // Results and statistics
  coverageAchieved       Float? // Percentage of required coverage achieved
  employeeSatisfaction   Float? // Average employee satisfaction score
  constraintViolations   Json? // List of constraint violations
  warnings               Json? // Warnings generated during process
  errors                 Json? // Errors encountered during generation
  // Generation metadata
  executionTime          Int? // Time taken to generate in milliseconds
  algorithmVersion       String   @default("v1.0")
  status                 String   @default("completed") // pending, completed, failed, partial
  notes                  String?  @db.Text
  createdAt              DateTime @default(now())

  // Relations
  template  ScheduleTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  schedules Schedule[]        @relation("GeneratedSchedules")

  @@index([generatedBy])
  @@index([periodStart, periodEnd])
  @@index([status])
  @@index([createdAt])
  @@map("generation_logs")
}

model EmployeeCertification {
  id                 Int       @id @default(autoincrement())
  employeeId         Int
  certificationName  String // e.g., "CPR", "Food Safety", "Forklift Operation"
  certificationBody  String? // Issuing organization
  issueDate          DateTime  @db.Date
  expiryDate         DateTime? @db.Date
  certificateNumber  String?
  isActive           Boolean   @default(true)
  verificationStatus String    @default("pending") // pending, verified, expired
  attachmentUrl      String? // URL to certificate document
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([certificationName])
  @@index([expiryDate])
  @@index([isActive])
  @@map("employee_certifications")
}
