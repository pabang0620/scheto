generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  name           String
  password       String
  role           String       @default("employee")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  company        Company?
  employee       Employee?
  reviewedLeaves Leave[]      @relation("reviewer")
  readNotices    NoticeRead[]
  createdNotices Notice[]     @relation("NoticeCreator")

  @@map("users")
}

model Company {
  id                          Int            @id @default(autoincrement())
  userId                      Int            @unique
  companyName                 String
  industry                    String
  companySize                 String
  address                     String?
  phone                       String?
  createdAt                   DateTime       @default(now())
  defaultEndTime              String?        @default("18:00")
  defaultStartTime            String?        @default("09:00")
  minStaffRequired            Int?
  showLeaveInSchedule         Boolean        @default(false)
  updatedAt                   DateTime       @updatedAt
  workDays                    Json?
  workType                    String         @default("flexible")
  allowEmployeeSelfScheduling Boolean        @default(false)
  autoSchedulingEnabled       Boolean        @default(false)
  complianceRequirements      Json?
  holidaySchedule             Json?
  maxAdvanceScheduleDays      Int            @default(30)
  minimumStaffCoverage        Float          @default(1)
  operatingHours              Json?
  overtimePolicy              Json?
  peakHours                   Json?
  scheduleNotificationDays    Int            @default(7)
  timezone                    String         @default("UTC")
  unionRules                  Json?
  user                        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  shiftPatterns               ShiftPattern[]
  operatingHoursTemplates     OperatingHoursTemplate[]

  @@map("companies")
}

model Employee {
  id                 Int                     @id @default(autoincrement())
  userId             Int                     @unique
  name               String
  email              String                  @unique
  department         String
  position           String
  phone              String?
  address            String?
  hireDate           DateTime                @default(now())
  yearsOfExperience  Int                     @default(0)
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  employeeType       String                  @default("full-time")
  isActive           Boolean                 @default(true)
  maxConsecutiveDays Int                     @default(5)
  maxDailyHours      Int                     @default(8)
  minDailyHours      Int                     @default(4)
  minRestHours       Int                     @default(12)
  seniorityLevel     String                  @default("junior")
  weeklyHoursTarget  Int                     @default(40)
  abilities          Ability?
  certifications     EmployeeCertification[]
  chemistry1         EmployeeChemistry[]     @relation("Employee1Chemistry")
  chemistry2         EmployeeChemistry[]     @relation("Employee2Chemistry")
  constraints        EmployeeConstraints?
  notes              EmployeeNote[]
  user               User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaves             Leave[]
  preferences        Preference?
  schedules          Schedule[]
  draftSchedules     ScheduleDraftItem[] @relation("DraftSchedules")

  @@map("employees")
}

model Ability {
  id              Int      @id @default(autoincrement())
  employeeId      Int      @unique
  customerService Int      @default(1)
  experience      Int      @default(1)
  flexibility     Int      @default(1)
  rank            String?
  teamChemistry   Int      @default(1)
  totalScore      Int?
  workSkill       Int      @default(1)
  employee        Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("abilities")
}

model Preference {
  id           Int      @id @default(autoincrement())
  employeeId   Int      @unique
  preferDays   Json
  avoidDays    Json
  fixedOffDays Json
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("preferences")
}

model Schedule {
  id                Int            @id @default(autoincrement())
  employeeId        Int
  date              DateTime       @db.Date
  startTime         String
  endTime           String
  shiftType         String         @default("regular")
  notes             String?        @db.Text
  status            String         @default("scheduled")
  createdBy         Int?
  updatedBy         Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  breakTime         String?
  estimatedWorkload String?
  generationLogId   Int?
  isAutoGenerated   Boolean        @default(false)
  overtimeApproved  Boolean        @default(false)
  priority          String         @default("normal")
  shiftPatternId    Int?
  swapRequested     Boolean        @default(false)
  employee          Employee       @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  generationLog     GenerationLog? @relation("GeneratedSchedules", fields: [generationLogId], references: [id])
  shiftPattern      ShiftPattern?  @relation("ShiftPatternSchedules", fields: [shiftPatternId], references: [id])

  @@index([date, employeeId])
  @@index([employeeId, date, startTime])
  @@index([shiftPatternId])
  @@index([generationLogId])
  @@index([isAutoGenerated])
  @@map("schedules")
}

model Leave {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  startDate    DateTime  @db.Date
  endDate      DateTime  @db.Date
  type         String
  reason       String?
  status       String    @default("pending")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  adminComment String?
  reviewedAt   DateTime?
  reviewedBy   Int?
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer     User?     @relation("reviewer", fields: [reviewedBy], references: [id])

  @@index([employeeId], map: "leaves_employeeId_fkey")
  @@index([reviewedBy], map: "leaves_reviewedBy_fkey")
  @@map("leaves")
}

model EmployeeNote {
  id         Int      @id @default(autoincrement())
  employeeId Int
  type       String
  content    String   @db.Text
  priority   String
  createdBy  Int
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId], map: "employee_notes_employeeId_fkey")
  @@map("employee_notes")
}

model EmployeeChemistry {
  id          Int      @id @default(autoincrement())
  employee1Id Int
  employee2Id Int
  score       Int      @default(3)
  employee1   Employee @relation("Employee1Chemistry", fields: [employee1Id], references: [id], onDelete: Cascade)
  employee2   Employee @relation("Employee2Chemistry", fields: [employee2Id], references: [id], onDelete: Cascade)

  @@unique([employee1Id, employee2Id])
  @@index([employee2Id], map: "employee_chemistry_employee2Id_fkey")
  @@map("employee_chemistry")
}

model Notice {
  id          Int          @id @default(autoincrement())
  title       String
  content     String       @db.Text
  type        String
  priority    String
  isPinned    Boolean      @default(false)
  createdBy   Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  expiresAt   DateTime?
  readByUsers NoticeRead[]
  creator     User         @relation("NoticeCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([type])
  @@index([priority])
  @@index([isPinned])
  @@index([createdBy], map: "notices_createdBy_fkey")
  @@map("notices")
}

model NoticeRead {
  id       Int      @id @default(autoincrement())
  noticeId Int
  userId   Int
  readAt   DateTime @default(now())
  notice   Notice   @relation(fields: [noticeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noticeId, userId])
  @@index([userId])
  @@map("notice_reads")
}

model ShiftPattern {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String?            @db.Text
  startTime          String
  endTime            String
  duration           Int
  breakDuration      Int                @default(0)
  shiftType          String
  industryType       String?
  isTemplate         Boolean            @default(false)
  color              String             @default("#007bff")
  createdBy          Int
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  companyId          Int?
  days               Json
  enabled            Boolean            @default(true)
  requiredStaff      Int                @default(1)
  requirements       Json?
  schedules          Schedule[]         @relation("ShiftPatternSchedules")
  company            Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  schedule_templates ScheduleTemplate[] @relation("templateshiftpatterns")
  draftItems         ScheduleDraftItem[] @relation("DraftShiftPatterns")

  @@index([shiftType])
  @@index([industryType])
  @@index([isTemplate])
  @@index([companyId], map: "shift_patterns_companyId_fkey")
  @@map("shift_patterns")
}

model ScheduleTemplate {
  id                   Int             @id @default(autoincrement())
  name                 String
  description          String?         @db.Text
  industryType         String
  templateType         String
  isActive             Boolean         @default(true)
  metadata             Json?
  workDaysPattern      Json
  rotationPeriod       Int?            @default(7)
  minStaffPerShift     Int             @default(1)
  maxStaffPerShift     Int?
  coverageRequirements Json?
  createdBy            Int
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  generationLogs       GenerationLog[]
  shift_patterns       ShiftPattern[]  @relation("templateshiftpatterns")
  drafts               ScheduleDraft[]

  @@index([industryType])
  @@index([templateType])
  @@index([isActive])
  @@map("schedule_templates")
}

model EmployeeConstraints {
  id                    Int      @id @default(autoincrement())
  employeeId            Int      @unique
  unavailableTimeSlots  Json?
  preferredTimeSlots    Json?
  blackoutDates         Json?
  preferredShiftTypes   Json?
  avoidShiftTypes       Json?
  canWorkWeekends       Boolean  @default(true)
  canWorkHolidays       Boolean  @default(true)
  canWorkNightShifts    Boolean  @default(true)
  maxShiftsPerWeek      Int      @default(5)
  maxOvertimeHours      Int      @default(10)
  requiresFixedSchedule Boolean  @default(false)
  fixedShiftPattern     String?
  maxTravelTime         Int?
  workLocation          String?
  hasReliableTransport  Boolean  @default(true)
  needsAccommodation    Boolean  @default(false)
  accommodationDetails  String?  @db.Text
  medicalRestrictions   Json?
  certificationRequired Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  employee              Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("employee_constraints")
}

model GenerationLog {
  id                     Int               @id @default(autoincrement())
  templateId             Int?
  generatedBy            Int
  generationType         String
  periodStart            DateTime          @db.Date
  periodEnd              DateTime          @db.Date
  totalSchedulesCreated  Int               @default(0)
  totalEmployeesAffected Int               @default(0)
  parameters             Json
  constraints            Json?
  coverageAchieved       Float?
  employeeSatisfaction   Float?
  constraintViolations   Json?
  warnings               Json?
  errors                 Json?
  executionTime          Int?
  algorithmVersion       String            @default("v1.0")
  status                 String            @default("completed")
  notes                  String?           @db.Text
  createdAt              DateTime          @default(now())
  template               ScheduleTemplate? @relation(fields: [templateId], references: [id])
  schedules              Schedule[]        @relation("GeneratedSchedules")

  @@index([generatedBy])
  @@index([periodStart, periodEnd])
  @@index([status])
  @@index([createdAt])
  @@index([templateId], map: "generation_logs_templateId_fkey")
  @@map("generation_logs")
}

model EmployeeCertification {
  id                 Int       @id @default(autoincrement())
  employeeId         Int
  certificationName  String
  certificationBody  String?
  issueDate          DateTime  @db.Date
  expiryDate         DateTime? @db.Date
  certificateNumber  String?
  isActive           Boolean   @default(true)
  verificationStatus String    @default("pending")
  attachmentUrl      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  employee           Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([certificationName])
  @@index([expiryDate])
  @@index([isActive])
  @@map("employee_certifications")
}

model OperatingHoursTemplate {
  id                Int                        @id @default(autoincrement())
  companyId         Int
  templateName      String
  description       String?                    @db.Text
  isDefault         Boolean                    @default(false)
  isActive          Boolean                    @default(true)
  timezone          String                     @default("UTC")
  createdBy         Int
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  company           Company                    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  dailyHours        DailyOperatingHours[]
  staffingRules     StaffingRule[]
  scheduleOverrides ScheduleOverride[]

  @@index([companyId])
  @@index([isDefault])
  @@index([isActive])
  @@map("operating_hours_templates")
}

model DailyOperatingHours {
  id           Int                     @id @default(autoincrement())
  templateId   Int
  dayOfWeek    Int                     // 0=Sunday, 1=Monday, ..., 6=Saturday
  isOpen       Boolean                 @default(true)
  openTime     String?                 // "09:00" format
  closeTime    String?                 // "18:00" format
  breakStart   String?                 // Optional break time start
  breakEnd     String?                 // Optional break time end
  minStaff     Int                     @default(1)
  maxStaff     Int?
  notes        String?                 @db.Text
  template     OperatingHoursTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  timeSlots    HourlyStaffingRule[]

  @@unique([templateId, dayOfWeek])
  @@index([templateId])
  @@index([dayOfWeek])
  @@map("daily_operating_hours")
}

model HourlyStaffingRule {
  id              Int                 @id @default(autoincrement())
  dailyHoursId    Int
  hourSlot        Int                 // 0-23 hour of the day
  requiredStaff   Int                 @default(1)
  preferredStaff  Int?
  maxStaff        Int?
  priority        String              @default("normal") // low, normal, high, critical
  skillRequirement Json?              // Required skills for this time slot
  notes           String?             @db.Text
  dailyHours      DailyOperatingHours @relation(fields: [dailyHoursId], references: [id], onDelete: Cascade)

  @@unique([dailyHoursId, hourSlot])
  @@index([dailyHoursId])
  @@index([hourSlot])
  @@index([priority])
  @@map("hourly_staffing_rules")
}

model StaffingRule {
  id                    Int                    @id @default(autoincrement())
  templateId            Int
  ruleName              String
  ruleType              String                 // "time_based", "day_based", "volume_based", "seasonal"
  conditions            Json                   // Rule conditions (time ranges, days, volumes, etc.)
  staffingRequirements  Json                   // Staff requirements for this rule
  priority              Int                    @default(1) // Higher number = higher priority
  isActive              Boolean                @default(true)
  effectiveFrom         DateTime?              @db.Date
  effectiveTo           DateTime?              @db.Date
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  template              OperatingHoursTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@index([ruleType])
  @@index([priority])
  @@index([isActive])
  @@index([effectiveFrom, effectiveTo])
  @@map("staffing_rules")
}

model ScheduleOverride {
  id              Int                    @id @default(autoincrement())
  templateId      Int
  overrideDate    DateTime               @db.Date
  overrideType    String                 // "closed", "special_hours", "special_staffing"
  customHours     Json?                  // Custom operating hours for this date
  staffingOverride Json?                 // Custom staffing requirements
  reason          String?                @db.Text
  isActive        Boolean                @default(true)
  createdBy       Int
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  template        OperatingHoursTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, overrideDate])
  @@index([templateId])
  @@index([overrideDate])
  @@index([overrideType])
  @@index([isActive])
  @@map("schedule_overrides")
}

model StaffingAnalytics {
  id                    Int      @id @default(autoincrement())
  companyId             Int
  analysisDate          DateTime @db.Date
  dayOfWeek             Int
  totalScheduledHours   Float
  totalRequiredHours    Float
  coverageRate          Float
  utilizationRate       Float
  shortfallHours        Float    @default(0)
  overstaffingHours     Float    @default(0)
  averageStaffPerHour   Float
  peakStaffingHour      Int?
  lowStaffingHour       Int?
  hourlyBreakdown       Json     // Detailed hour-by-hour analysis
  departmentBreakdown   Json?    // Department-specific analysis
  skillGaps             Json?    // Skill requirement gaps
  costAnalysis          Json?    // Labor cost analysis
  recommendations       Json?    // Auto-generated recommendations
  createdAt             DateTime @default(now())

  @@unique([companyId, analysisDate])
  @@index([companyId])
  @@index([analysisDate])
  @@index([dayOfWeek])
  @@index([coverageRate])
  @@index([utilizationRate])
  @@map("staffing_analytics")
}

model ScheduleDraft {
  id                 Int                  @id @default(autoincrement())
  companyId          Int
  name               String
  description        String?              @db.Text
  version            String               @default("1.0.0")
  status             String               @default("draft") // draft, reviewing, active, archived
  periodStart        DateTime             @db.Date
  periodEnd          DateTime             @db.Date
  basedOnTemplateId  Int?
  basedOnDraftId     Int?                 // For version management
  createdBy          Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  approvedBy         Int?
  approvedAt         DateTime?
  activatedAt        DateTime?
  archivedAt         DateTime?
  metadata           Json?                // Additional configuration data
  notes              String?              @db.Text
  items              ScheduleDraftItem[]
  scheduleTemplate   ScheduleTemplate?    @relation(fields: [basedOnTemplateId], references: [id])
  parentDraft        ScheduleDraft?       @relation("DraftVersions", fields: [basedOnDraftId], references: [id])
  versionDrafts      ScheduleDraft[]      @relation("DraftVersions")

  @@index([companyId])
  @@index([status])
  @@index([createdBy])
  @@index([periodStart, periodEnd])
  @@index([basedOnTemplateId])
  @@index([basedOnDraftId])
  @@map("schedule_drafts")
}

model ScheduleDraftItem {
  id              Int           @id @default(autoincrement())
  draftId         Int
  employeeId      Int
  date            DateTime      @db.Date
  startTime       String
  endTime         String
  shiftType       String        @default("regular")
  shiftPatternId  Int?
  notes           String?       @db.Text
  status          String        @default("planned") // planned, confirmed, modified, excluded
  priority        String        @default("normal")
  breakTime       String?
  estimatedWorkload String?
  requirements    Json?         // Special requirements for this shift
  constraints     Json?         // Any constraints applied
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  draft           ScheduleDraft @relation(fields: [draftId], references: [id], onDelete: Cascade)
  employee        Employee      @relation("DraftSchedules", fields: [employeeId], references: [id], onDelete: Cascade)
  shiftPattern    ShiftPattern? @relation("DraftShiftPatterns", fields: [shiftPatternId], references: [id])

  @@index([draftId])
  @@index([employeeId])
  @@index([date])
  @@index([status])
  @@index([shiftPatternId])
  @@index([draftId, date, employeeId])
  @@map("schedule_draft_items")
}
